/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["tables"] = factory();
	else
		root["tables"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./public/TypeScript/Tables/Classes/Checklist.ts":
/*!*******************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Checklist.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Checklist: () => (/* binding */ Checklist)\n/* harmony export */ });\n/* harmony import */ var _Functions_HtmlGeneration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Functions/HtmlGeneration */ \"./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts\");\n/* harmony import */ var _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Functions/PowerTableFunctions */ \"./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts\");\n\n\nclass Checklist {\n    htmlElement = $(\"#Checklist\");\n    canvasBody = this.htmlElement.find(\".offcanvas-body\");\n    tableHandler;\n    checklist = [];\n    constructor(tableHandler) {\n        this.tableHandler = tableHandler;\n        this.CheckForExistingChecklist();\n        this.attachEvents();\n    }\n    CheckForExistingChecklist() {\n        const checks = this.htmlElement.find('#checkListData').text();\n        if (checks) {\n            const JsonChecks = JSON.parse(checks);\n            JsonChecks.forEach((check, index) => {\n                const productionId = check.production_id;\n                const beenBuild = check.been_build === 1;\n                const beenTested = check.been_tested === 1;\n                const productionRow = this.tableHandler.productionTableRows.find(row => row.row_id == productionId);\n                if (productionRow) {\n                    this.checklist.push({ index, productionRow, beenBuild, beenTested });\n                }\n            });\n            this.buildChecklist();\n            this.generateMissingChecklist();\n        }\n        else {\n            this.createChecklist();\n        }\n    }\n    buildChecklist() {\n        this.checklist.forEach((check, index) => {\n            this.createChecklistCard(check.productionRow, index, check.beenBuild, check.beenTested);\n        });\n        this.initCheckBoxes();\n    }\n    createChecklist() {\n        this.checklist = [];\n        const checklist = $(\"#Checklist .offcanvas-body\");\n        checklist.empty();\n        this.tableHandler.productionTableRows.forEach((row, index) => {\n            this.createChecklistCard(row, index);\n            this.checklist.push({ index, productionRow: row, beenBuild: false, beenTested: false });\n        });\n        this.initCheckBoxes();\n    }\n    createChecklistCard(row, index, beenBuild = false, beenTested = false) {\n        const productionAmount = row.quantity;\n        if (!row.recipe)\n            return;\n        const recipeName = row.recipe?.name || \"Unknown\";\n        const buildingName = row.recipe?.building?.name || \"Unknown\";\n        const buildingAmount = _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_1__.PowerTableFunctions.calculateBuildingAmount(row.recipe, row);\n        if (productionAmount <= 0)\n            return;\n        this.canvasBody.append(_Functions_HtmlGeneration__WEBPACK_IMPORTED_MODULE_0__.HtmlGeneration.createCard(index, recipeName, productionAmount, buildingAmount, beenBuild, beenTested, buildingName));\n        this.attachToggleEvents(this.canvasBody.find(\".card\").last());\n    }\n    updateCheckList(productionRow) {\n        const check = this.checklist.find(check => check.productionRow.row_id == productionRow.row_id);\n        if (check) {\n            const row = check.productionRow;\n            if (!row.recipe)\n                return;\n            const productionAmount = row.quantity;\n            const recipeName = row.recipe?.name || \"Unknown\";\n            const buildingName = row.recipe?.building?.name || \"Unknown\";\n            const buildingAmount = _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_1__.PowerTableFunctions.calculateBuildingAmount(row.recipe, row);\n            const card = this.canvasBody.find(`#check-${check.index}`);\n            if (card.length === 0) {\n                this.createChecklistCard(productionRow, check.index);\n            }\n            else {\n                $(card).replaceWith(_Functions_HtmlGeneration__WEBPACK_IMPORTED_MODULE_0__.HtmlGeneration.createCard(check.index, recipeName, productionAmount, buildingAmount, false, false, buildingName));\n            }\n            this.checklist[check.index] = { index: check.index, productionRow, beenBuild: false, beenTested: false };\n        }\n        else {\n            this.createChecklistCard(productionRow, this.checklist.length);\n            this.checklist.push({ index: this.checklist.length, productionRow, beenBuild: false, beenTested: false });\n        }\n        this.initCheckBoxes();\n    }\n    attachEvents() {\n        const input = $(\"#Checklist #searchChecklist\");\n        const clearSearch = $(\"#Checklist #resetSearchChecklist\");\n        input.on(\"input\", () => {\n            const value = input.val();\n            this.searchChecklist(value);\n        });\n        clearSearch.on(\"click\", () => {\n            input.val(\"\");\n            this.clearSearch();\n        });\n    }\n    attachToggleEvents(card) {\n        const beenTested = card.find(\"input[type='checkbox'][for='tested']\");\n        const beenBuild = card.find(\"input[type='checkbox'][for='build']\");\n        beenTested.on(\"change\", (event) => {\n            // get id form card\n            const indexCard = $(event.target).closest(\".card\").attr(\"id\")?.replace(\"check-\", \"\");\n            if (!indexCard)\n                return;\n            this.checklist[+indexCard].beenTested = $(event.target).is(\":checked\");\n        });\n        beenBuild.on(\"change\", (event) => {\n            const indexCard = $(event.target).closest(\".card\").attr(\"id\")?.replace(\"check-\", \"\");\n            if (!indexCard)\n                return;\n            this.checklist[+indexCard].beenBuild = $(event.target).is(\":checked\");\n        });\n    }\n    generateMissingChecklist() {\n        const missing = [];\n        this.tableHandler.productionTableRows.forEach((row, index) => {\n            const check = this.checklist.find(check => check.productionRow.row_id == row.row_id);\n            if (!check) {\n                this.createChecklistCard(row, index);\n                this.checklist.push({ index, productionRow: row, beenBuild: false, beenTested: false });\n            }\n        });\n    }\n    searchChecklist(recipeName) {\n        recipeName = recipeName.toLowerCase();\n        const $offcanvasBody = $(\"#Checklist .offcanvas-body\");\n        $offcanvasBody.find(\".alert\").remove();\n        const $cards = $offcanvasBody.find(\".card\");\n        $cards.each((index, card) => {\n            const cardRecipeName = $(card).find(\".recipeName\").text().toLowerCase();\n            if (cardRecipeName.includes(recipeName)) {\n                $(card).show();\n            }\n            else {\n                $(card).hide();\n            }\n        });\n        const anyVisible = $cards.toArray().some(card => $(card).is(\":visible\"));\n        if (!anyVisible) {\n            $offcanvasBody.append(\"<div class='alert alert-danger'>No results found</div>\");\n        }\n    }\n    clearSearch() {\n        $(\"#Checklist .offcanvas-body\").find(\".card\").each((index, card) => {\n            $(card).show();\n        });\n    }\n    getChecklist() {\n        // filter out the checks that have 0 per min and 0 quantity\n        const checklist = this.checklist.filter(check => {\n            return +check.productionRow.quantity !== 0 && check.productionRow.quantity;\n        });\n        return checklist;\n    }\n    setChecklist(checklist) {\n        if (checklist) {\n            this.checklist = checklist;\n            this.canvasBody.empty();\n            this.buildChecklist();\n        }\n        else {\n            this.createChecklist();\n        }\n    }\n    initCheckBoxes() {\n        this.canvasBody.find(\"input[type='checkbox']\").each((index, checkbox) => {\n            // @ts-ignore\n            $(checkbox).bootstrapToggle();\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Checklist.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/BuildingOptions.ts":
/*!******************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/BuildingOptions.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildingOptions: () => (/* binding */ buildingOptions)\n/* harmony export */ });\nconst buildingOptions = `\r\n<option value=\"\" disabled>Select a building</option>\r\n<option value=\"16\">Assembler</option>\r\n<option value=\"247\">AWESOME Sink</option>\r\n<option value=\"17\">Blender</option>\r\n<option value=\"19\">Constructor</option>\r\n<option value=\"6\">Converter</option>\r\n<option value=\"13\">Foundry</option>\r\n<option value=\"246\">Hypertube Entrance</option>\r\n<option value=\"21\">Main Portal</option>\r\n<option value=\"15\">Manufacturer</option>\r\n<option value=\"10\">Miner Mk.1</option>\r\n<option value=\"9\">Miner Mk.2</option>\r\n<option value=\"11\">Miner Mk.3</option>\r\n<option value=\"8\">Oil Extractor</option>\r\n<option value=\"14\">Packager</option>\r\n<option value=\"7\">Particle Accelerator</option>\r\n<option value=\"249\">Pipeline Pump Mk.1</option>\r\n<option value=\"248\">Pipeline Pump Mk.2</option>\r\n<option value=\"5\">Quantum Encoder</option>\r\n<option value=\"12\">Refinery</option>\r\n<option value=\"22\">Satellite Portal</option>\r\n<option value=\"18\">Smelter</option>\r\n<option value=\"250\">Valve</option>\r\n<option value=\"4\">Water Extractor</option>\r\n`;\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/BuildingOptions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts":
/*!*********************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtraProductionRow: () => (/* binding */ ExtraProductionRow)\n/* harmony export */ });\nclass ExtraProductionRow {\n    Product;\n    Usage;\n    ExportPerMin;\n    Quantity;\n    constructor(Product = \"\", Usage = 0, ExportPerMin = 0, quantity = 0) {\n        this.Product = Product;\n        this.Usage = Usage;\n        this.ExportPerMin = ExportPerMin;\n        this.Quantity = quantity;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/Import.ts":
/*!*********************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/Import.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Import: () => (/* binding */ Import)\n/* harmony export */ });\nclass Import {\n    index;\n    amount;\n    doubleExport;\n    product;\n    constructor(index = 0, amount = 0, product = '', doubleExport = false) {\n        this.index = index;\n        this.amount = amount;\n        this.product = product;\n        this.doubleExport = doubleExport;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/Import.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts":
/*!******************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImportsTableRow: () => (/* binding */ ImportsTableRow)\n/* harmony export */ });\nclass ImportsTableRow {\n    itemId;\n    quantity;\n    product;\n    constructor(itemId = 0, quantity = 0, product = '') {\n        this.itemId = itemId;\n        this.quantity = quantity;\n        this.product = product;\n    }\n    static async create(itemId = 0, quantity = 0, product = '') {\n        return new ImportsTableRow(itemId, quantity, product);\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/ItemOptions.ts":
/*!**************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/ItemOptions.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ItemOptions: () => (/* binding */ ItemOptions)\n/* harmony export */ });\nconst ItemOptions = `\r\n<option value=\"\" disabled>Select an item</option>\r\n<option value=\"111\">Actual Snow</option>\r\n<option value=\"82\">Adaptive Control Unit</option>\r\n<option value=\"48\">AI Expansion Server</option>\r\n<option value=\"79\">AI Limiter</option>\r\n<option value=\"45\">Alclad Aluminum Sheet</option>\r\n<option value=\"102\">Alien DNA Capsule</option>\r\n<option value=\"100\">Alien Protein</option>\r\n<option value=\"72\">Alumina Solution</option>\r\n<option value=\"71\">Aluminum Casing</option>\r\n<option value=\"7\">Aluminum Ingot</option>\r\n<option value=\"70\">Aluminum Scrap</option>\r\n<option value=\"56\">Assembly Director System</option>\r\n<option value=\"77\">Automated Wiring</option>\r\n<option value=\"98\">Ballistic Warp Drive</option>\r\n<option value=\"8\">Battery</option>\r\n<option value=\"128\">Bauxite</option>\r\n<option value=\"55\">Biochemical Sculptor</option>\r\n<option value=\"137\">Biomass</option>\r\n<option value=\"95\">Black Powder</option>\r\n<option value=\"117\">Blue FICSMAS Ornament</option>\r\n<option value=\"101\">Blue Power Slug</option>\r\n<option value=\"20\">Cable</option>\r\n<option value=\"110\">Candy Cane</option>\r\n<option value=\"57\">Caterium Ingot</option>\r\n<option value=\"129\">Caterium Ore</option>\r\n<option value=\"59\">Circuit Board</option>\r\n<option value=\"123\">Coal</option>\r\n<option value=\"14\">Compacted Coal</option>\r\n<option value=\"73\">Computer</option>\r\n<option value=\"3\">Concrete</option>\r\n<option value=\"37\">Cooling System</option>\r\n<option value=\"113\">Copper FICSMAS Ornament</option>\r\n<option value=\"69\">Copper Ingot</option>\r\n<option value=\"130\">Copper Ore</option>\r\n<option value=\"88\">Copper Powder</option>\r\n<option value=\"26\">Copper Sheet</option>\r\n<option value=\"134\">Crude Oil</option>\r\n<option value=\"32\">Crystal Oscillator</option>\r\n<option value=\"34\">Dark Matter Crystal</option>\r\n<option value=\"41\">Dark Matter Residue</option>\r\n<option value=\"44\">Diamonds</option>\r\n<option value=\"93\">Dissolved Silica</option>\r\n<option value=\"90\">Electromagnetic Control Rod</option>\r\n<option value=\"58\">Empty Canister</option>\r\n<option value=\"31\">Empty Fluid Tank</option>\r\n<option value=\"61\">Encased Industrial Beam</option>\r\n<option value=\"84\">Encased Plutonium Cell</option>\r\n<option value=\"92\">Encased Uranium Cell</option>\r\n<option value=\"43\">Excited Photonic Matter</option>\r\n<option value=\"146\">Fabric</option>\r\n<option value=\"54\">Ficsite Ingot</option>\r\n<option value=\"38\">Ficsite Trigon</option>\r\n<option value=\"112\">FICSMAS Bow</option>\r\n<option value=\"109\">FICSMAS Decoration</option>\r\n<option value=\"118\">FICSMAS Gift</option>\r\n<option value=\"108\">FICSMAS Ornament Bundle</option>\r\n<option value=\"115\">FICSMAS Tree Branch</option>\r\n<option value=\"107\">FICSMAS Wonder Star</option>\r\n<option value=\"96\">Ficsonium</option>\r\n<option value=\"121\">Ficsonium Fuel Rod</option>\r\n<option value=\"24\">Fuel</option>\r\n<option value=\"52\">Fused Modular Frame</option>\r\n<option value=\"99\">Gas Filter</option>\r\n<option value=\"150\">Hatcher Remains</option>\r\n<option value=\"89\">Heat Sink</option>\r\n<option value=\"74\">Heavy Modular Frame</option>\r\n<option value=\"64\">Heavy Oil Residue</option>\r\n<option value=\"76\">High-Speed Connector</option>\r\n<option value=\"147\">Hog Remains</option>\r\n<option value=\"13\">Iodine-Infused Filter</option>\r\n<option value=\"35\">Ionized Fuel</option>\r\n<option value=\"114\">Iron FICSMAS Ornament</option>\r\n<option value=\"21\">Iron Ingot</option>\r\n<option value=\"122\">Iron Ore</option>\r\n<option value=\"5\">Iron Plate</option>\r\n<option value=\"18\">Iron Rod</option>\r\n<option value=\"138\">Leaves</option>\r\n<option value=\"132\">Limestone</option>\r\n<option value=\"141\">Liquid Biofuel</option>\r\n<option value=\"49\">Magnetic Field Generator</option>\r\n<option value=\"103\">Mercer Sphere</option>\r\n<option value=\"81\">Modular Engine</option>\r\n<option value=\"27\">Modular Frame</option>\r\n<option value=\"33\">Motor</option>\r\n<option value=\"139\">Mycelia</option>\r\n<option value=\"47\">Neural-Quantum Processor</option>\r\n<option value=\"29\">Nitric Acid</option>\r\n<option value=\"125\">Nitrogen Gas</option>\r\n<option value=\"86\">Non-Fissile Uranium</option>\r\n<option value=\"91\">Nuclear Pasta</option>\r\n<option value=\"142\">Packaged Alumina Solution</option>\r\n<option value=\"9\">Packaged Fuel</option>\r\n<option value=\"15\">Packaged Heavy Oil Residue</option>\r\n<option value=\"10\">Packaged Ionized Fuel</option>\r\n<option value=\"136\">Packaged Liquid Biofuel</option>\r\n<option value=\"144\">Packaged Nitric Acid</option>\r\n<option value=\"143\">Packaged Nitrogen Gas</option>\r\n<option value=\"17\">Packaged Oil</option>\r\n<option value=\"11\">Packaged Rocket Fuel</option>\r\n<option value=\"145\">Packaged Sulfuric Acid</option>\r\n<option value=\"12\">Packaged Turbofuel</option>\r\n<option value=\"68\">Packaged Water</option>\r\n<option value=\"16\">Petroleum Coke</option>\r\n<option value=\"60\">Plastic</option>\r\n<option value=\"120\">Plutonium Fuel Rod</option>\r\n<option value=\"85\">Plutonium Pellet</option>\r\n<option value=\"2\">Plutonium Waste</option>\r\n<option value=\"63\">Polymer Resin</option>\r\n<option value=\"83\">Pressure Conversion Cube</option>\r\n<option value=\"104\">Purple Power Slug</option>\r\n<option value=\"65\">Quartz Crystal</option>\r\n<option value=\"80\">Quickwire</option>\r\n<option value=\"53\">Radio Control Unit</option>\r\n<option value=\"131\">Raw Quartz</option>\r\n<option value=\"42\">Reanimated SAM</option>\r\n<option value=\"116\">Red FICSMAS Ornament</option>\r\n<option value=\"22\">Reinforced Iron Plate</option>\r\n<option value=\"25\">Rocket Fuel</option>\r\n<option value=\"23\">Rotor</option>\r\n<option value=\"62\">Rubber</option>\r\n<option value=\"127\">SAM</option>\r\n<option value=\"50\">SAM Fluctuator</option>\r\n<option value=\"28\">Screw</option>\r\n<option value=\"4\">Silica</option>\r\n<option value=\"97\">Singularity Cell</option>\r\n<option value=\"75\">Smart Plating</option>\r\n<option value=\"106\">Smokeless Powder</option>\r\n<option value=\"135\">Solid Biofuel</option>\r\n<option value=\"148\">Spitter Remains</option>\r\n<option value=\"78\">Stator</option>\r\n<option value=\"6\">Steel Beam</option>\r\n<option value=\"66\">Steel Ingot</option>\r\n<option value=\"51\">Steel Pipe</option>\r\n<option value=\"149\">Stinger Remains</option>\r\n<option value=\"126\">Sulfur</option>\r\n<option value=\"87\">Sulfuric Acid</option>\r\n<option value=\"36\">Supercomputer</option>\r\n<option value=\"46\">Superposition Oscillator</option>\r\n<option value=\"94\">Thermal Propulsion Rocket</option>\r\n<option value=\"40\">Time Crystal</option>\r\n<option value=\"39\">Turbo Motor</option>\r\n<option value=\"30\">Turbofuel</option>\r\n<option value=\"133\">Uranium</option>\r\n<option value=\"119\">Uranium Fuel Rod</option>\r\n<option value=\"1\">Uranium Waste</option>\r\n<option value=\"67\">Versatile Framework</option>\r\n<option value=\"124\">Water</option>\r\n<option value=\"19\">Wire</option>\r\n<option value=\"140\">Wood</option>\r\n<option value=\"105\">Yellow Power Slug</option>\r\n`;\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/ItemOptions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts":
/*!****************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PowerTableRow: () => (/* binding */ PowerTableRow)\n/* harmony export */ });\n/* harmony import */ var _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Functions/Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n\nclass PowerTableRow {\n    buildingId;\n    quantity;\n    clockSpeed;\n    Consumption;\n    userRow;\n    building;\n    constructor(buildingId = NaN, quantity = 0, clockSpeed = 100, Consumption = 0, userRow = true, building = null) {\n        this.buildingId = buildingId;\n        this.quantity = quantity;\n        this.clockSpeed = clockSpeed;\n        this.Consumption = Consumption;\n        this.userRow = userRow;\n        this.building = building;\n    }\n    static async create(buildingId = NaN, quantity = 0, clockSpeed = 100, Consumption = 0, userRow = true, building = null, buildingCache = []) {\n        if (typeof userRow === 'string') {\n            switch (userRow.toLowerCase()) {\n                case '0':\n                case 'false':\n                    userRow = false;\n                    break;\n                case '1':\n                case 'true':\n                    userRow = true;\n                    break;\n                default:\n                    userRow = true;\n                    break;\n            }\n        }\n        const instance = new PowerTableRow(buildingId, quantity, clockSpeed, Consumption, userRow, building);\n        if (!building && buildingId) {\n            instance.building = buildingCache.find(b => b.id === +buildingId) || null;\n            if (!instance.building) {\n                const building = await _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.getBuilding(buildingId);\n                // if not in cache, add it\n                if (building && !buildingCache.find(b => b.id === building.id)) {\n                    buildingCache.push(building);\n                }\n                instance.building = building;\n            }\n        }\n        return instance;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/ProductionTableRow.ts":
/*!*********************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/ProductionTableRow.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProductionTableRow: () => (/* binding */ ProductionTableRow)\n/* harmony export */ });\n/* harmony import */ var _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Functions/Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n/* harmony import */ var _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Functions/ProductionLineFunctions */ \"./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/v4.js\");\n\n\n\nclass ProductionTableRow {\n    row_id;\n    recipeId;\n    quantity;\n    product;\n    Usage;\n    exportPerMin;\n    doubleExport;\n    extraCells;\n    recipe;\n    imports;\n    productionImports;\n    recipeSetting = null;\n    constructor(id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(), recipeId = '', quantity = 0, product = '', Usage = 0, exportPerMin = 0, doubleExport = false, extraCells = null) {\n        this.row_id = id;\n        this.recipeId = +recipeId;\n        this.quantity = quantity;\n        this.product = product;\n        this.Usage = Usage;\n        this.exportPerMin = exportPerMin;\n        this.doubleExport = doubleExport;\n        this.extraCells = extraCells;\n        this.recipe = null;\n        this.imports = [];\n        this.productionImports = [];\n    }\n    static async create(id = 0, recipeId = '', quantity = 0, product = '', Usage = 0, exportPerMin = 0, doubleExport = false, extraCells = null, recipeCache = []) {\n        const instance = new ProductionTableRow(id, recipeId, quantity, product, Usage, exportPerMin, doubleExport, extraCells);\n        if (instance.recipe == null) {\n            instance.recipe = recipeCache.find(r => r.id === +recipeId) || null;\n            if (instance.recipe == null && recipeId) {\n                instance.recipe = await _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.getRecipe(+recipeId);\n                if (instance.recipe && !recipeCache.find(r => r.id === instance.recipe?.id)) {\n                    recipeCache.push(instance.recipe);\n                }\n            }\n        }\n        if (instance.extraCells !== null) {\n            instance.extraCells.Quantity = _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_1__.ProductionLineFunctions.calculateSecondExportPerMin(instance);\n        }\n        return instance;\n    }\n    async getRecipe(recipeId) {\n        this.recipe = await _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.getRecipe(+recipeId);\n    }\n    saveDoubleExportQuantity() {\n        if (this.doubleExport && this.extraCells !== null) {\n            this.extraCells.Quantity = _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_1__.ProductionLineFunctions.calculateSecondExportPerMin(this);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/ProductionTableRow.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/RecipeOptions.ts":
/*!****************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/RecipeOptions.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecipeOptions: () => (/* binding */ RecipeOptions)\n/* harmony export */ });\nconst RecipeOptions = `\r\n    <option value=\"\" disabled>Select a recipe</option>\r\n    <option value=\"259\">Actual Snow</option>\r\n    <option value=\"116\">Adaptive Control Unit</option>\r\n    <option value=\"14\">AI Expansion Server</option>\r\n    <option value=\"110\">AI Limiter</option>\r\n    <option value=\"95\">Alclad Aluminum Sheet</option>\r\n    <option value=\"245\">Alien DNA Capsule</option>\r\n    <option value=\"242\">Alien Power Matrix</option>\r\n    <option value=\"133\">Alternate: Adhered Iron Plate</option>\r\n    <option value=\"177\">Alternate: Alclad Casing</option>\r\n    <option value=\"182\">Alternate: Aluminum Beam</option>\r\n    <option value=\"183\">Alternate: Aluminum Rod</option>\r\n    <option value=\"105\">Alternate: Automated Speed Wiring</option>\r\n    <option value=\"189\">Alternate: Basic Iron Ingot</option>\r\n    <option value=\"49\">Alternate: Biocoal</option>\r\n    <option value=\"132\">Alternate: Bolted Frame</option>\r\n    <option value=\"208\">Alternate: Bolted Iron Plate</option>\r\n    <option value=\"204\">Alternate: Cast Screw</option>\r\n    <option value=\"227\">Alternate: Caterium Circuit Board</option>\r\n    <option value=\"226\">Alternate: Caterium Computer</option>\r\n    <option value=\"194\">Alternate: Caterium Wire</option>\r\n    <option value=\"48\">Alternate: Charcoal</option>\r\n    <option value=\"202\">Alternate: Cheap Silica</option>\r\n    <option value=\"176\">Alternate: Classic Battery</option>\r\n    <option value=\"62\">Alternate: Cloudy Diamonds</option>\r\n    <option value=\"131\">Alternate: Coated Cable</option>\r\n    <option value=\"130\">Alternate: Coated Iron Canister</option>\r\n    <option value=\"129\">Alternate: Coated Iron Plate</option>\r\n    <option value=\"128\">Alternate: Coke Steel Ingot</option>\r\n    <option value=\"50\">Alternate: Compacted Coal</option>\r\n    <option value=\"215\">Alternate: Compacted Steel Ingot</option>\r\n    <option value=\"175\">Alternate: Cooling Device</option>\r\n    <option value=\"127\">Alternate: Copper Alloy Ingot</option>\r\n    <option value=\"122\">Alternate: Copper Rotor</option>\r\n    <option value=\"225\">Alternate: Crystal Computer</option>\r\n    <option value=\"64\">Alternate: Dark Matter Crystallization</option>\r\n    <option value=\"63\">Alternate: Dark Matter Trap</option>\r\n    <option value=\"8\">Alternate: Dark-Ion Fuel</option>\r\n    <option value=\"174\">Alternate: Diluted Fuel</option>\r\n    <option value=\"121\">Alternate: Diluted Packaged Fuel</option>\r\n    <option value=\"185\">Alternate: Distilled Silica</option>\r\n    <option value=\"173\">Alternate: Electric Motor</option>\r\n    <option value=\"120\">Alternate: Electrode Aluminum Scrap</option>\r\n    <option value=\"119\">Alternate: Electrode Circuit Board</option>\r\n    <option value=\"222\">Alternate: Electromagnetic Connection Rod</option>\r\n    <option value=\"206\">Alternate: Encased Industrial Pipe</option>\r\n    <option value=\"172\">Alternate: Fertile Uranium</option>\r\n    <option value=\"221\">Alternate: Fine Black Powder</option>\r\n    <option value=\"224\">Alternate: Fine Concrete</option>\r\n    <option value=\"118\">Alternate: Flexible Framework</option>\r\n    <option value=\"187\">Alternate: Fused Quartz Crystal</option>\r\n    <option value=\"210\">Alternate: Fused Quickwire</option>\r\n    <option value=\"117\">Alternate: Fused Wire</option>\r\n    <option value=\"220\">Alternate: Heat Exchanger</option>\r\n    <option value=\"171\">Alternate: Heat-Fused Frame</option>\r\n    <option value=\"219\">Alternate: Heavy Encased Frame</option>\r\n    <option value=\"112\">Alternate: Heavy Flexible Frame</option>\r\n    <option value=\"111\">Alternate: Heavy Oil Residue</option>\r\n    <option value=\"196\">Alternate: Infused Uranium Cell</option>\r\n    <option value=\"170\">Alternate: Instant Plutonium Cell</option>\r\n    <option value=\"169\">Alternate: Instant Scrap</option>\r\n    <option value=\"230\">Alternate: Insulated Cable</option>\r\n    <option value=\"223\">Alternate: Insulated Crystal Oscillator</option>\r\n    <option value=\"217\">Alternate: Iron Alloy Ingot</option>\r\n    <option value=\"179\">Alternate: Iron Pipe</option>\r\n    <option value=\"195\">Alternate: Iron Wire</option>\r\n    <option value=\"193\">Alternate: Leached Caterium Ingot</option>\r\n    <option value=\"191\">Alternate: Leached Copper Ingot</option>\r\n    <option value=\"188\">Alternate: Leached Iron ingot</option>\r\n    <option value=\"181\">Alternate: Molded Beam</option>\r\n    <option value=\"178\">Alternate: Molded Steel Pipe</option>\r\n    <option value=\"4\">Alternate: Nitro Rocket Fuel</option>\r\n    <option value=\"163\">Alternate: OC Supercomputer</option>\r\n    <option value=\"61\">Alternate: Oil-Based Diamonds</option>\r\n    <option value=\"60\">Alternate: Petroleum Diamonds</option>\r\n    <option value=\"59\">Alternate: Pink Diamonds</option>\r\n    <option value=\"184\">Alternate: Plastic AI Limiter</option>\r\n    <option value=\"104\">Alternate: Plastic Smart Plating</option>\r\n    <option value=\"162\">Alternate: Plutonium Fuel Unit</option>\r\n    <option value=\"248\">Alternate: Polyester Fabric</option>\r\n    <option value=\"103\">Alternate: Polymer Resin</option>\r\n    <option value=\"93\">Alternate: Pure Aluminum Ingot</option>\r\n    <option value=\"92\">Alternate: Pure Caterium Ingot</option>\r\n    <option value=\"91\">Alternate: Pure Copper Ingot</option>\r\n    <option value=\"90\">Alternate: Pure Iron Ingot</option>\r\n    <option value=\"88\">Alternate: Pure Quartz Crystal</option>\r\n    <option value=\"186\">Alternate: Quartz Purification</option>\r\n    <option value=\"229\">Alternate: Quickwire Cable</option>\r\n    <option value=\"201\">Alternate: Quickwire Stator</option>\r\n    <option value=\"209\">Alternate: Radio Connection Unit</option>\r\n    <option value=\"161\">Alternate: Radio Control System</option>\r\n    <option value=\"211\">Alternate: Recycled Plastic</option>\r\n    <option value=\"87\">Alternate: Recycled Rubber</option>\r\n    <option value=\"213\">Alternate: Rigor Motor</option>\r\n    <option value=\"86\">Alternate: Rubber Concrete</option>\r\n    <option value=\"228\">Alternate: Silicon Circuit Board</option>\r\n    <option value=\"218\">Alternate: Silicon High-Speed Connector</option>\r\n    <option value=\"160\">Alternate: Sloppy Alumina</option>\r\n    <option value=\"216\">Alternate: Solid Steel Ingot</option>\r\n    <option value=\"85\">Alternate: Steamed Copper Sheet</option>\r\n    <option value=\"72\">Alternate: Steel Canister</option>\r\n    <option value=\"180\">Alternate: Steel Cast Plate</option>\r\n    <option value=\"67\">Alternate: Steel Rod</option>\r\n    <option value=\"205\">Alternate: Steel Rotor</option>\r\n    <option value=\"203\">Alternate: Steel Screw</option>\r\n    <option value=\"214\">Alternate: Steeled Frame</option>\r\n    <option value=\"207\">Alternate: Stitched Iron Plate</option>\r\n    <option value=\"156\">Alternate: Super-State Computer</option>\r\n    <option value=\"192\">Alternate: Tempered Caterium Ingot</option>\r\n    <option value=\"190\">Alternate: Tempered Copper Ingot</option>\r\n    <option value=\"145\">Alternate: Turbo Blend Fuel</option>\r\n    <option value=\"18\">Alternate: Turbo Diamonds</option>\r\n    <option value=\"198\">Alternate: Turbo Electric Motor</option>\r\n    <option value=\"66\">Alternate: Turbo Heavy Fuel</option>\r\n    <option value=\"134\">Alternate: Turbo Pressure Motor</option>\r\n    <option value=\"212\">Alternate: Uranium Fuel Unit</option>\r\n    <option value=\"65\">Alternate: Wet Concrete</option>\r\n    <option value=\"96\">Alumina Solution</option>\r\n    <option value=\"94\">Aluminum Casing</option>\r\n    <option value=\"99\">Aluminum Ingot</option>\r\n    <option value=\"97\">Aluminum Scrap</option>\r\n    <option value=\"153\">Assembly Director System</option>\r\n    <option value=\"109\">Automated Wiring</option>\r\n    <option value=\"234\">Ballistic Warp Drive</option>\r\n    <option value=\"148\">Battery</option>\r\n    <option value=\"28\">Bauxite (Caterium)</option>\r\n    <option value=\"29\">Bauxite (Copper)</option>\r\n    <option value=\"25\">Biochemical Sculptor</option>\r\n    <option value=\"240\">Biomass (Mycelia)</option>\r\n    <option value=\"246\">Biomass (Alien Protein)</option>\r\n    <option value=\"263\">Biomass (Leaves)</option>\r\n    <option value=\"264\">Biomass (Wood)</option>\r\n    <option value=\"241\">Black Powder</option>\r\n    <option value=\"256\">Blue FICSMAS Ornament</option>\r\n    <option value=\"268\">Cable</option>\r\n    <option value=\"262\">Candy Cane</option>\r\n    <option value=\"197\">Caterium Ingot</option>\r\n    <option value=\"30\">Caterium Ore (Copper)</option>\r\n    <option value=\"31\">Caterium Ore (Quartz)</option>\r\n    <option value=\"51\">Circuit Board</option>\r\n    <option value=\"32\">Coal (Iron)</option>\r\n    <option value=\"33\">Coal (Limestone)</option>\r\n    <option value=\"113\">Computer</option>\r\n    <option value=\"266\">Concrete</option>\r\n    <option value=\"147\">Cooling System</option>\r\n    <option value=\"257\">Copper FICSMAS Ornament</option>\r\n    <option value=\"270\">Copper Ingot</option>\r\n    <option value=\"34\">Copper Ore (Quartz)</option>\r\n    <option value=\"35\">Copper Ore (Sulfur)</option>\r\n    <option value=\"139\">Copper Powder</option>\r\n    <option value=\"125\">Copper Sheet</option>\r\n    <option value=\"101\">Crystal Oscillator</option>\r\n    <option value=\"11\">Dark Matter Crystal</option>\r\n    <option value=\"9\">Dark Matter Residue</option>\r\n    <option value=\"23\">Diamonds</option>\r\n    <option value=\"157\">Electromagnetic Control Rod</option>\r\n    <option value=\"73\">Empty Canister</option>\r\n    <option value=\"166\">Empty Fluid Tank</option>\r\n    <option value=\"106\">Encased Industrial Beam</option>\r\n    <option value=\"135\">Encased Plutonium Cell</option>\r\n    <option value=\"146\">Encased Uranium Cell</option>\r\n    <option value=\"10\">Excited Photonic Matter</option>\r\n    <option value=\"249\">Fabric</option>\r\n    <option value=\"21\">Ficsite Ingot (Iron)</option>\r\n    <option value=\"26\">Ficsite Ingot (Aluminum)</option>\r\n    <option value=\"27\">Ficsite Ingot (Caterium)</option>\r\n    <option value=\"20\">Ficsite Trigon</option>\r\n    <option value=\"261\">FICSMAS Bow</option>\r\n    <option value=\"253\">FICSMAS Decoration</option>\r\n    <option value=\"254\">FICSMAS Ornament Bundle</option>\r\n    <option value=\"260\">FICSMAS Tree Branch</option>\r\n    <option value=\"252\">FICSMAS Wonder Star</option>\r\n    <option value=\"231\">Ficsonium</option>\r\n    <option value=\"232\">Ficsonium Fuel Rod</option>\r\n    <option value=\"52\">Fuel</option>\r\n    <option value=\"165\">Fused Modular Frame</option>\r\n    <option value=\"247\">Gas Filter</option>\r\n    <option value=\"244\">Hatcher Protein</option>\r\n    <option value=\"164\">Heat Sink</option>\r\n    <option value=\"114\">Heavy Modular Frame</option>\r\n    <option value=\"154\">High-Speed Connector</option>\r\n    <option value=\"238\">Hog Protein</option>\r\n    <option value=\"235\">Iodine-Infused Filter</option>\r\n    <option value=\"15\">Ionized Fuel</option>\r\n    <option value=\"258\">Iron FICSMAS Ornament</option>\r\n    <option value=\"3\">Iron Ingot</option>\r\n    <option value=\"36\">Iron Ore (Limestone)</option>\r\n    <option value=\"1\">Iron Plate</option>\r\n    <option value=\"2\">Iron Rod</option>\r\n    <option value=\"37\">Limestone (Sulfur)</option>\r\n    <option value=\"75\">Liquid Biofuel</option>\r\n    <option value=\"159\">Magnetic Field Generator</option>\r\n    <option value=\"115\">Modular Engine</option>\r\n    <option value=\"123\">Modular Frame</option>\r\n    <option value=\"107\">Motor</option>\r\n    <option value=\"13\">Neural-Quantum Processor</option>\r\n    <option value=\"137\">Nitric Acid</option>\r\n    <option value=\"38\">Nitrogen Gas (Bauxite)</option>\r\n    <option value=\"39\">Nitrogen Gas (Caterium)</option>\r\n    <option value=\"138\">Non-Fissile Uranium</option>\r\n    <option value=\"143\">Nuclear Pasta</option>\r\n    <option value=\"98\">Packaged Alumina Solution</option>\r\n    <option value=\"74\">Packaged Fuel</option>\r\n    <option value=\"78\">Packaged Heavy Oil Residue</option>\r\n    <option value=\"16\">Packaged Ionized Fuel</option>\r\n    <option value=\"76\">Packaged Liquid Biofuel</option>\r\n    <option value=\"142\">Packaged Nitric Acid</option>\r\n    <option value=\"167\">Packaged Nitrogen Gas</option>\r\n    <option value=\"77\">Packaged Oil</option>\r\n    <option value=\"6\">Packaged Rocket Fuel</option>\r\n    <option value=\"152\">Packaged Sulfuric Acid</option>\r\n    <option value=\"46\">Packaged Turbofuel</option>\r\n    <option value=\"79\">Packaged Water</option>\r\n    <option value=\"53\">Petroleum Coke</option>\r\n    <option value=\"54\">Plastic</option>\r\n    <option value=\"141\">Plutonium Fuel Rod</option>\r\n    <option value=\"140\">Plutonium Pellet</option>\r\n    <option value=\"136\">Pressure Conversion Cube</option>\r\n    <option value=\"89\">Quartz Crystal</option>\r\n    <option value=\"236\">Quickwire</option>\r\n    <option value=\"150\">Radio Control Unit</option>\r\n    <option value=\"40\">Raw Quartz (Bauxite)</option>\r\n    <option value=\"41\">Raw Quartz (Coal)</option>\r\n    <option value=\"24\">Reanimated SAM</option>\r\n    <option value=\"255\">Red FICSMAS Ornament</option>\r\n    <option value=\"265\">Reinforced Iron Plate</option>\r\n    <option value=\"56\">Residual Fuel</option>\r\n    <option value=\"57\">Residual Plastic</option>\r\n    <option value=\"58\">Residual Rubber</option>\r\n    <option value=\"5\">Rocket Fuel</option>\r\n    <option value=\"124\">Rotor</option>\r\n    <option value=\"55\">Rubber</option>\r\n    <option value=\"19\">SAM Fluctuator</option>\r\n    <option value=\"267\">Screw</option>\r\n    <option value=\"100\">Silica</option>\r\n    <option value=\"233\">Singularity Cell</option>\r\n    <option value=\"126\">Smart Plating</option>\r\n    <option value=\"251\">Smokeless Powder</option>\r\n    <option value=\"237\">Solid Biofuel</option>\r\n    <option value=\"239\">Spitter Protein</option>\r\n    <option value=\"108\">Stator</option>\r\n    <option value=\"68\">Steel Beam</option>\r\n    <option value=\"70\">Steel Ingot</option>\r\n    <option value=\"69\">Steel Pipe</option>\r\n    <option value=\"243\">Stinger Protein</option>\r\n    <option value=\"42\">Sulfur (Coal)</option>\r\n    <option value=\"43\">Sulfur (Iron)</option>\r\n    <option value=\"151\">Sulfuric Acid</option>\r\n    <option value=\"149\">Supercomputer</option>\r\n    <option value=\"12\">Superposition Oscillator</option>\r\n    <option value=\"250\">Synthetic Power Shard</option>\r\n    <option value=\"200\">Thermal Propulsion Rocket</option>\r\n    <option value=\"22\">Time Crystal</option>\r\n    <option value=\"199\">Turbo Motor</option>\r\n    <option value=\"45\">Turbofuel</option>\r\n    <option value=\"102\">Unpackage Alumina Solution</option>\r\n    <option value=\"81\">Unpackage Fuel</option>\r\n    <option value=\"83\">Unpackage Heavy Oil Residue</option>\r\n    <option value=\"17\">Unpackage Ionized Fuel</option>\r\n    <option value=\"80\">Unpackage Liquid Biofuel</option>\r\n    <option value=\"144\">Unpackage Nitric Acid</option>\r\n    <option value=\"168\">Unpackage Nitrogen Gas</option>\r\n    <option value=\"82\">Unpackage Oil</option>\r\n    <option value=\"7\">Unpackage Rocket Fuel</option>\r\n    <option value=\"155\">Unpackage Sulfuric Acid</option>\r\n    <option value=\"47\">Unpackage Turbofuel</option>\r\n    <option value=\"84\">Unpackage Water</option>\r\n    <option value=\"158\">Uranium Fuel Rod</option>\r\n    <option value=\"44\">Uranium Ore (Bauxite)</option>\r\n    <option value=\"71\">Versatile Framework</option>\r\n    <option value=\"269\">Wire</option>\r\n`;\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/RecipeOptions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/Visualization/Connection.ts":
/*!***************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/Visualization/Connection.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Connection: () => (/* binding */ Connection)\n/* harmony export */ });\n/**\n * Class that represents a connection between two nodes.\n * @class\n *\n * @property {number} id - The id of the connection.\n * @property {number} sourceId - The id of the source node.\n * @property {number} targetId - The id of the target node.\n * @property {number} quantity - The quantity of the connection.\n * @property {string} product - The product of the connection.\n *\n * @example\n * let connection = new Connection(1, 2, 3, 100, 'Iron');\n * console.log(connection);\n * // Output: Connection { id: 1, sourceId: 2, targetId: 3, quantity: 100, product: 'Iron' }\n *\n * @returns {Connection} A new Connection object\n *\n * @constructor\n * @param {number} id - The id of the connection.\n * @param {number} sourceId - The id of the source node.\n * @param {number} targetId - The id of the target node.\n * @param {number} quantity - The quantity of the connection.\n */\nclass Connection {\n    id;\n    sourceId;\n    targetId;\n    quantity;\n    product;\n    constructor(id, sourceId, targetId, quantity, product) {\n        this.id = id;\n        this.sourceId = sourceId;\n        this.targetId = targetId;\n        this.quantity = quantity;\n        this.product = product;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/Visualization/Connection.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/Visualization/ExportNodes.ts":
/*!****************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/Visualization/ExportNodes.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExportNodes: () => (/* binding */ ExportNodes)\n/* harmony export */ });\n/**\n * ExportNodes class to create export nodes\n * @class\n * @classdesc ExportNodes class to create export nodes\n * @param {number} id - The id of the export node\n * @param {string} product - The product of the export node\n * @param {number} quantity - The quantity of the export node\n *\n * @example\n * let exportNode = new ExportNodes(1, 'Iron', 100);\n * console.log(exportNode);\n * // Output: ExportNodes { id: 1, product: 'Iron', quantity: 100 }\n *\n * @returns {ExportNodes} A new ExportNodes object\n *\n * @constructor\n * @param {number} id - The id of the export node\n * @param {string} product - The product of the export node\n * @param {number} quantity - The quantity of the export node\n */\nclass ExportNodes {\n    id;\n    product;\n    quantity;\n    X;\n    Y;\n    constructor(id, product, quantity) {\n        this.id = id;\n        this.product = product;\n        this.quantity = quantity;\n        this.X = 0;\n        this.Y = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/Visualization/ExportNodes.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/Visualization/ImportNodes.ts":
/*!****************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/Visualization/ImportNodes.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImportNodes: () => (/* binding */ ImportNodes)\n/* harmony export */ });\n/**\n * Class that represents the data of the import nodes.\n * @class\n * @classdesc Class that represents the data of the import nodes.\n *\n * @param {number} id - The id of the import node.\n * @param {string} product - The product of the import node.\n * @param {number} quantity - The quantity of the import node.\n *\n * @example\n * let importNode = new ImportNodes(1, 'Iron', 100);\n * console.log(importNode);\n * // Output: ImportNodes { id: 1, product: 'Iron', quantity: 100 }\n *\n * @returns {ImportNodes} A new ImportNodes object\n *\n * @constructor\n * @param {number} id - The id of the import node.\n * @param {string} product - The product of the import node.\n * @param {number} quantity - The quantity of the import node.\n */\nclass ImportNodes {\n    id;\n    product;\n    quantity;\n    X;\n    Y;\n    constructor(id, product, quantity) {\n        this.id = id;\n        this.product = product;\n        this.quantity = quantity;\n        this.X = 0;\n        this.Y = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/Visualization/ImportNodes.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/Visualization/ProductionNodes.ts":
/*!********************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/Visualization/ProductionNodes.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProductionNodes: () => (/* binding */ ProductionNodes)\n/* harmony export */ });\n/**\n * Class that holds the data for the ProductionNodes table.\n * @class\n *\n * @property {number} id - The id of the production node.\n * @property {string} product - The product of the production node.\n * @property {number} quantity - The quantity of the production node.\n * @property {string} building - The building of the production node.\n * @property {number} buildingId - The building id of the production node.\n *\n * @example\n * let productionNode = new ProductionNodes(1, 'Iron', 100, 'Smelter', 1);\n * console.log(productionNode);\n * // Output: ProductionNodes { id: 1, product: 'Iron', quantity: 100, building: 'Smelter', buildingId: 1 }\n *\n * @returns {ProductionNodes} A new ProductionNodes object\n *\n * @constructor\n * @param {number} id - The id of the production node.\n * @param {string} product - The product of the production node.\n * @param {number} quantity - The quantity of the production node.\n * @param {string} building - The building of the production node.\n * @param {number} buildingId - The building id of the production node.\n */\nclass ProductionNodes {\n    id;\n    product;\n    quantity;\n    building;\n    buildingId;\n    buildingAmount;\n    checklist;\n    X;\n    Y;\n    constructor(id, product, quantity, building, buildingId, buildingAmount, checklist) {\n        this.id = id;\n        this.product = product;\n        this.quantity = quantity;\n        this.building = building;\n        this.buildingId = buildingId;\n        this.buildingAmount = buildingAmount;\n        this.checklist = checklist;\n        this.X = 0;\n        this.Y = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/Visualization/ProductionNodes.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/Ajax.ts":
/*!************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/Ajax.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ajax: () => (/* binding */ Ajax)\n/* harmony export */ });\nclass Ajax {\n    static gameSaveId = Number($('#gameSaveId').val()) ?? 0;\n    static url = new URL(window.location.href);\n    static productionLineId = parseInt(this.url.searchParams.get('id'));\n    /**\n     * Get a recipe by its ID.\n     *\n     * @param recipe_id - The ID of the recipe to get.\n     */\n    static getRecipe(recipe_id) {\n        return new Promise(function (resolve, reject) {\n            $.ajax({\n                type: 'GET',\n                url: 'getRecipe',\n                data: {\n                    id: recipe_id\n                },\n                headers: { 'X-CSRF-Token': Ajax._getCsrfToken() },\n                dataType: 'json',\n                success: function (response) {\n                    try {\n                        resolve(response);\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                },\n                error: function (xhr, status, error) {\n                    reject(error);\n                }\n            });\n        });\n    }\n    /**\n     * Get a building by its ID.\n     *\n     * @param building_id - The ID of the building to get.\n     */\n    static getBuilding(building_id) {\n        return new Promise(function (resolve, reject) {\n            $.ajax({\n                type: 'GET',\n                url: 'getBuilding',\n                data: {\n                    id: building_id\n                },\n                headers: { 'X-CSRF-Token': Ajax._getCsrfToken() },\n                dataType: 'json',\n                success: function (response) {\n                    try {\n                        resolve(response);\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                },\n                error: function (xhr, status, error) {\n                    reject(error);\n                }\n            });\n        });\n    }\n    /**\n     * Save the production line data.\n     *\n     * @param data - The data to save.\n     * @param id - The ID of the production line.\n     * @returns The response from the server.\n     */\n    static async saveData(data, id) {\n        return new Promise((resolve, reject) => {\n            $.ajax({\n                type: 'POST',\n                url: 'saveProductionLine',\n                data: {\n                    gameSaveId: this.gameSaveId,\n                    data: JSON.stringify(data),\n                    id: id\n                },\n                headers: { 'X-CSRF-Token': Ajax._getCsrfToken() },\n                success: function (response) {\n                    resolve(JSON.parse(response));\n                },\n                error: function (xhr, status, error) {\n                    reject(error);\n                },\n            });\n        });\n    }\n    /**\n     * Get the production line data.\n     *\n     * @returns The response from the server.\n     * @param productionLineId\n     * @param autoImportExport\n     * @param autoPowerMachine\n     * @param autoSave\n     */\n    static saveSettings(productionLineId, autoImportExport, autoPowerMachine, autoSave) {\n        $.ajax({\n            type: 'POST',\n            url: 'updateProductionLineSettings',\n            headers: { 'X-CSRF-Token': Ajax._getCsrfToken() },\n            data: {\n                gameSaveId: this.gameSaveId,\n                productionLineId: productionLineId,\n                autoImportExport: autoImportExport,\n                autoPowerMachine: autoPowerMachine,\n                autoSave: autoSave,\n            },\n        });\n    }\n    static _getCsrfToken() {\n        const meta = $('meta[name=\"csrf-token\"]');\n        if (meta.length === 0 || meta.attr('content') === undefined) {\n            throw new Error('CSRF token not found');\n        }\n        return meta.attr('content');\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/Ajax.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts":
/*!**********************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HtmlGeneration: () => (/* binding */ HtmlGeneration)\n/* harmony export */ });\n/* harmony import */ var _Data_ItemOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Data/ItemOptions */ \"./public/TypeScript/Tables/Classes/Data/ItemOptions.ts\");\n/* harmony import */ var _Data_RecipeOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Data/RecipeOptions */ \"./public/TypeScript/Tables/Classes/Data/RecipeOptions.ts\");\n\n\nclass HtmlGeneration {\n    /**\n     * Generates the HTML for the power table.\n     * @param powerRows - The array of power table rows to generate HTML for.\n     * @param buildingOptions - The HTML string for the building options.\n     * @param totalConsumption - The total consumption of the power table.\n     *\n     * @returns The generated HTML string for the power table.\n     */\n    static generatePowerTable(powerRows, buildingOptions, totalConsumption) {\n        const rowsHtml = powerRows.map((row, index) => {\n            return `\r\n      <tr>\r\n        <td class=\"m-0 p-0 w-50\">\r\n          <select class=\"form-control rounded-0\" name=\"power_building_id[]\" min=\"0\">\r\n            ${buildingOptions.replace(`<option value=\"${row.buildingId}\">`, `<option value=\"${row.buildingId}\" selected>`)}\r\n          </select>\r\n        </td>\r\n        <td class=\"m-0 p-0 w-25\">\r\n          <input type=\"number\" value=\"${row.quantity}\" class=\"form-control rounded-0\" name=\"power_amount[]\" min=\"0\" step=\"any\" data-index=\"${index}\" onchange=\"updateConsumption()\">\r\n        </td>\r\n        <td class=\"m-0 p-0 w-25\">\r\n          <input type=\"number\" value=\"${row.clockSpeed}\" class=\"form-control rounded-0\" name=\"power_clock_speed[]\" min=\"1\" max=\"250\" step=\"any\" data-index=\"${index}\" onchange=\"updateConsumption()\">\r\n        </td>\r\n        <td class=\"m-0 p-0 w-25\">\r\n          <input type=\"number\" value=\"${row.Consumption}\" class=\"form-control rounded-0\" disabled name=\"power_Consumption[]\" min=\"0\" step=\"any\">\r\n        </td>\r\n        <td class=\"m-0 p-0 w-25\">\r\n          <input type=\"hidden\" value=\"${row.userRow ? 1 : 0}\" class=\"form-control rounded-0\" readonly name=\"user[]\" min=\"0\">\r\n        </td>\r\n      </tr>\r\n    `;\n        }).join('');\n        // Add an empty row for new entries\n        const emptyRowHtml = `\r\n      <tr>\r\n        <td class=\"m-0 p-0 w-50\">\r\n          <select class=\"form-control rounded-0\" name=\"power_building_id[]\" min=\"0\">\r\n            ${buildingOptions.replace(/<option /, '<option selected ')} <!-- Selects the first option -->\r\n          </select>\r\n        </td>\r\n        <td class=\"m-0 p-0 w-25\">\r\n          <input type=\"number\" value=\"0\" class=\"form-control rounded-0\" name=\"power_amount[]\" min=\"0\" step=\"any\" onchange=\"updateConsumption()\">\r\n        </td>\r\n        <td class=\"m-0 p-0 w-25\">\r\n          <input type=\"number\" value=\"100\" class=\"form-control rounded-0\" name=\"power_clock_speed[]\" min=\"1\" max=\"250\" step=\"any\" onchange=\"updateConsumption()\">\r\n        </td>\r\n        <td class=\"m-0 p-0 w-25\">\r\n          <input type=\"number\" value=\"0\" class=\"form-control rounded-0\" readonly name=\"power_Consumption[]\" min=\"0\" step=\"any\">\r\n        </td>\r\n        <td class=\"m-0 p-0 w-25\">\r\n          <input type=\"hidden\" value=\"1\" class=\"form-control rounded-0\" readonly name=\"user[]\" min=\"0\">\r\n        </td>\r\n      </tr>\r\n    `;\n        // Total row\n        const totalRowHtml = `\r\n      <tr>\r\n        <td colspan=\"1\" class=\"table-dark\">\r\n          Total:\r\n        </td>\r\n        <td colspan=\"2\"></td>\r\n        <td class=\"w-25 m-0 p-0\">\r\n          <input type=\"number\" name=\"total_consumption\" readonly class=\"form-control rounded-0\" id=\"totalConsumption\" value=\"${totalConsumption}\">\r\n        </td>\r\n      </tr>\r\n    `;\n        return rowsHtml + emptyRowHtml + totalRowHtml;\n    }\n    /**\n     * Generates the HTML for the imports table rows.\n     *\n     * @param importsTableRows - The array of imports table rows to generate HTML for.\n     * @returns The generated HTML string for the imports table rows.\n     */\n    static generateImportsTableRows(importsTableRows) {\n        const rowsHTML = importsTableRows.map(row => {\n            const formattedQuantity = Number(row.quantity) % 1 === 0 ?\n                row.quantity.toFixed(0) :\n                row.quantity.toFixed(5);\n            return `\r\n            <tr>\r\n                <td class=\"m-0 p-0 w-75\">\r\n                    <select name=\"imports_item_id[]\" class=\"form-control rounded-0\">\r\n                        ${_Data_ItemOptions__WEBPACK_IMPORTED_MODULE_0__.ItemOptions.replace(`value=\"${row.itemId}\"`, `value=\"${row.itemId}\" selected`)}\r\n                    </select>\r\n                </td>\r\n                <td class=\"m-0 p-0 w-25\">\r\n                    <input min=\"0\" type=\"number\" name=\"imports_ammount[]\" class=\"form-control rounded-0\" value=\"${formattedQuantity}\" readonly>\r\n                </td>\r\n            </tr>\r\n        `;\n        }).join('');\n        const emptyRowHTML = `\r\n        <tr>\r\n            <td class=\"m-0 p-0 w-75\">\r\n                <select name=\"imports_item_id[]\" class=\"form-control rounded-0\">\r\n                    ${_Data_ItemOptions__WEBPACK_IMPORTED_MODULE_0__.ItemOptions.replace(/<option /, '<option selected ')} <!-- Selects the first option -->\r\n                </select>\r\n            </td>\r\n            <td class=\"m-0 p-0 w-25\">\r\n                <input min=\"0\" type=\"number\" name=\"imports_ammount[]\" class=\"form-control rounded-0\">\r\n            </td>\r\n        </tr>`;\n        return rowsHTML + emptyRowHTML; // Combine the existing rows with the empty row\n    }\n    /**\n     * Generates the HTML for the production table rows.\n     *\n     * @param productionTableRows - The array of production table rows to generate HTML for.\n     * @returns The generated HTML string for the production table rows.\n     */\n    static generateProductionTableRows(productionTableRows) {\n        const rowsHTML = productionTableRows.map(row => {\n            let style = '';\n            let doubleExport = '';\n            let rowSpan = '';\n            if (row.doubleExport) {\n                style = 'style=\"height: 78px\"';\n                rowSpan = 'rowspan=\"2\"';\n                doubleExport = `\r\n            <tr class=\"extra-output\">\r\n                <td class=\"m-0 p-0\">\r\n                    <input type=\"text\" readonly class=\"form-control rounded-0 product-name\" value=\"${row.extraCells?.Product}\">\r\n                </td>\r\n                <td class=\"m-0 p-0\">\r\n                    <input min=\"0\" type=\"number\" step=\"any\" name=\"production_usage2[]\" value=\"${row.extraCells?.Usage}\" required readonly class=\"form-control rounded-0 usage-amount\">\r\n                </td>\r\n                <td class=\"m-0 p-0\">\r\n                    <input min=\"0\" type=\"number\" step=\"any\" name=\"production_export2[]\" value=\"${row.extraCells?.Quantity}\" required readonly class=\"form-control rounded-0 export-amount\">\r\n                </td>\r\n            </tr>\r\n            `;\n            }\n            return ` <tr>\r\n          <td class=\"hidden\">\r\n            <input type=\"hidden\" name=\"production_id[]\" value=\"${row.row_id}\">\r\n          </td>\r\n          <td class=\"m-0 p-0\" ${rowSpan}>\r\n            <select name=\"production_recipe_id[]\" class=\"form-control rounded-0 item-recipe-id recipe\" ${style}>\r\n              ${_Data_RecipeOptions__WEBPACK_IMPORTED_MODULE_1__.RecipeOptions.replace(`value=\"${row.recipeId}\"`, `value=\"${row.recipeId}\" selected`)}\r\n            </select>\r\n          </td>\r\n          <td class=\"m-0 p-0\" ${rowSpan}>\r\n            <input min=\"0\" type=\"number\" step=\"any\" name=\"production_quantity[]\" value=\"${row.quantity}\" required class=\"form-control rounded-0 production-quantity\" ${style}>\r\n          </td>\r\n          <td class=\"m-0 p-0\">\r\n            <input type=\"text\" readonly class=\"form-control rounded-0 product-name\" value=\"${row.product}\">\r\n          </td>\r\n          <td class=\"m-0 p-0\">\r\n            <input min=\"0\" type=\"number\" step=\"any\" name=\"production_usage[]\" value=\"${row.Usage}\" required readonly class=\"form-control rounded-0 usage-amount\">\r\n          </td>\r\n          <td class=\"m-0 p-0\">\r\n            <input min=\"0\" type=\"number\" step=\"any\" name=\"production_export[]\" value=\"${row.exportPerMin}\" required readonly class=\"form-control rounded-0 export-amount\">\r\n          </td>\r\n        </tr>\r\n        ${doubleExport}\r\n        `;\n        }).join('');\n        const emptyRowHTML = `\r\n        <tr>\r\n            <td class=\"m-0 p-0\">\r\n                <select name=\"production_recipe_id[]\" class=\"form-control rounded-0 item-recipe-id recipe\">\r\n                    ${_Data_RecipeOptions__WEBPACK_IMPORTED_MODULE_1__.RecipeOptions.replace(/<option /, '<option selected ')}\r\n                </select>\r\n            </td>\r\n            <td class=\"m-0 p-0\">\r\n                <input min=\"0\" type=\"number\" value=\"0\" step=\"any\" name=\"production_quantity[]\" required class=\"form-control rounded-0 production-quantity\">\r\n            </td>\r\n            <td class=\"m-0 p-0\">\r\n                <input type=\"text\" readonly class=\"form-control rounded-0 product-name\">\r\n            </td>\r\n            <td class=\"m-0 p-0\">\r\n                <input min=\"0\" type=\"number\" value=\"0\" step=\"any\" name=\"production_usage[]\" required readonly class=\"form-control rounded-0 usage-amount\">\r\n            </td>\r\n            <td class=\"m-0 p-0\">\r\n                <input min=\"0\" type=\"number\" value=\"0\" step=\"any\" name=\"production_export[]\" required readonly class=\"form-control rounded-0 export-amount\">\r\n            </td>\r\n        </tr>\r\n    `;\n        return rowsHTML + emptyRowHTML; // Combine the existing rows with the empty row\n    }\n    static createCard(index, recipeName, productionAmount, buildingAmount, beenBuild, beenTested, building) {\n        return `\r\n        <div class=\"card mb-2\" id=\"check-${index}\">\r\n            <div class=\"card-body p-3\">\r\n                <h5 class=\"card-title recipeName\">${recipeName}</h5>\r\n                <p class=\"card-text\"><span class=\"productionAmount\">${productionAmount}</span> per min - <span class=\"buildingAmount\">${+buildingAmount.toFixed(5)}</span> <span class=\"buildingName\">${building}</span></p>\r\n                <div style=\"display: flex; justify-content: space-between;\">\r\n                    <div>\r\n                        <input type=\"checkbox\" data-toggle=\"toggle\" data-onstyle=\"success\" data-offstyle=\"dark\" for=\"build\" class=\"beenBuild\"\r\n                               data-onlabel=\"<i class='fa-solid fa-check'></i>\" data-offlabel=\"<i class='fa-solid fa-times'></i>\"\r\n                               data-size=\"sm\" data-style=\"ios\" data-theme=\"dark\" ${beenBuild ? \"checked\" : \"\"}/>\r\n                        <label for=\"build\">Build</label>\r\n                    </div>\r\n                    <div>\r\n                        <!--                        same checkbox as above-->\r\n                        <input type=\"checkbox\" data-toggle=\"toggle\" data-onstyle=\"success\" data-offstyle=\"dark\" for=\"tested\" class=\"beenTested\"\r\n                               data-onlabel=\"<i class='fa-solid fa-check'></i>\" data-offlabel=\"<i class='fa-solid fa-times'></i>\"\r\n                               data-size=\"sm\" data-style=\"ios\" data-theme=\"dark\" ${beenTested ? \"checked\" : \"\"}/>\r\n                        <label for=\"tested\">Tested</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        `;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/ImportExport.ts":
/*!********************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/ImportExport.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImportExport: () => (/* binding */ ImportExport)\n/* harmony export */ });\n/* harmony import */ var _SaveFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SaveFunctions */ \"./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/v4.js\");\n\n\nclass ImportExport {\n    static async importData(tableHandler) {\n        if (!this.checkIfFileIsSelected() || !this.checkIfFileIsJson()) {\n            return;\n        }\n        const jsonFile = $('#importFile').prop('files')[0];\n        const reader = new FileReader();\n        reader.readAsText(jsonFile);\n        reader.onload = (event) => {\n            const jsonData = JSON.parse(event.target?.result);\n            if (!jsonData.productionTable || !jsonData.powerTable || !jsonData.importTable) {\n                this.showErrorMessage('The selected file does not contain the required data.');\n                return;\n            }\n            tableHandler.saveData(jsonData.productionTable, jsonData.powerTable, jsonData.importTable, jsonData.checklist || []);\n            this.showSuccessMessage('Data successfully imported.');\n            $('#importFile').val('');\n        };\n        reader.onerror = () => {\n            this.showErrorMessage('An error occurred while reading the file. Please try again.');\n        };\n    }\n    static exportData(tableHandler) {\n        const productionTableData = tableHandler.productionTableRows;\n        const importTableData = tableHandler.importsTableRows;\n        const powerTableData = tableHandler.powerTableRows;\n        const checklistData = tableHandler.checklist?.getChecklist() || [];\n        // set the id's to uuid's\n        productionTableData.forEach((row) => {\n            // find matching checklistdata\n            const checklist = checklistData.find((check) => check.productionRow.row_id === row.row_id);\n            row.row_id = (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n            if (checklist) {\n                checklist.productionRow = row; // Update the productionRow reference\n            }\n        });\n        const dataToExport = {\n            productionTable: _SaveFunctions__WEBPACK_IMPORTED_MODULE_0__.SaveFunctions.cloneWithoutCircularReferences(productionTableData),\n            powerTable: powerTableData,\n            importTable: importTableData,\n            checklist: _SaveFunctions__WEBPACK_IMPORTED_MODULE_0__.SaveFunctions.cloneWithoutCircularReferences(checklistData)\n        };\n        const bytes = new TextEncoder().encode(JSON.stringify(dataToExport));\n        const blob = new Blob([bytes], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = this.generateFileName();\n        a.click();\n        URL.revokeObjectURL(url);\n        this.showSuccessMessage('Data successfully exported.');\n    }\n    static checkIfFileIsSelected() {\n        const fileInput = document.getElementById('importFile');\n        if (!fileInput.files?.length) {\n            // Add Bootstrap 'is-invalid' class\n            fileInput.classList.add('is-invalid');\n            // Show the validation feedback message\n            const feedback = fileInput.nextElementSibling;\n            if (feedback) {\n                feedback.classList.add('d-block');\n            }\n            return false;\n        }\n        // If a file is selected, ensure 'is-invalid' class is removed\n        fileInput.classList.remove('is-invalid');\n        const feedback = fileInput.nextElementSibling;\n        if (feedback) {\n            feedback.classList.remove('d-block');\n        }\n        return true;\n    }\n    static checkIfFileIsJson() {\n        const fileInput = document.getElementById('importFile');\n        const file = fileInput.files?.[0];\n        // Check if the file type is JSON\n        if (file && file.type !== 'application/json') {\n            fileInput.classList.add('is-invalid');\n            const feedback = fileInput.nextElementSibling;\n            if (feedback) {\n                feedback.textContent = 'Please select a valid JSON file.';\n                feedback.classList.add('d-block');\n            }\n            return false;\n        }\n        return true;\n    }\n    static showMessage(elementId, message) {\n        const alertElement = document.getElementById(elementId);\n        if (alertElement) {\n            alertElement.textContent = message;\n            // Ensure the alert is hidden first\n            alertElement.classList.add('d-none');\n            alertElement.classList.remove('show');\n            // Trigger reflow to allow for the transition\n            void alertElement.offsetWidth;\n            // Fade in the alert\n            alertElement.classList.remove('d-none');\n            alertElement.classList.add('show');\n            // Automatically fade out after 5 seconds\n            setTimeout(() => {\n                alertElement.classList.remove('show');\n                setTimeout(() => {\n                    alertElement.classList.add('d-none');\n                }, 150); // Time to wait for the fade-out to complete\n            }, 5000); // Display duration before fading out\n        }\n    }\n    static showSuccessMessage(message, type = 1) {\n        if (type === 1) {\n            this.showMessage('successAlert', message);\n            return;\n        }\n    }\n    static showErrorMessage(message, type = 1) {\n        if (type === 1) {\n            this.showMessage('errorAlert', message);\n            return;\n        }\n    }\n    static generateFileName() {\n        const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        const dateTimestamp = new Date().toLocaleString('en-GB', { timeZone: timezone }).replace(/[\\/\\s,:]/g, '_');\n        let productionLineName = $('#productionLineName').text().replace('Production Line - ', '');\n        productionLineName = productionLineName.replace(/\\s/g, '_');\n        return `${productionLineName}_data_${dateTimestamp}.json`;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/ImportExport.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/ImportsTableFunctions.ts":
/*!*****************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/ImportsTableFunctions.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImportsTableFunctions: () => (/* binding */ ImportsTableFunctions)\n/* harmony export */ });\n/* harmony import */ var _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Data/ImportsTableRow */ \"./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts\");\n/* harmony import */ var _HtmlGeneration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HtmlGeneration */ \"./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts\");\n/* harmony import */ var _Data_Import__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Data/Import */ \"./public/TypeScript/Tables/Classes/Data/Import.ts\");\n\n\n\nclass ImportsTableFunctions {\n    /**\n     * Calculates the imports required based on production table rows.\n     *\n     * @param productionTableRows - An array of production table rows.\n     * @returns A tuple containing the imports table rows and updated indexes.\n     */\n    static calculateImports(productionTableRows) {\n        let importsTableRows = [];\n        // Reset the usage property for all production table rows\n        let updatedIndexes = this.resetUsage(productionTableRows);\n        // Loop through each production row to calculate imports\n        for (let i = 0; i + 1 < productionTableRows.length; i++) {\n            const row = productionTableRows[i];\n            const requiredItems = row.recipe?.resources;\n            // Calculate production rate based on export_amount_per_min\n            const productionRate = this.calculateProductionRate(row);\n            if (requiredItems) {\n                this.processRequiredItems(requiredItems, productionRate, row, productionTableRows, importsTableRows, updatedIndexes);\n            }\n        }\n        const html = _HtmlGeneration__WEBPACK_IMPORTED_MODULE_1__.HtmlGeneration.generateImportsTableRows(importsTableRows);\n        $('#imports tbody').html(html);\n        importsTableRows.push(new _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__.ImportsTableRow());\n        return { importsTableRows, indexes: updatedIndexes };\n    }\n    /**\n     * Resets the usage property for all production table rows.\n     *\n     * @param productionTableRows - An array of production table rows.\n     */\n    static resetUsage(productionTableRows) {\n        const changedRows = [];\n        for (const row of productionTableRows) {\n            row.productionImports = [];\n            row.imports = [];\n            if (row.Usage > 0) {\n                changedRows.push(productionTableRows.indexOf(row));\n                row.Usage = 0;\n                row.exportPerMin = row.quantity;\n            }\n            if (row.extraCells !== null) {\n                if (row.extraCells.Usage > 0) {\n                    let rowIndex = productionTableRows.indexOf(row);\n                    if (rowIndex !== -1 && !changedRows.includes(rowIndex)) {\n                        changedRows.push(rowIndex);\n                    }\n                    row.extraCells.Usage = 0;\n                    row.extraCells.ExportPerMin = row.extraCells.Quantity;\n                }\n            }\n        }\n        return changedRows;\n    }\n    /**\n     * Calculates the production rate based on the provided production row.\n     *\n     * @param row - The production table row to calculate the production rate for.\n     * @returns The calculated production rate.\n     */\n    static calculateProductionRate(row) {\n        return row.recipe?.export_amount_per_min ? row.quantity / row.recipe.export_amount_per_min : 0;\n    }\n    /**\n     * Processes required items for imports based on the production table rows.\n     *\n     * @param requiredItems - An array of resources required for production.\n     * @param productionRate - The production rate of the current row.\n     * @param row - The current production table row being processed.\n     * @param productionTableRows - The complete array of production table rows.\n     * @param importsTableRows - The array of imports table rows to update.\n     * @param updatedIndexes - The array to track updated production row indexes.\n     */\n    static processRequiredItems(requiredItems, productionRate, row, productionTableRows, importsTableRows, updatedIndexes) {\n        for (const requiredItem of requiredItems) {\n            let amountNeeded = (requiredItem.importAmount * productionRate) / (row.recipeSetting?.useSomersloop ? 2 : 1);\n            // Get produced rows that match the required item\n            const producedRows = productionTableRows.filter(r => r.product === requiredItem.name);\n            // get double export rows\n            const doubleExportRow = productionTableRows.filter(r => r.extraCells !== null && r.extraCells.Product === requiredItem.name);\n            let totalAvailable = 0; // Track total available quantity from produced rows\n            let totalUsed = 0; // Track total usage from produced rows\n            // Check each produced row\n            const { totalUsed: used, totalAvailable: available } = this.processProducedRows(producedRows, amountNeeded, totalUsed, totalAvailable, productionTableRows, updatedIndexes, row, requiredItem.name);\n            totalUsed = used;\n            totalAvailable = available;\n            // Check each double export row\n            const { totalUsed: used2, totalAvailable: available2 } = this.processDoubleExportRows(doubleExportRow, amountNeeded, totalUsed, totalAvailable, productionTableRows, updatedIndexes, row, requiredItem.name);\n            totalUsed = used2;\n            totalAvailable = available2;\n            // If there is still a need for imports after using available production\n            const amountToImport = amountNeeded - totalUsed;\n            if (amountToImport > 0) {\n                this.addToImportsTable(importsTableRows, requiredItem.itemId, amountToImport, row, requiredItem.name);\n            }\n        }\n    }\n    /**\n     * Processes the produced rows to determine how much can be used for imports.\n     * @param producedRows - The array of produced rows to process.\n     * @param amountNeeded - The total amount needed for imports.\n     * @param totalUsed - The total amount used from produced rows.\n     * @param totalAvailable - The total amount available from produced rows.\n     * @param productionTableRows - The complete array of production table rows.\n     * @param updatedIndexes - The array to track updated production row indexes.\n     * @param row\n     * @param product\n     * @private\n     */\n    static processProducedRows(producedRows, amountNeeded, totalUsed, totalAvailable, productionTableRows, updatedIndexes, row, product) {\n        for (const producedRow of producedRows) {\n            const availableAmount = producedRow.quantity - producedRow.Usage;\n            // Calculate how much we can use from this row\n            const canUse = Math.min(availableAmount, amountNeeded - totalUsed);\n            if (canUse <= 0) {\n                continue;\n            }\n            // Update usage for this produced row\n            producedRow.Usage += +canUse.toFixed(5);\n            producedRow.exportPerMin = +(producedRow.quantity - producedRow.Usage).toFixed(5);\n            // Update the total used amount\n            totalUsed += canUse;\n            totalAvailable += availableAmount; // Count how much is available from this row\n            const index = productionTableRows.indexOf(producedRow);\n            row.productionImports.push(new _Data_Import__WEBPACK_IMPORTED_MODULE_2__.Import(index, canUse, product));\n            if (index !== -1 && !updatedIndexes.includes(index)) {\n                updatedIndexes.push(index);\n            }\n        }\n        return { totalUsed, totalAvailable };\n    }\n    static processDoubleExportRows(doubleExportRows, amountNeeded, totalUsed, totalAvailable, productionTableRows, updatedIndexes, row, product) {\n        for (const doubleExport of doubleExportRows) {\n            if (doubleExport.extraCells === null) {\n                continue;\n            }\n            const availableAmount = doubleExport.extraCells.Quantity - doubleExport.extraCells.Usage;\n            // Calculate how much we can use from this row\n            const canUse = Math.min(availableAmount, amountNeeded - totalUsed);\n            if (canUse <= 0) {\n                continue;\n            }\n            // Update usage for this extra row\n            doubleExport.extraCells.Usage += +canUse.toFixed(5);\n            doubleExport.extraCells.ExportPerMin = +(doubleExport.extraCells.Quantity - doubleExport.extraCells.Usage).toFixed(5);\n            // Update the total used amount\n            totalUsed += canUse;\n            totalAvailable += availableAmount; // Count how much is available from this row\n            const index = productionTableRows.indexOf(doubleExport);\n            row.productionImports.push(new _Data_Import__WEBPACK_IMPORTED_MODULE_2__.Import(index, canUse, product, true));\n            if (index !== -1 && !updatedIndexes.includes(index)) {\n                updatedIndexes.push(index);\n            }\n        }\n        return { totalUsed, totalAvailable };\n    }\n    /**\n     * Adds the required amount to the imports table rows.\n     *\n     * @param importsTableRows - The imports table rows to update.\n     * @param itemId - The ID of the item to import.\n     * @param amountToImport - The amount of the item to import.\n     * @param row - The production table row that requires the import.\n     * @param product - The name of the product to import.\n     */\n    static addToImportsTable(importsTableRows, itemId, amountToImport, row, product) {\n        const existingImportRow = importsTableRows.find(r => r.itemId === itemId);\n        amountToImport = +amountToImport.toFixed(5);\n        if (amountToImport <= 0.0001) {\n            return;\n        }\n        if (existingImportRow) {\n            existingImportRow.quantity += amountToImport;\n            row.imports.push(new _Data_Import__WEBPACK_IMPORTED_MODULE_2__.Import(importsTableRows.indexOf(existingImportRow), amountToImport, product));\n        }\n        else {\n            importsTableRows.push(new _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__.ImportsTableRow(itemId, amountToImport, product));\n            row.imports.push(new _Data_Import__WEBPACK_IMPORTED_MODULE_2__.Import(importsTableRows.length - 1, amountToImport, product));\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/ImportsTableFunctions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts":
/*!***************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PowerTableFunctions: () => (/* binding */ PowerTableFunctions)\n/* harmony export */ });\n/* harmony import */ var _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Data/PowerTableRow */ \"./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts\");\n/* harmony import */ var _Data_BuildingOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Data/BuildingOptions */ \"./public/TypeScript/Tables/Classes/Data/BuildingOptions.ts\");\n/* harmony import */ var _HtmlGeneration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HtmlGeneration */ \"./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts\");\n/* harmony import */ var _Ajax__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n\n\n\n\nclass PowerTableFunctions {\n    static calculateBuildings(productionTableRows, oldPowerTableRows) {\n        // get the user rows\n        const userRows = oldPowerTableRows.filter(row => row.userRow == true);\n        // remove the old add row\n        userRows.pop();\n        let powerTableRows = [];\n        for (let i = 0; i + 1 < productionTableRows.length; i++) {\n            const row = productionTableRows[i];\n            const recipe = row.recipe;\n            if (recipe !== null) {\n                const building = recipe.building;\n                const maxClockSpeed = row.recipeSetting?.clockSpeed || 100;\n                const useSomersloop = row.recipeSetting?.useSomersloop || false; // dubbels the output\n                const existingRow = powerTableRows.find(row => row.buildingId === building.id && row.clockSpeed === maxClockSpeed);\n                let amountOfBuilding = PowerTableFunctions.calculateBuildingAmount(recipe, row);\n                let exes = 0;\n                const consumption = +PowerTableFunctions.calculateConsumption(amountOfBuilding, maxClockSpeed, building.power_used, useSomersloop);\n                if (amountOfBuilding % 1 !== 0) {\n                    exes = amountOfBuilding % 1;\n                    amountOfBuilding = Math.floor(amountOfBuilding);\n                }\n                if (existingRow) {\n                    existingRow.quantity += amountOfBuilding;\n                    existingRow.Consumption = +PowerTableFunctions.calculateConsumption(existingRow.quantity, maxClockSpeed, building.power_used, useSomersloop);\n                    existingRow.clockSpeed = maxClockSpeed;\n                }\n                else {\n                    powerTableRows.push(new _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_0__.PowerTableRow(building.id, amountOfBuilding, maxClockSpeed, consumption, false, building));\n                }\n                if (exes > 0) {\n                    const clockSpeed = exes * 100;\n                    if (clockSpeed < 1) {\n                        continue;\n                    }\n                    const consumption = +PowerTableFunctions.calculateConsumption(1, clockSpeed, building.power_used, useSomersloop);\n                    powerTableRows.push(new _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_0__.PowerTableRow(building.id, 1, +clockSpeed.toFixed(5), consumption, false, building));\n                }\n            }\n        }\n        // Add user rows to the power table\n        powerTableRows = powerTableRows.concat(userRows);\n        const html = _HtmlGeneration__WEBPACK_IMPORTED_MODULE_2__.HtmlGeneration.generatePowerTable(powerTableRows, _Data_BuildingOptions__WEBPACK_IMPORTED_MODULE_1__.buildingOptions, PowerTableFunctions.calculateTotalConsumption(powerTableRows));\n        $('#power tbody').html(html);\n        powerTableRows.push(new _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_0__.PowerTableRow());\n        return powerTableRows;\n    }\n    static calculateBuildingAmount(recipe, row) {\n        const amount = row.quantity;\n        const maxClockSpeed = row.recipeSetting?.clockSpeed || 100;\n        const useSomersloop = row.recipeSetting?.useSomersloop || false; // dubbels the output\n        return amount / (recipe.export_amount_per_min * (maxClockSpeed / 100)) / (useSomersloop ? 2 : 1);\n    }\n    static calculateConsumption(amount, ClockSpeed, Consumption, useSomersloop) {\n        // (1 + filledSlots / totalSlots) ^ 2\n        const powerMultiplier = Math.pow((1 + (useSomersloop ? 4 : 0) / 4), 2);\n        const clockSpeed = Math.pow(ClockSpeed / 100, 1.321928);\n        return +(amount * Consumption * powerMultiplier * clockSpeed).toFixed(5);\n    }\n    static calculateTotalConsumption(table) {\n        const filteredTable = table.filter(row => row.Consumption !== 0);\n        const totalConsumption = filteredTable.reduce((acc, row) => {\n            const consumption = Number(row.Consumption) || 0; // Ensure it's a number\n            return acc + consumption;\n        }, 0);\n        return parseFloat(totalConsumption.toFixed(5)); // Limit to 3 decimal places\n    }\n    static calculateSingleConsumption(row) {\n        if (row.building === null)\n            return 0;\n        const clockSpeed = Math.pow(row.clockSpeed / 100, 1.321928);\n        return +(row.quantity * row.building.power_used * clockSpeed).toFixed(5);\n    }\n    static async updateBuilding(row, buildingId) {\n        row.building = await _Ajax__WEBPACK_IMPORTED_MODULE_3__.Ajax.getBuilding(buildingId);\n        row.buildingId = buildingId;\n        row.Consumption = +PowerTableFunctions.calculateSingleConsumption(row);\n    }\n    static updateTotalConsumption(powerTableRows) {\n        const totalConsumption = PowerTableFunctions.calculateTotalConsumption(powerTableRows);\n        $('#totalConsumption').val(totalConsumption);\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts":
/*!*******************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProductionLineFunctions: () => (/* binding */ ProductionLineFunctions)\n/* harmony export */ });\n/* harmony import */ var _Ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n/* harmony import */ var _Data_ExtraProductionRow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Data/ExtraProductionRow */ \"./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts\");\n\n\nclass ProductionLineFunctions {\n    /**\n     * Calculate the export production based on the quantity and usage of the row.\n     * If the row has a double export, it calculates and updates the second export value.\n     *\n     * @param {any} row - The row object containing the production data.\n     */\n    static async calculateProductionExport(row) {\n        // Calculate the primary export based on quantity and usage\n        row.exportPerMin = row.quantity - row.Usage;\n        if (row.doubleExport && row.recipe !== null) {\n            const secondExportPerMin = this.calculateSecondExportPerMin(row);\n            if (secondExportPerMin !== undefined) {\n                row.extraCells.Quantity = secondExportPerMin;\n                row.extraCells.ExportPerMin = secondExportPerMin;\n            }\n        }\n    }\n    /**\n     * Updates the recipe for the given row and recalculates related data, such as double export.\n     *\n     * @param {ProductionTableRow} row - The row object to update.\n     * @param {string} value - The new recipe ID or value.\n     * @returns {Promise<void>}\n     */\n    static async updateRecipe(row, value) {\n        await this.saveRecipe(value, row);\n        const recipe = row.recipe;\n        if (recipe === null)\n            return;\n        row.recipeId = recipe.id;\n        row.product = recipe.itemName;\n        row.doubleExport = recipe.secondItemName !== null;\n        if (row.doubleExport) {\n            const exportPerMin = +recipe.export_amount_per_min;\n            // @ts-ignore\n            const secondExportPerMin = +recipe.export_amount_per_min2;\n            const secondExportPerMinMultiplier = secondExportPerMin / exportPerMin;\n            const quantityPerMin = row.quantity;\n            // Update the extra cells for the second export\n            row.extraCells = new _Data_ExtraProductionRow__WEBPACK_IMPORTED_MODULE_1__.ExtraProductionRow(\n            // @ts-ignore\n            recipe.secondItemName, 0, // Assuming no usage for the second product\n            quantityPerMin * secondExportPerMinMultiplier);\n        }\n    }\n    /**\n     * Saves the recipe data for a given recipe ID and row.\n     *\n     * @param {string} recipeId - The recipe ID to fetch.\n     * @param {ProductionTableRow} row - The row object to store the recipe in.\n     * @returns {Promise<void>}\n     */\n    static async saveRecipe(recipeId, row) {\n        row.recipe = await _Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.getRecipe(+recipeId);\n    }\n    /**\n     * Handles the display and layout changes when a row has a double export,\n     * creating a second row for the extra export if necessary.\n     *\n     * @param {ProductionTableRow} row - The row object to update.\n     * @param {JQuery<HTMLElement>} rowToUpdate - The corresponding table row element.\n     */\n    static handleDoubleExport(row, rowToUpdate) {\n        if (row.doubleExport && row.extraCells !== null) {\n            if (!rowToUpdate.next('.extra-output').length) {\n                // Modify first two columns to span 2 rows, adjust select/input height\n                rowToUpdate.find('td:nth-child(2)').attr('rowspan', 2);\n                rowToUpdate.find('td:nth-child(3)').attr('rowspan', 2);\n                rowToUpdate.find('td:nth-child(2) select').css('height', '78px');\n                rowToUpdate.find('td:nth-child(3) input').css('height', '78px');\n                // Add extra row for double export values\n                const extraRow = $(`\r\n                    <tr class=\"extra-output\">\r\n                        <td class=\"m-0 p-0\">\r\n                            <input type=\"text\" name=\"product\" value=\"${row.extraCells.Product}\" class=\"form-control rounded-0\" readonly>\r\n                        </td>\r\n                        <td class=\"m-0 p-0\">\r\n                            <input type=\"number\" name=\"production_usage2[]\" value=\"${row.extraCells.Usage}\" class=\"form-control rounded-0\" readonly step=\"any\">\r\n                        </td>\r\n                        <td class=\"m-0 p-0\">\r\n                            <input type=\"number\" name=\"production_export2[]\" value=\"${row.extraCells.ExportPerMin}\" class=\"form-control rounded-0\" readonly step=\"any\">\r\n                        </td>\r\n                    </tr>\r\n                `);\n                extraRow.insertAfter(rowToUpdate);\n            }\n            else {\n                // Update values of the existing extra row\n                const extraRow = rowToUpdate.next('.extra-output');\n                const usage = extraRow.find('input[name=\"production_usage2[]\"]');\n                const exportPerMin = extraRow.find('input[name=\"production_export2[]\"]');\n                usage.val(row.extraCells.Usage);\n                exportPerMin.val(row.extraCells.ExportPerMin);\n            }\n        }\n        else if (rowToUpdate.next('.extra-output').length) {\n            // Remove the extra row if double export is no longer active\n            rowToUpdate.next('.extra-output').remove();\n            // Reset the rowspan for the first two columns\n            rowToUpdate.find('td:nth-child(2)').removeAttr('rowspan');\n            rowToUpdate.find('td:nth-child(3)').removeAttr('rowspan');\n            // Reset the input/select height\n            rowToUpdate.find('td:nth-child(2) select').css('height', '');\n            rowToUpdate.find('td:nth-child(3) input').css('height', '');\n        }\n    }\n    /**\n     * Calculates the second export per minute for double export rows.\n     *\n     * @param {ProductionTableRow} row - The row object to calculate for.\n     * @returns {number | undefined} - The calculated second export per minute or undefined if not applicable.\n     */\n    static calculateSecondExportPerMin(row) {\n        if (row.recipe === null)\n            return;\n        const secondExportPerMin = row.recipe.export_amount_per_min2;\n        const exportPerMin = row.recipe.export_amount_per_min;\n        if (secondExportPerMin === null || exportPerMin === null)\n            return;\n        const secondExportPerMinMultiplier = secondExportPerMin / exportPerMin;\n        return row.quantity * secondExportPerMinMultiplier;\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts":
/*!*********************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SaveFunctions: () => (/* binding */ SaveFunctions)\n/* harmony export */ });\n/* harmony import */ var _Ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n\nclass SaveFunctions {\n    static prepareSaveData(productionTableRows, powerTableRows, importsTableRows, checklist) {\n        return {\n            productionTableRows: this.cloneWithoutCircularReferences(productionTableRows),\n            powerTableRows: powerTableRows,\n            importsTableRows: importsTableRows,\n            checklist: this.cloneWithoutCircularReferences(checklist?.getChecklist() || []),\n        };\n    }\n    static cloneWithoutCircularReferences(rows) {\n        return rows.map(row => {\n            // Deep clone without circular reference\n            const clonedRow = JSON.parse(JSON.stringify(row, (key, value) => {\n                // Break the circular reference\n                if (key === 'productionTableRow') {\n                    return undefined;\n                }\n                if (key === 'tableHandler') {\n                    return undefined;\n                }\n                return value;\n            }));\n            return clonedRow;\n        });\n    }\n    static saveProductionLine(jsonData, tableHandler, isQuickSave = true) {\n        try {\n            const url = new URL(window.location.href);\n            const id = parseInt(url.searchParams.get('id'));\n            return _Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.saveData(jsonData, id).then((response) => {\n                if (response['success']) {\n                    if (!isQuickSave) {\n                        return true;\n                    }\n                    this.showSuccessMessage('Data successfully saved.');\n                    const newAndOldIds = response.data.newAndOldIds;\n                    if (newAndOldIds.length > 0) {\n                        this.updateProductionIds(newAndOldIds, tableHandler);\n                    }\n                    return true;\n                }\n                this.showErrorMessage('An error occurred while saving the data. Please try again.');\n                return false;\n            }).catch((error) => {\n                console.error('Error while saving data:', error);\n                this.showErrorMessage('An error occurred while saving the data. Please try again.');\n                return false;\n            });\n        }\n        catch (error) {\n            console.error('Error while saving data:', error);\n            this.showErrorMessage('An error occurred while saving the data. Please try again.');\n            return Promise.resolve(false);\n        }\n    }\n    static showSuccessMessage(message) {\n        this.showMessage('saveSuccessAlert', message);\n        return;\n    }\n    static showErrorMessage(message) {\n        this.showMessage('saveErrorAlert', message);\n        return;\n    }\n    static showMessage(alertId, message) {\n        const alertElement = document.getElementById(alertId);\n        if (alertElement) {\n            alertElement.textContent = message;\n            // Ensure the alert is hidden first\n            alertElement.classList.add('d-none');\n            alertElement.classList.remove('show');\n            // Trigger reflow to allow for the transition\n            void alertElement.offsetWidth;\n            // Fade in the alert\n            alertElement.classList.remove('d-none');\n            alertElement.classList.add('show');\n            // Automatically fade out after 5 seconds\n            setTimeout(() => {\n                alertElement.classList.remove('show');\n                setTimeout(() => {\n                    alertElement.classList.add('d-none');\n                }, 150); // Time to wait for the fade-out to complete\n            }, 5000); // Display duration before fading out\n        }\n    }\n    static updateProductionIds(newAndOldIds, tableHandler) {\n        newAndOldIds.forEach((newAndOldId) => {\n            const newId = newAndOldId.new;\n            const oldId = newAndOldId.old;\n            $(`#recipes input[type=\"hidden\"][name=\"production_id[]\"][value=\"${oldId}\"]`).val(newId);\n            const productionRow = tableHandler.productionTableRows.find((row) => row.row_id === oldId);\n            if (productionRow) {\n                productionRow.row_id = newId;\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/RecipeSetting.ts":
/*!***********************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/RecipeSetting.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecipeSetting: () => (/* binding */ RecipeSetting)\n/* harmony export */ });\nclass RecipeSetting {\n    clockSpeed;\n    useSomersloop;\n    productionTableRow;\n    tableHandler;\n    htmlElement;\n    contextMenu = null;\n    /**\n     * Constructor for the RecipeSettings class.\n     *\n     * @param tableHandler - The TableHandler instance.\n     * @param productionTableRow - The ProductionTableRow instance.\n     * @param htmlElement - The HTML element to attach the context menu to.\n     * @param clockSpeed - The clock speed for the recipe.\n     * @param useSomersloop - Whether to use Somersloop or not.\n     */\n    constructor(tableHandler, productionTableRow, htmlElement, clockSpeed = 100, useSomersloop = false) {\n        this.clockSpeed = clockSpeed;\n        this.useSomersloop = useSomersloop;\n        this.tableHandler = tableHandler;\n        this.productionTableRow = productionTableRow;\n        this.htmlElement = htmlElement;\n        this.addEventListeners();\n    }\n    /**\n     * Add event listeners to the context menu and the window.\n     */\n    addEventListeners() {\n        //     on tr right click\n        this.htmlElement.find('.open-p-settings').on('click', (event) => {\n            // if somthing is selected, do not show the context menu\n            if (window.getSelection()?.toString()) {\n                return;\n            }\n            if (this.contextMenu) {\n                this.hideSettings();\n                return;\n            }\n            this.checkIfAnyOpenAndClose();\n            event.preventDefault();\n            this.showSettings(event);\n        });\n        this.htmlElement.on('contextmenu', (event) => {\n            // if somthing is selected, do not show the context menu\n            if (window.getSelection()?.toString()) {\n                return;\n            }\n            event.preventDefault();\n            if (this.contextMenu) {\n                this.hideSettings();\n                return;\n            }\n            this.checkIfAnyOpenAndClose();\n            this.showSettings(event);\n        });\n        //     on resizing the window, hide the context menu\n        $(window).on('resize', () => {\n            if (this.contextMenu) {\n                this.hideSettings();\n            }\n        });\n        // on click hide the context menu\n        $(document).on('click', (event) => {\n            if (!$(event.target).closest('.context-menu').length && !$(event.target).closest('.open-p-settings').length) {\n                event.stopPropagation();\n                this.hideSettings();\n            }\n        });\n        $(document).on('contextmenu', (event) => {\n            if ($(event.target).closest('tr').length) {\n                return;\n            }\n            if (!$(event.target).closest('.context-menu').length) {\n                event.stopPropagation();\n                this.hideSettings();\n            }\n        });\n    }\n    /**\n     * Show the settings menu for the recipe.\n     *\n     * @param event - The event that triggered the context menu.\n     * @private\n     */\n    showSettings(event) {\n        // create new element\n        const tr = this.htmlElement;\n        const contextMenu = $('<div class=\"context-menu\">');\n        contextMenu.css('display', 'block');\n        contextMenu.css('top', ((tr?.offset()?.top ?? 0) + (tr?.height() ?? 0) * (this.productionTableRow.doubleExport ? 2 : 1)) + 'px');\n        contextMenu.addClass('bg-body p-2 shadow rounded-bottom border border-primary');\n        contextMenu.css('left', tr.offset()?.left + 'px');\n        contextMenu.css('z-index', '9999');\n        contextMenu.css('width', tr.width() + 'px');\n        contextMenu.css('height', 'auto');\n        contextMenu.css('position', 'absolute');\n        this.showOptions(contextMenu);\n        // append the context menu to the body\n        contextMenu.appendTo('body');\n        this.contextMenu = contextMenu;\n        this.initCheckBoxes();\n    }\n    /**\n     * Show the options in the context menu.\n     *\n     * @param renderElement - The element to render the options in.\n     */\n    showOptions(renderElement) {\n        const maxClockSpeedInput = $(`\r\n        <input type=\"number\" class=\"form-control\" id=\"maxClockSpeed\" step=\"any\" min=\"0\" max=\"250\"  value=\"${String(this.clockSpeed)}\">\r\n    `);\n        const useSomersloopInput = $(`\r\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"useSomersloop\" ${this.useSomersloop ? 'checked' : ''}>\r\n    `);\n        const wrapper = $('<div class=\"context-menu-wrapper\">');\n        const ClockSpeedWrapper = $('<div class=\"form-group\">').append('<label class=\"form-check-label me-2\" for=\"useSomersloop\">Clock Speed</label>');\n        ClockSpeedWrapper.append(maxClockSpeedInput);\n        const checkboxWrapper = $('<div class=\"form-group\">');\n        checkboxWrapper.append('<label class=\"form-check-label me-2\" for=\"useSomersloop\">Use Somersloop</label>');\n        checkboxWrapper.append(useSomersloopInput);\n        wrapper.append(ClockSpeedWrapper, `<hr>`, checkboxWrapper);\n        wrapper.appendTo(renderElement);\n        // Optional: If you're using Bootstrap Toggle (plugin), initialize it\n        if (typeof $.fn.bootstrapToggle === 'function') {\n            useSomersloopInput.attr({\n                'data-toggle': 'toggle',\n                'data-onstyle': 'success',\n                'data-offstyle': 'danger',\n                'data-onlabel': 'Yes',\n                'data-offlabel': 'No',\n                // @ts-ignore\n            }).bootstrapToggle();\n        }\n        const rowIndex = this.tableHandler.productionTableRows.findIndex((row) => row.row_id === this.productionTableRow.row_id);\n        // Add event listeners for the inputs\n        maxClockSpeedInput.on('change', () => {\n            this.updateSettings();\n            this.htmlElement.find(\"input[name='production_quantity[]'\").trigger('change');\n            this.tableHandler.checklist?.updateCheckList(this.productionTableRow);\n        });\n        useSomersloopInput.on('change', () => {\n            this.updateSettings();\n            this.htmlElement.find(\"input[name='production_quantity[]'\").trigger('change');\n            this.tableHandler.checklist?.updateCheckList(this.productionTableRow);\n        });\n    }\n    /**\n     * Update the settings based on the inputs.\n     *\n     * @private\n     */\n    updateSettings() {\n        const maxClockSpeedInput = $('#maxClockSpeed');\n        const useSomersloopInput = $('#useSomersloop');\n        if (maxClockSpeedInput.length > 0) {\n            this.clockSpeed = this.validateClockSpeed(Number(maxClockSpeedInput.val()));\n            maxClockSpeedInput.val(this.clockSpeed);\n        }\n        if (useSomersloopInput.length > 0) {\n            this.useSomersloop = useSomersloopInput.is(':checked');\n        }\n    }\n    validateClockSpeed(clockSpeed) {\n        if (clockSpeed > 250) {\n            clockSpeed = 250;\n        }\n        if (clockSpeed < 0) {\n            clockSpeed = 0;\n        }\n        return clockSpeed;\n    }\n    /**\n     * Hide the settings menu.\n     */\n    hideSettings() {\n        const contextMenu = this.contextMenu;\n        if (!contextMenu)\n            return;\n        if (contextMenu.length > 0) {\n            contextMenu.remove();\n            this.contextMenu = null;\n        }\n    }\n    /**\n     * Initialize the checkboxes in the context menu.\n     *\n     * @private\n     */\n    initCheckBoxes() {\n        if (!this.contextMenu)\n            return;\n        const checkboxes = this.contextMenu.find('input[type=\"checkbox\"]');\n        checkboxes.each((index, checkbox) => {\n            const $checkbox = $(checkbox);\n            // @ts-ignore\n            $checkbox.bootstrapToggle();\n        });\n    }\n    checkIfAnyOpenAndClose() {\n        const openContextMenus = this.tableHandler.productionTableRows.filter(row => row.recipeSetting?.contextMenu !== null);\n        if (openContextMenus.length > 0) {\n            openContextMenus.forEach((row) => {\n                row.recipeSetting?.hideSettings();\n            });\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/RecipeSetting.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Settings.ts":
/*!******************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Settings.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Settings: () => (/* binding */ Settings)\n/* harmony export */ });\n/* harmony import */ var _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Functions/Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n\nclass Settings {\n    autoImportExport = true;\n    autoPowerMachine = true;\n    autoSave = false;\n    constructor() {\n        this.addEventListeners();\n        this.applyChanges();\n    }\n    applyChanges() {\n        const url = new URL(window.location.href);\n        const productionLineId = parseInt(url.searchParams.get('id'));\n        const autoImportExportCheckbox = document.getElementById('auto_import_export');\n        const autoPowerMachineCheckbox = document.getElementById('auto_power_machine');\n        if (autoImportExportCheckbox) {\n            this.autoImportExport = autoImportExportCheckbox.checked;\n        }\n        if (autoPowerMachineCheckbox) {\n            this.autoPowerMachine = autoPowerMachineCheckbox.checked;\n        }\n        _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.saveSettings(productionLineId, this.autoImportExport, this.autoPowerMachine, this.autoSave);\n    }\n    addEventListeners() {\n        const autoImportExportCheckbox = document.getElementById('auto_import_export');\n        const autoPowerMachineCheckbox = document.getElementById('auto_power_machine');\n        if (autoImportExportCheckbox) {\n            // when on click give the element\n            autoImportExportCheckbox.addEventListener('change', () => {\n                $('#auto_import_export').parent().parent().tooltip('hide');\n                this.applyChanges();\n            });\n        }\n        if (autoPowerMachineCheckbox) {\n            autoPowerMachineCheckbox.addEventListener('change', () => {\n                $('#auto_power_machine').parent().parent().tooltip('hide');\n                this.applyChanges();\n            });\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Settings.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/TableHandler.ts":
/*!**********************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/TableHandler.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableHandler: () => (/* binding */ TableHandler)\n/* harmony export */ });\n/* harmony import */ var _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data/ImportsTableRow */ \"./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts\");\n/* harmony import */ var _Data_ProductionTableRow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Data/ProductionTableRow */ \"./public/TypeScript/Tables/Classes/Data/ProductionTableRow.ts\");\n/* harmony import */ var _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Data/PowerTableRow */ \"./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts\");\n/* harmony import */ var _Data_ExtraProductionRow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Data/ExtraProductionRow */ \"./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts\");\n/* harmony import */ var _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Functions/ProductionLineFunctions */ \"./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts\");\n/* harmony import */ var _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Functions/PowerTableFunctions */ \"./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts\");\n/* harmony import */ var _Functions_ImportsTableFunctions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Functions/ImportsTableFunctions */ \"./public/TypeScript/Tables/Classes/Functions/ImportsTableFunctions.ts\");\n/* harmony import */ var _Settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Settings */ \"./public/TypeScript/Tables/Classes/Settings.ts\");\n/* harmony import */ var _Functions_HtmlGeneration__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Functions/HtmlGeneration */ \"./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts\");\n/* harmony import */ var _Data_BuildingOptions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Data/BuildingOptions */ \"./public/TypeScript/Tables/Classes/Data/BuildingOptions.ts\");\n/* harmony import */ var _Visualization__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Visualization */ \"./public/TypeScript/Tables/Classes/Visualization.ts\");\n/* harmony import */ var _Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Functions/SaveFunctions */ \"./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts\");\n/* harmony import */ var _Checklist__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Checklist */ \"./public/TypeScript/Tables/Classes/Checklist.ts\");\n/* harmony import */ var _RecipeSetting__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./RecipeSetting */ \"./public/TypeScript/Tables/Classes/RecipeSetting.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Class responsible for handling the manipulation and event handling of tables.\n */\nclass TableHandler {\n    importsTableRows = [];\n    productionTableRows = [];\n    powerTableRows = [];\n    settings = new _Settings__WEBPACK_IMPORTED_MODULE_7__.Settings();\n    checklist = null;\n    visualisation = null;\n    updated = false;\n    // cache data\n    cacheVersion = $('#dataVersion').val();\n    buildingCache = [];\n    recipeCache = [];\n    // progress bar\n    progressBar = $('#loading-progress');\n    progressInterval = 0;\n    totalRows = 0;\n    finishedRows = 0;\n    recipeSettings = [];\n    constructor() {\n        this.initialize();\n    }\n    async initialize() {\n        this.CheckCacheVersion();\n        let timeOutTime = 500;\n        // if page is reloaded set timeout to 0\n        const pageAccessedByReload = ((window.performance.getEntriesByType('navigation').length === 0) ||\n            window.performance\n                .getEntriesByType('navigation')\n                // @ts-ignore\n                .map((nav) => nav.type)\n                .includes('reload'));\n        if (pageAccessedByReload) {\n            timeOutTime = 0;\n        }\n        this.loadFromLocal();\n        await this.getTableData();\n        this.addEventListeners();\n        this.addButtonEventListeners();\n        this.addShortcuts();\n        // wait for a little bit so the user can see the 100% progress\n        setTimeout(() => {\n            this.hideLoading();\n            this.enableButtons();\n        }, timeOutTime);\n        this.checklist = new _Checklist__WEBPACK_IMPORTED_MODULE_12__.Checklist(this);\n        console.log(this.checklist);\n    }\n    async getTableData() {\n        this.totalRows = $('#recipes tbody tr').length;\n        this.progressInterval = 100 / this.totalRows;\n        0;\n        this.recipeSettings = JSON.parse($(\"#settings-data\").text() ?? {});\n        this.productionTableRows = await this.readTable('recipes', _Data_ProductionTableRow__WEBPACK_IMPORTED_MODULE_1__.ProductionTableRow, true);\n        await this.readTable('imports', _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__.ImportsTableRow).then(result => {\n            this.importsTableRows = result;\n        }).catch(error => {\n            console.error('Failed to load imports table rows:', error);\n        });\n        this.readTable('power', _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_2__.PowerTableRow).then(result => {\n            this.powerTableRows = result;\n            this.saveToLocal();\n            this.showCacheAmount();\n        }).catch(error => {\n            console.error('Failed to load power table rows:', error);\n        });\n    }\n    /**\n     * Generic method to read tables and convert rows into class instances.\n     * @param {string} id - The ID of the table.\n     * @param {new(...args: any[]) => T} rowClass - The class constructor for the table rows.\n     * @param useProgress - Whether to use the progress bar.\n     * @returns {T[]} An array of instances of the specified row class.\n     */\n    async readTable(id, rowClass, useProgress = false) {\n        const table = $(`#${id} tbody tr`);\n        let lengthReduction = 0;\n        if (id === 'power') {\n            lengthReduction = 1;\n        }\n        const rowPromises = [];\n        for (let i = 0; i < table.length - lengthReduction; i++) {\n            const row = table[i];\n            const values = $(row).find('input, select');\n            const rowValues = [];\n            values.each((_, value) => {\n                if ($(value).data('sp-skip') === true) {\n                    console.warn('Skipping value:', value);\n                    return;\n                }\n                const type = $(value).attr('type');\n                if (type === 'number') {\n                    rowValues.push(Number($(value).val()));\n                }\n                else {\n                    rowValues.push($(value).val());\n                }\n            });\n            // Handle double export in recipes table\n            if (id === 'recipes' && table[i + 1]?.classList.contains('extra-output')) {\n                const extraRow = table[i + 1];\n                const extraRowValues = $(extraRow).find('input, select').map((_, el) => $(el).val()).get();\n                // Create instance of ExtraProductionRow\n                const extraRowInstance = new _Data_ExtraProductionRow__WEBPACK_IMPORTED_MODULE_3__.ExtraProductionRow(extraRowValues[0], // Product\n                Number(extraRowValues[1]), // Usage\n                Number(extraRowValues[2]) // ExportPerMin\n                );\n                // Append extraRowInstance to rowValues\n                rowValues.push(true, extraRowInstance);\n                // Skip the extra row in the next iteration\n                i++;\n                this.finishedRows++;\n            }\n            else if (id === 'recipes') {\n                rowValues.push(false, null);\n            }\n            if (id === 'recipes') {\n                rowValues.push(this.recipeCache);\n            }\n            if (id === 'power') {\n                rowValues.push(null);\n                rowValues.push(this.buildingCache);\n            }\n            // @ts-ignore\n            const rowPromise = rowClass.create(...rowValues).then((row) => {\n                if (useProgress) {\n                    this.updateProgress();\n                }\n                return row;\n            });\n            rowPromises.push(rowPromise);\n            if (id === 'recipes') {\n                const settings = this.recipeSettings.find((setting) => setting.id === +rowValues[0]);\n                rowPromise.then((productionTableRow) => {\n                    productionTableRow.recipeSetting = new _RecipeSetting__WEBPACK_IMPORTED_MODULE_13__.RecipeSetting(this, productionTableRow, $(row), settings?.clockSpeed || 100, settings?.useSomersloop || false);\n                });\n            }\n        }\n        return await Promise.all(rowPromises);\n    }\n    /**\n     * save cache to local storage\n     * @returns {void}\n     */\n    saveToLocal() {\n        localStorage.setItem('cachedData', JSON.stringify({\n            Version: this.cacheVersion,\n            Recipe: this.recipeCache,\n            Building: this.buildingCache,\n        }));\n    }\n    /**\n     * show cache amount\n     * @returns {void}\n     */\n    showCacheAmount() {\n        $('#cachedRecipes').html(this.recipeCache.length.toString());\n        $('#cachedBuildings').html(this.buildingCache.length.toString());\n    }\n    /**\n     * empty cache from local storage\n     * @returns {void}\n     */\n    emptyLocal() {\n        localStorage.removeItem('cachedData');\n    }\n    /**\n     * load from local storage\n     * @returns {void}\n     */\n    loadFromLocal() {\n        const data = JSON.parse(localStorage.getItem('cachedData') || '{}');\n        this.recipeCache = data.Recipe || [];\n        this.buildingCache = data.Building || [];\n        $('#cachedRecipes').html(this.recipeCache.length.toString());\n        $('#cachedBuildings').html(this.buildingCache.length.toString());\n    }\n    CheckCacheVersion() {\n        const data = JSON.parse(localStorage.getItem('cachedData') || '{}');\n        if (data.Version !== this.cacheVersion.toString()) {\n            this.emptyLocal();\n            this.loadFromLocal();\n        }\n    }\n    /**\n     * Hides the loading screen and shows the main content.\n     * @returns {void}\n     * @private\n     */\n    hideLoading() {\n        $('#loading').addClass('d-none');\n        $('#main-content').removeClass('d-none');\n    }\n    /**\n     * Shows the loading screen and hides the main content.\n     * @returns {void}\n     * @private\n     */\n    showLoading(showLoadingBar = true) {\n        this.progressBar.parent().removeClass('d-none');\n        $('#loading').removeClass('d-none');\n        $('#main-content').addClass('d-none');\n        if (!showLoadingBar) {\n            this.progressBar.parent().addClass('d-none');\n        }\n    }\n    /**\n     * Updates the progress bar.\n     * @returns {void}\n     * @private\n     */\n    updateProgress() {\n        this.finishedRows++;\n        const progress = Math.round(this.finishedRows * this.progressInterval);\n        this.progressBar.css('width', `${progress}%`);\n        this.progressBar.attr('aria-valuenow', progress);\n        this.progressBar.html(`${progress}%`);\n    }\n    /**\n     * Adds event listeners for change events on all inputs and selects within tables.\n     */\n    async addEventListeners() {\n        const tables = ['imports', 'recipes', 'power'];\n        tables.forEach((tableId) => {\n            const inputsAndSelects = $(`#${tableId} tbody`).find('input, select');\n            inputsAndSelects.each((_, element) => {\n                // if has skip data attribute, skip it\n                if ($(element).data('sp-skip') === true) {\n                    console.warn('Skipping element:', element);\n                    return;\n                }\n                $(element).on('change', (event) => {\n                    this.handleInputChange(event, tableId);\n                });\n            });\n        });\n    }\n    addSpecificEventListener(tableId) {\n        const inputsAndSelects = $(`#${tableId} tbody`).find('input, select');\n        inputsAndSelects.each((_, element) => {\n            $(element).on('change', (event) => {\n                this.handleInputChange(event, tableId);\n            });\n        });\n    }\n    /**\n     * Handles the change event for table inputs/selects.\n     * @param {JQuery.ChangeEvent} event - The change event object.\n     * @param {string} tableId - The ID of the table where the event occurred.\n     */\n    async handleInputChange(event, tableId) {\n        const target = $(event.target);\n        const rowIndex = target.closest('tr').index();\n        const amountExtra = target.closest('tr').prevAll('.extra-output').length;\n        const columnIndex = target.closest('td').index();\n        const value = target.val();\n        // If the last row is selected, add a new row\n        if (this.checkIfLastRow(target, tableId) && this.checkIfSelect(target)) {\n            this.addNewRow(tableId);\n        }\n        const row = this.getRowByTableIdAndIndex(tableId, rowIndex - amountExtra);\n        if (row && columnIndex >= 0) {\n            this.updateRowData(row, columnIndex, value);\n            switch (tableId) {\n                case 'imports':\n                    // Custom logic for imports table\n                    break;\n                case 'recipes':\n                    await this.HandleProductionTable(row, rowIndex, value, tableId, target);\n                    this.checklist?.updateCheckList(row);\n                    break;\n                case 'power':\n                    await this.HandlePowerTable(row, rowIndex, value, tableId, target);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    /**\n     * Retrieves the row from the corresponding table by tableId and rowIndex.\n     * @param {string} tableId - The ID of the table.\n     * @param {number} rowIndex - The index of the row to retrieve.\n     * @returns {any} The row object.\n     */\n    getRowByTableIdAndIndex(tableId, rowIndex) {\n        switch (tableId) {\n            case 'imports':\n                return this.importsTableRows[rowIndex];\n            case 'recipes':\n                return this.productionTableRows[rowIndex];\n            case 'power':\n                return this.powerTableRows[rowIndex];\n            default:\n                return null;\n        }\n    }\n    /**\n     * Updates the row object with new data based on the column index.\n     * @param {any} row - The row object to update.\n     * @param {number} columnIndex - The index of the column.\n     * @param {any} value - The new value to set in the row.\n     */\n    updateRowData(row, columnIndex, value) {\n        const rowKeys = Object.keys(row);\n        const key = rowKeys[columnIndex];\n        row[key] = value;\n    }\n    /**\n     * Updates the visual representation of the row in the table.\n     * @param {string} tableId - The ID of the table.\n     * @param {number} rowIndex - The index of the row to update.\n     * @param {any} row - The updated row object.\n     */\n    updateRowInTable(tableId, rowIndex, row) {\n        const table = $(`#${tableId} tbody tr`);\n        let rowToUpdate = $(table[rowIndex]);\n        rowToUpdate.find('input:not([data-sp-skip=\"true\"]), select:not([data-sp-skip=\"true\"])').each((index, element) => {\n            const key = Object.keys(row)[index];\n            let value;\n            if (row.recipe && row.recipe.hasOwnProperty(key)) {\n                value = row.recipe[key]; // Use value from recipe\n            }\n            else {\n                value = row[key]; // Use value from row\n            }\n            $(element).val(value);\n        });\n        if (tableId === 'recipes') {\n            _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_4__.ProductionLineFunctions.handleDoubleExport(row, rowToUpdate);\n        }\n    }\n    /**\n     * Adds a new row to the table when the last row is modified.\n     * @param {string} tableId - The ID of the table.\n     */\n    addNewRow(tableId) {\n        let lastRow;\n        if (tableId === 'power') {\n            lastRow = $(`#${tableId} tbody tr:nth-last-child(2)`);\n        }\n        else {\n            lastRow = $(`#${tableId} tbody tr:last`);\n        }\n        const newRow = lastRow.clone();\n        newRow.find('input[type=\"number\"]').val(0);\n        newRow.find('input[type=\"text\"]').val('');\n        newRow.find('input[name=\"power_clock_speed[]\"]').val(100);\n        newRow.find('select').prop('selectedIndex', 0);\n        newRow.insertAfter(lastRow);\n        newRow.find('input, select').each((_, element) => {\n            $(element).on('change', (event) => {\n                this.handleInputChange(event, tableId);\n            });\n        });\n        switch (tableId) {\n            case 'imports':\n                this.importsTableRows.push(new _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__.ImportsTableRow());\n                break;\n            case 'recipes':\n                const productionRow = new _Data_ProductionTableRow__WEBPACK_IMPORTED_MODULE_1__.ProductionTableRow();\n                productionRow.recipeSetting = new _RecipeSetting__WEBPACK_IMPORTED_MODULE_13__.RecipeSetting(this, productionRow, newRow);\n                this.productionTableRows.push(productionRow);\n                break;\n            case 'power':\n                this.powerTableRows.push(new _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_2__.PowerTableRow());\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Checks if the selected element is in the last row.\n     * @param {JQuery} target - The target element.\n     * @param {string} tableId - The ID of the table.\n     * @returns {boolean} True if the element is in the last row, false otherwise.\n     */\n    checkIfLastRow(target, tableId) {\n        if (tableId === 'power') {\n            return target.closest('tr').is(':nth-last-child(2)');\n        }\n        return target.closest('tr').is(':last-child');\n    }\n    /**\n     * Checks if the selected element is a <select> element.\n     * @param {JQuery} target - The target element.\n     * @returns {boolean} True if the element is a <select>, false otherwise.\n     */\n    checkIfSelect(target) {\n        return target.parent().hasClass('recipe-select');\n    }\n    UpdateOnIndex(indexes) {\n        for (let i = 0; i < indexes.length; i++) {\n            const index = indexes[i];\n            const target = this.productionTableRows[index];\n            const checkAbleRows = this.productionTableRows.slice(0, index);\n            const amountExtra = checkAbleRows.filter(row => row.doubleExport).length;\n            const row = this.productionTableRows[index];\n            this.updateRowInTable('recipes', index + amountExtra, row);\n            // break;\n        }\n    }\n    /**\n     * Handles the change event for the power table.\n     * @param row - The row object to update.\n     * @param rowIndex - The index of the row in the table.\n     * @param value - The new value to set in the row.\n     * @param tableId - The ID of the table.\n     * @param target - The target element that triggered the event.\n     * @constructor\n     * @private\n     */\n    async HandlePowerTable(row, rowIndex, value, tableId, target) {\n        if (this.checkIfSelect(target)) {\n            await _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__.PowerTableFunctions.updateBuilding(row, value);\n        }\n        else {\n            row.Consumption = _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__.PowerTableFunctions.calculateSingleConsumption(row);\n        }\n        this.updateRowInTable(tableId, rowIndex, row);\n        _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__.PowerTableFunctions.updateTotalConsumption(this.powerTableRows);\n    }\n    showVisualization() {\n        if (this.settings.autoImportExport) {\n            const data = _Functions_ImportsTableFunctions__WEBPACK_IMPORTED_MODULE_6__.ImportsTableFunctions.calculateImports(this.productionTableRows);\n            this.importsTableRows = data.importsTableRows;\n        }\n        if (!this.visualisation) {\n            this.updated = false;\n            this.visualisation = new _Visualization__WEBPACK_IMPORTED_MODULE_10__.Visualization(this);\n        }\n        else if (this.updated) {\n            this.updated = false;\n            this.visualisation.update();\n        }\n        else {\n            this.visualisation.updateNodeColors();\n        }\n        $('#showVisualization').modal('show');\n    }\n    saveData(productionTable, powerTable, importTable, checklist = null) {\n        this.productionTableRows = productionTable.pop() ? productionTable : productionTable;\n        this.powerTableRows = powerTable.pop() ? powerTable : powerTable;\n        this.importsTableRows = importTable.pop() ? importTable : importTable;\n        this.checklist?.setChecklist(checklist);\n        this.generateTables();\n        this.powerTableRows.push(new _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_2__.PowerTableRow());\n        this.productionTableRows.push(new _Data_ProductionTableRow__WEBPACK_IMPORTED_MODULE_1__.ProductionTableRow());\n        this.importsTableRows.push(new _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__.ImportsTableRow());\n        _Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_11__.SaveFunctions.saveProductionLine(_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_11__.SaveFunctions.prepareSaveData(this.productionTableRows, this.powerTableRows, this.importsTableRows, this.checklist), this);\n    }\n    generateTables() {\n        $('#power tbody').html(_Functions_HtmlGeneration__WEBPACK_IMPORTED_MODULE_8__.HtmlGeneration.generatePowerTable(this.powerTableRows, _Data_BuildingOptions__WEBPACK_IMPORTED_MODULE_9__.buildingOptions, _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__.PowerTableFunctions.calculateTotalConsumption(this.powerTableRows)));\n        $('#imports tbody').html(_Functions_HtmlGeneration__WEBPACK_IMPORTED_MODULE_8__.HtmlGeneration.generateImportsTableRows(this.importsTableRows));\n        $('#recipes tbody').html(_Functions_HtmlGeneration__WEBPACK_IMPORTED_MODULE_8__.HtmlGeneration.generateProductionTableRows(this.productionTableRows));\n        this.addEventListeners();\n    }\n    disableButtons() {\n        $('#save_button').addClass('disabled');\n        $('#save_button').prop('disabled', true);\n        $('#showPower').addClass('disabled');\n        $('#showPower').prop('disabled', true);\n    }\n    enableButtons() {\n        $('#save_button').removeClass('disabled');\n        $('#save_button').prop('disabled', false);\n        $('#showPower').removeClass('disabled');\n        $('#showPower').prop('disabled', false);\n        $('#showVisualizationButton').removeClass('disabled');\n        $('#showVisualizationButton').prop('disabled', false);\n        $('#edit_product_line').removeClass('disabled');\n        $('#edit_product_line').prop('disabled', false);\n        $('#showCheckList').removeClass('disabled');\n        $('#showCheckList').prop('disabled', false);\n    }\n    /**\n     * Handles the change event for the production table.\n     * @param row - The row object to update.\n     * @param rowIndex - The index of the row in the table.\n     * @param value - The new value to set in the row.\n     * @param tableId - The ID of the table.\n     * @param target - The target element that triggered the event.\n     * @constructor\n     * @private\n     */\n    async HandleProductionTable(row, rowIndex, value, tableId, target) {\n        this.updated = true;\n        await _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_4__.ProductionLineFunctions.calculateProductionExport(row);\n        if (this.checkIfSelect(target)) {\n            await _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_4__.ProductionLineFunctions.updateRecipe(row, value);\n        }\n        console.log('Row after update:', row);\n        this.updateRowInTable(tableId, rowIndex, row);\n        if (this.settings.autoImportExport) {\n            const data = _Functions_ImportsTableFunctions__WEBPACK_IMPORTED_MODULE_6__.ImportsTableFunctions.calculateImports(this.productionTableRows);\n            this.importsTableRows = data.importsTableRows;\n            this.UpdateOnIndex(data.indexes);\n        }\n        if (this.settings.autoPowerMachine) {\n            this.powerTableRows = _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__.PowerTableFunctions.calculateBuildings(this.productionTableRows, this.powerTableRows);\n            this.addSpecificEventListener('power');\n        }\n    }\n    async addShortcuts() {\n        const tableHandler = this;\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            document.addEventListener('keydown', (event) => {\n                const powerModal = $('#showPowerModal');\n                const editModal = $('#editProductionLine');\n                const helpModal = $('#helpModal');\n                const VisualizationModal = $('#showVisualization');\n                function closeModals() {\n                    powerModal.modal('hide');\n                    editModal.modal('hide');\n                    helpModal.modal('hide');\n                    VisualizationModal.modal('hide');\n                }\n                // Save production line\n                if (event.ctrlKey && event.key === 's') {\n                    event.preventDefault();\n                    _Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_11__.SaveFunctions.saveProductionLine(_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_11__.SaveFunctions.prepareSaveData(tableHandler.productionTableRows, tableHandler.powerTableRows, tableHandler.importsTableRows, tableHandler.checklist), tableHandler);\n                }\n                // Open power modal\n                if (event.ctrlKey && event.key === 'p') {\n                    event.preventDefault();\n                    if (powerModal.is(':hidden')) {\n                        closeModals();\n                        powerModal.modal('show');\n                    }\n                    else {\n                        powerModal.modal('hide');\n                    }\n                }\n                // Open edit / settings modal\n                if (event.ctrlKey && event.key === 'e') {\n                    event.preventDefault();\n                    closeModals();\n                    if (editModal.is(':hidden')) {\n                        closeModals();\n                        editModal.modal('show');\n                    }\n                    else {\n                        editModal.modal('hide');\n                    }\n                }\n                // help modal\n                if (event.ctrlKey && event.key === 'h') {\n                    event.preventDefault();\n                    if (helpModal.is(':hidden')) {\n                        closeModals();\n                        helpModal.find('#welcome').hide();\n                        helpModal.modal('show');\n                    }\n                    else {\n                        helpModal.modal('hide');\n                    }\n                }\n                // go back\n                if (event.ctrlKey && event.key === 'q') {\n                    event.preventDefault();\n                    window.history.back();\n                }\n                // show visualization\n                if (event.key === 'v' && event.ctrlKey) {\n                    // if in input field, do not trigger\n                    const ignoreTags = ['INPUT', 'SELECT', 'TEXTAREA', 'BUTTON'];\n                    // @ts-ignore\n                    if (ignoreTags.includes(event.target.tagName)) {\n                        return; // Early exit for these tags\n                    }\n                    event.preventDefault();\n                    if (VisualizationModal.is(':hidden')) {\n                        closeModals();\n                        tableHandler.showVisualization();\n                    }\n                    else {\n                        VisualizationModal.modal('hide');\n                    }\n                }\n            });\n        });\n    }\n    async addButtonEventListeners() {\n        $('#showVisualizationButton').on('click', () => {\n            this.showVisualization();\n        });\n        $('#removeCache').on('click', () => {\n            this.emptyLocal();\n            this.loadFromLocal();\n            this.showCacheAmount();\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/TableHandler.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Visualization.ts":
/*!***********************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Visualization.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Visualization: () => (/* binding */ Visualization)\n/* harmony export */ });\n/* harmony import */ var _Data_Visualization_ImportNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data/Visualization/ImportNodes */ \"./public/TypeScript/Tables/Classes/Data/Visualization/ImportNodes.ts\");\n/* harmony import */ var _Data_Visualization_ProductionNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Data/Visualization/ProductionNodes */ \"./public/TypeScript/Tables/Classes/Data/Visualization/ProductionNodes.ts\");\n/* harmony import */ var _Data_Visualization_ExportNodes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Data/Visualization/ExportNodes */ \"./public/TypeScript/Tables/Classes/Data/Visualization/ExportNodes.ts\");\n/* harmony import */ var _Data_Visualization_Connection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Data/Visualization/Connection */ \"./public/TypeScript/Tables/Classes/Data/Visualization/Connection.ts\");\n/* harmony import */ var _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Functions/PowerTableFunctions */ \"./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts\");\n\n\n\n\n\nlet cytoscape;\n// global variables\nconst TEXT_SIZE = 25;\n/**\n * Visualization class\n *\n * This class is responsible for creating the visualization of the production line\n * @class\n * @property {TableHandler} TableHandler - The table handler object\n * @property {ImportNodes[]} importNodes - The import nodes array\n * @property {ProductionNodes[]} productionNodes - The production nodes array\n * @property {ExportNodes[]} exportNodes - The export nodes array\n *\n * @property {Connection[]} importConnections - The import connections array\n * @property {Connection[]} productionConnections - The production connections array\n * @property {Connection[]} exportConnections - The export connections array\n */\nclass Visualization {\n    TableHandler;\n    importNodes = [];\n    productionNodes = [];\n    exportNodes = [];\n    importConnections = [];\n    productionConnections = [];\n    exportConnections = [];\n    layout = 'klay';\n    showExport = false;\n    showImport = true;\n    showChecklist = true;\n    useRoots = true;\n    cy = null;\n    /**\n     * Constructor for the Visualization class\n     * @constructor\n     * @param {TableHandler} tableHandler - The table handler object\n     */\n    constructor(tableHandler) {\n        this.TableHandler = tableHandler;\n        // Get the data\n        this.getterData();\n        // Create the visualization\n        this.createVisualization();\n        // Add event listeners\n        this.addEventListeners();\n    }\n    update() {\n        this.getterData();\n        this.createVisualization();\n    }\n    /**\n     * Create the visualization of the production line\n     */\n    async createVisualization() {\n        // check if the extensions are loaded, if not, load them\n        if (!cytoscape) {\n            await this.showLoadingScreen();\n            await this.loadCytoscapeExtensions();\n        }\n        let elements = [];\n        let roots = [];\n        if (this.showImport) {\n            elements.push(...this.importNodes.map(node => this.addNode('import', node)));\n            roots.push(...this.importNodes.map(node => `import_${node.id}`));\n            elements.push(...this.importConnections.map(connection => this.addConnection('import', connection, 'import', 'production')));\n        }\n        elements.push(...this.productionNodes.map(node => this.addNode('production', node)));\n        elements.push(...this.productionConnections.map((connection, i) => ({\n            ...this.addConnection('production', connection, 'production', 'production'),\n            data: {\n                ...this.addConnection('production', connection, 'production', 'production').data,\n                id: `productionConnection_${i}`\n            }\n        })));\n        if (this.showExport) {\n            elements.push(...this.exportNodes.map(node => this.addNode('export', node)));\n            elements.push(...this.exportConnections.map(connection => this.addConnection('export', connection, 'production', 'export')));\n        }\n        const layout = {\n            name: \"klay\",\n            // @ts-ignore\n            animate: true,\n            spacingFactor: 2.0,\n            nodeDimensionsIncludeLabels: true,\n            avoidOverlap: true,\n        };\n        const cy = cytoscape({\n            container: document.getElementById(\"graph\"), // container to render in\n            elements: elements,\n            style: [\n                {\n                    selector: \"node\",\n                    style: {\n                        \"label\": \"data(label)\",\n                        'background-color': 'data(color)', // Middle label\n                        \"text-halign\": \"center\",\n                        \"text-valign\": \"center\",\n                        'width': 200,\n                        'height': 200, // Align middle\n                        \"color\": \"black\",\n                        \"font-size\": TEXT_SIZE,\n                        \"text-wrap\": \"wrap\",\n                    }\n                },\n                {\n                    selector: \"node.top-text\",\n                    style: {\n                        'text-margin-y': -60, // Adjusts position to appear above center\n                    }\n                },\n                {\n                    selector: \"edge\",\n                    style: {\n                        \"label\": \"data(label)\", // Display label from data\n                        \"font-size\": TEXT_SIZE, // Customize font size if needed\n                        \"text-background-color\": \"white\",\n                        \"text-background-opacity\": 0.5,\n                        \"text-background-padding\": '3px',\n                        \"text-background-shape\": \"roundrectangle\",\n                        \"color\": \"black\", // Text color\n                        \"width\": 5, // Line width\n                        \"line-color\": \"data(color)\", // Line color\n                        \"target-arrow-color\": \"#333\",\n                        \"target-arrow-shape\": \"triangle\",\n                        \"target-arrow-fill\": \"filled\",\n                        \"curve-style\": \"bezier\",\n                        \"control-point-step-size\": 40,\n                    }\n                }\n            ],\n            layout: layout\n        });\n        cy.ready(() => {\n            // @ts-ignore\n            cy.nodes().forEach(node => {\n                this.applyQTip(node, node.data('title'));\n                node.on('drag', () => {\n                    if (node.qtip('api').visible) {\n                        node.qtip('api').hide();\n                    }\n                });\n                node.on('mouseout', () => {\n                    node.qtip('api').hide();\n                });\n            });\n            // @ts-ignore\n            cy.edges().forEach(edge => {\n                this.applyQTip(edge, edge.data('label'));\n            });\n            cy.center();\n            cy.fit();\n        });\n        this.cy = cy;\n    }\n    applyQTip(element, content) {\n        element.qtip({\n            content: content,\n            position: {\n                my: 'top center',\n                at: 'bottom center'\n            },\n            style: {\n                classes: 'qtip-bootstrap',\n                tip: {\n                    width: 16,\n                    height: 8\n                }\n            },\n            show: {\n                event: 'mouseover',\n                delay: 100\n            },\n            hide: {\n                event: 'mouseout'\n            }\n        });\n    }\n    // updates the node production colors based on the checklist\n    updateNodeColors() {\n        if (!this.cy) { // Ensure `this.cy` exists\n            console.error(\"Cytoscape instance not found!\");\n            return;\n        }\n        this.cy.nodes().forEach(node => {\n            const data = node.data();\n            if (data.id.startsWith('production')) {\n                const productionNode = this.productionNodes.find(n => `production_${n.id}` === data.id);\n                if (!productionNode) {\n                    return;\n                }\n                node.style('background-color', this.showChecklist ? this.getColor(productionNode.checklist) : 'green');\n            }\n        });\n    }\n    getColor(checklist) {\n        if (!checklist) {\n            return '#A0A0A0'; // Not built & not tested (Gray)\n        }\n        if (checklist.beenBuild && checklist.beenTested) {\n            return '#28A745'; // Built & tested (Green)\n        }\n        else if (checklist.beenBuild) {\n            return '#FFD700'; // Built but not tested (Yellow)\n        }\n        else {\n            return '#A0A0A0'; // Not built & not tested (Gray)\n        }\n    }\n    /**\n     * Add a node to the visualization\n     * @param node - The node to add\n     * @param type - The type of the node\n     * @private\n     *\n     * @returns {object} - The node object\n     */\n    addNode(type, node) {\n        return {\n            data: {\n                id: `${type}_${node.id}`,\n                label: `${node.product}\\n${node.quantity}${node.building ? `\\n\\n\\n\\n${node.building}\\n${node.buildingAmount}` : ''}`,\n                color: type === 'import' ? 'blue' :\n                    type === 'export' ? 'red' : this.showChecklist ? this.getColor(node.checklist) : 'green',\n                title: `${type.charAt(0).toUpperCase() + type.slice(1)}: ${node.product}<br>Amount: ${node.quantity}${node.building ? `<br><hr>Building: ${node.building}<br>Amount of building: ${node.buildingAmount}` : ''}`\n            },\n            classes: type === 'production' ? 'top-text' : ''\n        };\n    }\n    addConnection(type, connection, sourcePrefix, targetPrefix) {\n        return {\n            data: {\n                id: `${type}Connection_${connection.id}`,\n                source: `${sourcePrefix}_${connection.sourceId}`,\n                target: `${targetPrefix}_${connection.targetId}`,\n                label: `${connection.product} ${connection.quantity}`,\n                color: type === 'import' ? 'blue' : type === 'export' ? 'red' : 'green'\n            }\n        };\n    }\n    /**\n     * Get the data from the tables\n     * @private\n     */\n    getterData() {\n        this.importNodes = [];\n        this.productionNodes = [];\n        this.exportNodes = [];\n        this.importConnections = [];\n        this.productionConnections = [];\n        this.exportConnections = [];\n        this.getImportNodes();\n        this.getProduction();\n        this.getExportNodes();\n        this.getImportConnection();\n    }\n    /**\n     * Add event listeners to the visualization\n     * @method\n     * @private\n     */\n    addEventListeners() {\n        // $('#layout').on('change', (e) => {\n        //     const select = $(e.target);\n        //     this.layout = select.val() as 'breadthfirst' | 'cose' | 'klay' | 'fcose' | 'concentric';\n        //     this.createVisualization();\n        // });\n        $('#showChecklist').on('change', (e) => {\n            const select = $(e.target);\n            this.showChecklist = select.prop('checked');\n            this.updateNodeColors();\n        });\n        $('#export').on('change', (e) => {\n            const select = $(e.target);\n            this.showExport = select.prop('checked');\n            this.createVisualization();\n        });\n        $('#import').on('change', (e) => {\n            const select = $(e.target);\n            this.showImport = select.prop('checked');\n            this.createVisualization();\n        });\n        $('#refresh').on('click', () => {\n            this.createVisualization();\n        });\n        $('#roots').on('change', (e) => {\n            const select = $(e.target);\n            this.useRoots = select.prop('checked');\n            this.createVisualization();\n        });\n    }\n    /**\n     * Get all import connections from the production table and add them to the import connections array\n     * @private\n     */\n    getImportConnection() {\n        let index = 0;\n        for (let i = 0; i < this.TableHandler.productionTableRows.length; i++) {\n            const row = this.TableHandler.productionTableRows[i];\n            for (let j = 0; j < row.imports.length; j++) {\n                const importRow = row.imports[j];\n                this.importConnections.push(new _Data_Visualization_Connection__WEBPACK_IMPORTED_MODULE_3__.Connection(index, importRow.index, i, +importRow.amount.toFixed(3), importRow.product));\n                index++;\n            }\n        }\n    }\n    /**\n     * Get all production nodes and connections from the production table\n     * @private\n     */\n    getProduction() {\n        for (let i = 0; i < this.TableHandler.productionTableRows.length; i++) {\n            const row = this.TableHandler.productionTableRows[i];\n            const building = row.recipe?.building;\n            const amount = row.quantity;\n            const recipe = row.recipe;\n            const checklist = this.TableHandler.checklist?.getChecklist().find(check => check.productionRow.row_id == row.row_id);\n            if (!recipe) {\n                continue;\n            }\n            let amountOfBuilding = _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_4__.PowerTableFunctions.calculateBuildingAmount(recipe, row).toFixed(5);\n            if (building && recipe) {\n                this.productionNodes.push(new _Data_Visualization_ProductionNodes__WEBPACK_IMPORTED_MODULE_1__.ProductionNodes(i, recipe.name, row.quantity, building.name, building.id, +amountOfBuilding, checklist));\n            }\n            for (let j = 0; j < row.productionImports.length; j++) {\n                const importRow = row.productionImports[j];\n                this.productionConnections.push(new _Data_Visualization_Connection__WEBPACK_IMPORTED_MODULE_3__.Connection(i, importRow.index, i, +importRow.amount.toFixed(3), importRow.product));\n            }\n        }\n    }\n    /**\n     * Get all import nodes from the import table and add them to the import nodes array\n     * @private\n     */\n    getImportNodes() {\n        for (let i = 0; i < this.TableHandler.importsTableRows.length; i++) {\n            const row = this.TableHandler.importsTableRows[i];\n            if (row.product !== '' && row.quantity > 0) {\n                this.importNodes.push(new _Data_Visualization_ImportNodes__WEBPACK_IMPORTED_MODULE_0__.ImportNodes(i, row.product, row.quantity));\n            }\n        }\n    }\n    /**\n     * Get all export nodes from the production table and add them to the export nodes array and connections array\n     * @private\n     */\n    getExportNodes() {\n        let index = 0;\n        for (let i = 0; i < this.TableHandler.productionTableRows.length; i++) {\n            const row = this.TableHandler.productionTableRows[i];\n            if (row.exportPerMin > 0) {\n                this.exportNodes.push(new _Data_Visualization_ExportNodes__WEBPACK_IMPORTED_MODULE_2__.ExportNodes(index, row.product, row.exportPerMin));\n                this.exportConnections.push(new _Data_Visualization_Connection__WEBPACK_IMPORTED_MODULE_3__.Connection(index, i, this.exportNodes.length - 1, row.exportPerMin, row.product));\n                index++;\n            }\n            // @ts-ignore\n            if (row.extraCells?.ExportPerMin > 0) {\n                // @ts-ignore\n                this.exportNodes.push(new _Data_Visualization_ExportNodes__WEBPACK_IMPORTED_MODULE_2__.ExportNodes(index, row.product, row.extraCells?.ExportPerMin));\n                // @ts-ignore\n                this.exportConnections.push(new _Data_Visualization_Connection__WEBPACK_IMPORTED_MODULE_3__.Connection(index, i, this.exportNodes.length - 1, row.extraCells?.ExportPerMin, row.product));\n                index++;\n            }\n        }\n    }\n    async loadCytoscapeExtensions() {\n        const progress = (percent) => {\n            $('#loadingProgressGraph').css('width', percent + '%');\n        };\n        progress(10);\n        cytoscape = (await __webpack_require__.e(/*! import() */ \"vendors-node_modules_cytoscape_dist_cytoscape_esm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! cytoscape */ \"./node_modules/cytoscape/dist/cytoscape.esm.mjs\"))).default;\n        progress(40);\n        //@ts-ignore\n        const { default: qtip } = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_cytoscape-qtip_cytoscape-qtip_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! cytoscape-qtip */ \"./node_modules/cytoscape-qtip/cytoscape-qtip.js\", 23));\n        progress(70);\n        const { default: klay } = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_cytoscape-klay_cytoscape-klay_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! cytoscape-klay */ \"./node_modules/cytoscape-klay/cytoscape-klay.js\", 23));\n        progress(90);\n        cytoscape.use(qtip);\n        cytoscape.use(klay);\n        progress(100);\n        await this.hideLoadingScreen();\n    }\n    async hideLoadingScreen() {\n        return new Promise((resolve) => {\n            const loadingScreen = $('#loadingScreenGraph');\n            const graph = $('#graph');\n            // Fade out only opacity, keep other styles intact\n            loadingScreen.css('transition', 'opacity 0.5s');\n            loadingScreen.css('opacity', '0');\n            setTimeout(() => {\n                loadingScreen.addClass('d-none'); // Hide the loading screen after fade out\n                // Show the graph by removing a \"hidden\" class, instead of using fadeIn\n                graph.removeClass('hidden-graph'); // This class can handle opacity/display safely\n                resolve();\n            }, 500);\n        });\n    }\n    async showLoadingScreen() {\n        return new Promise((resolve) => {\n            const loadingScreen = $('#loadingScreenGraph');\n            const graph = $('#graph');\n            const loadingProgress = $('#loadingProgressGraph');\n            // Reset the loading progress bar\n            loadingProgress.css('width', '0%');\n            // Show the loading screen\n            loadingScreen.removeClass('d-none'); // Ensure it's visible\n            loadingScreen.css('opacity', '1'); // Reset opacity to 1\n            // Hide the graph by adding a \"hidden\" class, instead of using fadeOut\n            graph.addClass('hidden-graph'); // This class can handle opacity/display safely\n            resolve();\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Visualization.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/index.ts":
/*!*******************************************!*\
  !*** ./public/TypeScript/Tables/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Classes_TableHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Classes/TableHandler */ \"./public/TypeScript/Tables/Classes/TableHandler.ts\");\n/* harmony import */ var _Classes_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Classes/Functions/SaveFunctions */ \"./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts\");\n/* harmony import */ var _Classes_Functions_ImportExport__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Classes/Functions/ImportExport */ \"./public/TypeScript/Tables/Classes/Functions/ImportExport.ts\");\n\n\n\nconst tableHandler = new _Classes_TableHandler__WEBPACK_IMPORTED_MODULE_0__.TableHandler();\nconst saveButton = $(\"#save_button\");\nsaveButton.on(\"click\", (event) => {\n    if (event.shiftKey) {\n        event.preventDefault();\n        _Classes_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_1__.SaveFunctions.saveProductionLine(_Classes_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_1__.SaveFunctions.prepareSaveData(tableHandler.productionTableRows, tableHandler.powerTableRows, tableHandler.importsTableRows, tableHandler.checklist), tableHandler);\n        saveButton.tooltip('hide');\n        saveButton.blur();\n    }\n    else {\n        event.preventDefault();\n        tableHandler.showLoading(false);\n        _Classes_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_1__.SaveFunctions.saveProductionLine(_Classes_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_1__.SaveFunctions.prepareSaveData(tableHandler.productionTableRows, tableHandler.powerTableRows, tableHandler.importsTableRows, tableHandler.checklist), tableHandler, false).then((success) => {\n            if (success) {\n                window.location.href = \"/game_save?id=\" + encodeURIComponent($(\"#gameSaveId\").val());\n            }\n            else {\n                tableHandler.hideLoading();\n            }\n        });\n    }\n});\n// on page load\n$(document).on(\"DOMContentLoaded\", () => {\n    const exportButton = $(\"#exportButton\");\n    const importButton = $(\"#importButton\");\n    exportButton.on(\"click\", () => {\n        _Classes_Functions_ImportExport__WEBPACK_IMPORTED_MODULE_2__.ImportExport.exportData(tableHandler);\n    });\n    importButton.on(\"click\", (event) => {\n        event.preventDefault();\n        _Classes_Functions_ImportExport__WEBPACK_IMPORTED_MODULE_2__.ImportExport.importData(tableHandler);\n    });\n});\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/index.ts?");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/native.js":
/*!******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/native.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ randomUUID });\n\n\n//# sourceURL=webpack:///./node_modules/uuid/dist/esm-browser/native.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);\n\n\n//# sourceURL=webpack:///./node_modules/uuid/dist/esm-browser/regex.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nfunction rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n\n\n//# sourceURL=webpack:///./node_modules/uuid/dist/esm-browser/rng.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/esm-browser/validate.js\");\n\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);\n\n\n//# sourceURL=webpack:///./node_modules/uuid/dist/esm-browser/stringify.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"./node_modules/uuid/dist/esm-browser/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"./node_modules/uuid/dist/esm-browser/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/esm-browser/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? (0,_rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);\n\n\n//# sourceURL=webpack:///./node_modules/uuid/dist/esm-browser/v4.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"./node_modules/uuid/dist/esm-browser/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);\n\n\n//# sourceURL=webpack:///./node_modules/uuid/dist/esm-browser/validate.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".chunk.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		// data-webpack is not used as build has no uniqueName
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 		
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"tables": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = this["webpackChunk"] = this["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./public/TypeScript/Tables/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});