/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./public/TypeScript/PowerProduction/Classes/PowerProduction.ts":
/*!**********************************************************************!*\
  !*** ./public/TypeScript/PowerProduction/Classes/PowerProduction.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PowerProduction: () => (/* binding */ PowerProduction)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar ActionType;\n(function (ActionType) {\n    ActionType[\"Add\"] = \"add\";\n    ActionType[\"Delete\"] = \"delete\";\n    ActionType[\"Update\"] = \"update\";\n    ActionType[\"Calculate\"] = \"calculate\";\n})(ActionType || (ActionType = {}));\nvar PowerProduction = /** @class */ (function () {\n    function PowerProduction() {\n        this.powerProduction = $('#powerProduction');\n        this.newInput = $('#powerProductionCardNew');\n    }\n    PowerProduction.prototype.addNewPowerPlant = function (element) {\n        return __awaiter(this, void 0, void 0, function () {\n            var name, amount, clockSpeed, newCard, json, newId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        name = this.newInput.find('#building option:selected').text();\n                        amount = this.newInput.find('#amount').val() || '1';\n                        clockSpeed = this.newInput.find('#clock_speed').val() || '100';\n                        // Validate inputs and return early if invalid\n                        if (!this.validateAndHandleInput(name, amount, clockSpeed)) {\n                            return [2 /*return*/];\n                        }\n                        newCard = this.newCard();\n                        return [4 /*yield*/, this.applyToDatabase(ActionType.Add, element)];\n                    case 1:\n                        json = _a.sent();\n                        if (json.hasOwnProperty('error')) {\n                            console.error(json.error);\n                            return [2 /*return*/];\n                        }\n                        if (this.powerProduction.find('h5').length > 0) {\n                            this.powerProduction.find('h5').remove();\n                        }\n                        newId = \"powerProductionCard\".concat(json.powerProductionId);\n                        newCard.attr('id', newId);\n                        // Update the cloned card with new input values\n                        newCard.find('.col-5 h6').text(name);\n                        newCard.find('#amount').val(amount.toString());\n                        newCard.find('#clock_speed').val(clockSpeed);\n                        // Apply event listeners to the new card\n                        this.applyEventListenersToCard(newCard);\n                        // Append the updated card to the power production section\n                        this.powerProduction.append(newCard);\n                        // Reset the form for adding new power plants\n                        this.resetAddCard();\n                        // Calculate the new power production\n                        this.calculatePowerProduction();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PowerProduction.prototype.deletePowerPlant = function (element) {\n        return __awaiter(this, void 0, void 0, function () {\n            var json, card;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.applyToDatabase(ActionType.Delete, element)];\n                    case 1:\n                        json = _a.sent();\n                        console.log(json);\n                        if (json.hasOwnProperty('error')) {\n                            console.error(json.error);\n                            return [2 /*return*/];\n                        }\n                        card = $(element).closest('.card');\n                        card.remove();\n                        if (this.powerProduction.find('.card').length === 0) {\n                            this.powerProduction.append('<h5 class=\"text-center mt-2\">No power production buildings added yet</h5>');\n                        }\n                        console.log('Deleted power plant');\n                        this.calculatePowerProduction();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PowerProduction.prototype.updatePowerPlant = function (element) {\n        return __awaiter(this, void 0, void 0, function () {\n            var json;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.applyToDatabase(ActionType.Update, element)];\n                    case 1:\n                        json = _a.sent();\n                        if (json.hasOwnProperty('error')) {\n                            console.error(json.error);\n                            return [2 /*return*/];\n                        }\n                        this.calculatePowerProduction();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PowerProduction.prototype.calculatePowerProduction = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var json, totalPowerProduction;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.applyToDatabase(ActionType.Calculate, document.createElement('div'))];\n                    case 1:\n                        json = _a.sent();\n                        if (json.hasOwnProperty('error')) {\n                            console.error(json.error);\n                            return [2 /*return*/];\n                        }\n                        totalPowerProduction = json.totalPowerProduction;\n                        updatePowerProduction(totalPowerProduction);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PowerProduction.prototype.applyEventListenersToCard = function (card) {\n        var _this = this;\n        var deleteButton = card.find('.deletePowerProduction');\n        var updateInputs = card.find('input');\n        console.log(deleteButton);\n        console.log(updateInputs);\n        if (deleteButton.length > 0) {\n            console.log('delete button');\n            deleteButton.on('click', function (event) {\n                console.log('delete button clicked');\n                _this.deletePowerPlant(event.currentTarget);\n            });\n        }\n        if (updateInputs.length > 0) {\n            console.log('update inputs');\n            updateInputs.on('change', function (event) {\n                console.log('update inputs changed');\n                _this.updatePowerPlant(event.currentTarget);\n            });\n        }\n    };\n    PowerProduction.prototype.applyEventListeners = function () {\n        var _this = this;\n        var addButton = this.newInput.find('button');\n        var deleteButtons = this.powerProduction.find('.deletePowerProduction');\n        var updateInputs = this.powerProduction.find('input');\n        if (addButton) {\n            addButton.on('click', function (event) {\n                _this.addNewPowerPlant(event.currentTarget);\n            });\n        }\n        if (deleteButtons) {\n            deleteButtons.on('click', function (event) {\n                _this.deletePowerPlant(event.currentTarget);\n            });\n        }\n        if (updateInputs) {\n            updateInputs.on('change', function (event) {\n                _this.updatePowerPlant(event.currentTarget);\n            });\n        }\n    };\n    PowerProduction.prototype.checkAndHandleNoPowerPlants = function () {\n        if (this.powerProduction.find('.card').length === 0) {\n            this.powerProduction.append('<h6>No power plants added yet</h6>');\n        }\n    };\n    PowerProduction.prototype.newCard = function () {\n        // Create the card element\n        var card = document.createElement('div');\n        card.className = 'card mb-2';\n        var cardBody = document.createElement('div');\n        cardBody.className = 'card-body p-2 row d-flex justify-content-between align-items-center';\n        // Create the content of the card\n        cardBody.innerHTML = \"\\n        <div class=\\\"col-5 col-lg-6 ps-3 pe-1\\\">\\n            <h6 class=\\\"m-0\\\"></h6>\\n        </div>\\n        <div class=\\\"col-2 px-1\\\">\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"amount\\\" name=\\\"amount\\\"\\n                   min=\\\"1\\\" max=\\\"1000\\\">\\n        </div>\\n        <div class=\\\"col-2 px-1\\\">\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"clock_speed\\\"\\n                   name=\\\"clock_speed\\\" min=\\\"1\\\" max=\\\"250\\\" step=\\\"any\\\">\\n        </div>\\n        <div class=\\\"col-3 col-lg-2 text-end ps-1 pe-3\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger deletePowerProduction\\\">\\n            Delete\\n            </button>\\n        </div>\\n    \";\n        card.appendChild(cardBody);\n        return $(card);\n    };\n    PowerProduction.prototype.resetAddCard = function () {\n        this.newInput.find('#amount').val('1');\n        this.newInput.find('#clock_speed').val('100');\n        // Reset select to the first option\n        this.newInput.find('select').prop('selectedIndex', 0);\n    };\n    PowerProduction.prototype.validateAndHandleInput = function (name, amount, clockSpeed) {\n        var _this = this;\n        var addInvalidClass = function (selector) { return _this.newInput.find(selector).addClass('is-invalid'); };\n        var removeInvalidClass = function (selector) { return _this.newInput.find(selector).removeClass('is-invalid'); };\n        var error = false;\n        // If validation passed, clear any error states\n        removeInvalidClass('#building');\n        removeInvalidClass('#amount');\n        removeInvalidClass('#clock_speed');\n        // Check for empty or default values\n        if (!name || name === 'Select a building') {\n            addInvalidClass('#building');\n            error = true;\n        }\n        // Validate amount\n        var parsedAmount = parseFloat(Array.isArray(amount) ? amount[0] : amount.toString());\n        if (isNaN(parsedAmount) || parsedAmount < 1 || parsedAmount > 1000) {\n            addInvalidClass('#amount');\n            error = true;\n        }\n        // Validate clock speed\n        var parsedClockSpeed = parseFloat(Array.isArray(clockSpeed) ? clockSpeed[0] : clockSpeed.toString());\n        if (isNaN(parsedClockSpeed) || parsedClockSpeed < 1 || parsedClockSpeed > 250) {\n            addInvalidClass('#clock_speed');\n            error = true;\n        }\n        return !error;\n    };\n    // apply to database using ajax\n    PowerProduction.prototype.applyToDatabase = function (action, element) {\n        return __awaiter(this, void 0, void 0, function () {\n            var card, cardId, powerProductionId, url, gameSaveId, buildingId_1, amount_1, clockSpeed_1, amount1_1, clockSpeed1_1;\n            return __generator(this, function (_a) {\n                card = $(element).closest('.card');\n                cardId = card.attr('id') || '';\n                powerProductionId = cardId.replace('powerProductionCard', '');\n                url = new URL(window.location.href);\n                gameSaveId = url.searchParams.get('id');\n                switch (action) {\n                    case ActionType.Add:\n                        buildingId_1 = card.find('#building').val();\n                        amount_1 = card.find('#amount').val();\n                        clockSpeed_1 = card.find('#clock_speed').val();\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                $.ajax({\n                                    url: 'powerProduction/add',\n                                    type: 'POST',\n                                    dataType: 'json',\n                                    data: {\n                                        gameSaveId: gameSaveId,\n                                        buildingId: buildingId_1,\n                                        amount: amount_1,\n                                        clockSpeed: clockSpeed_1\n                                    },\n                                    success: function (data) {\n                                        resolve(data);\n                                    }\n                                });\n                            })];\n                    case ActionType.Delete:\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                $.ajax({\n                                    url: 'powerProduction/delete',\n                                    type: 'POST',\n                                    dataType: 'json',\n                                    data: {\n                                        powerProductionId: powerProductionId\n                                    },\n                                    success: function (data) {\n                                        resolve(data);\n                                    }\n                                });\n                            })];\n                    case ActionType.Update:\n                        amount1_1 = card.find('#amount').val();\n                        clockSpeed1_1 = card.find('#clock_speed').val();\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                $.ajax({\n                                    url: 'powerProduction/update',\n                                    type: 'POST',\n                                    dataType: 'json',\n                                    data: {\n                                        powerProductionId: powerProductionId,\n                                        amount: amount1_1,\n                                        clockSpeed: clockSpeed1_1\n                                    },\n                                    success: function (data) {\n                                        console.log(data);\n                                        resolve(data);\n                                    }\n                                });\n                            })];\n                    case ActionType.Calculate:\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                $.ajax({\n                                    url: 'powerProduction/calculate',\n                                    type: 'POST',\n                                    dataType: 'json',\n                                    data: {\n                                        gameSaveId: gameSaveId\n                                    },\n                                    success: function (data) {\n                                        resolve(data);\n                                    }\n                                });\n                            })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    return PowerProduction;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/PowerProduction/Classes/PowerProduction.ts?");

/***/ }),

/***/ "./public/TypeScript/PowerProduction/index.ts":
/*!****************************************************!*\
  !*** ./public/TypeScript/PowerProduction/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Classes_PowerProduction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Classes/PowerProduction */ \"./public/TypeScript/PowerProduction/Classes/PowerProduction.ts\");\n\nvar powerProduction = new _Classes_PowerProduction__WEBPACK_IMPORTED_MODULE_0__.PowerProduction();\npowerProduction.applyEventListeners();\n\n\n//# sourceURL=webpack:///./public/TypeScript/PowerProduction/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./public/TypeScript/PowerProduction/index.ts");
/******/ 	
/******/ })()
;