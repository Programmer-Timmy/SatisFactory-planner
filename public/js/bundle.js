/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./public/TypeScript/Table/ImportsTable.ts":
/*!*************************************************!*\
  !*** ./public/TypeScript/Table/ImportsTable.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImportsTable: () => (/* binding */ ImportsTable)\n/* harmony export */ });\n/* harmony import */ var _TableBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableBase */ \"./public/TypeScript/Table/TableBase.ts\");\n/* harmony import */ var _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils/TableHeader */ \"./public/TypeScript/Table/Utils/TableHeader.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\nvar ImportsTable = /** @class */ (function (_super) {\n    __extends(ImportsTable, _super);\n    function ImportsTable(tableId, productionTable, disableOnChange, skipReading) {\n        if (disableOnChange === void 0) { disableOnChange = false; }\n        if (skipReading === void 0) { skipReading = false; }\n        var _this = _super.call(this, tableId, disableOnChange) || this;\n        _this.productionTable = productionTable;\n        var options;\n        var select = $('#imports tbody tr:last td select');\n        if (select.length > 0) {\n            // @ts-ignore\n            options = select.find('option').map(function (index, option) {\n                // check if it is disabled\n                var disabled = option.disabled ? true : false;\n                return {\n                    value: option.value,\n                    display: option.text,\n                    disabled: disabled\n                };\n            }).get();\n        }\n        else {\n            options = {};\n        }\n        _this.tableHeaders = [\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Item', 'select', false, options, 'imports_item_id[]'),\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Amount', 'number', false, {}, 'imports_ammount[]'),\n        ];\n        if (!skipReading) {\n            _this.ReadRows();\n        }\n        return _this;\n    }\n    ImportsTable.prototype.handleChange = function (event) {\n        return __awaiter(this, void 0, void 0, function () {\n            var $target, $row;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Get new changes\n                    return [4 /*yield*/, this.ReadRows()];\n                    case 1:\n                        // Get new changes\n                        _a.sent();\n                        $target = $(event.target);\n                        $row = $($target).closest('tr');\n                        if (!(this.checkIfLastRow($row) && this.checkIfSelect($($target)))) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.addRow()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.calculateImport()];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ImportsTable.prototype.calculateImport = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var productionRows, _loop_1, this_1, _i, productionRows_1, row, i, itemId, alreadyProduced, remainingAmount, _a, alreadyProduced_1, _b, index, double;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        productionRows = this.productionTable.tableRows;\n                        this.deleteAllRows();\n                        _loop_1 = function (row) {\n                            var recipeId, quantity, recipeImportsPromise, recipeDataPromise, _d, imports, recipeData, productionRate_1, error_1;\n                            return __generator(this, function (_e) {\n                                switch (_e.label) {\n                                    case 0:\n                                        recipeId = +row.cells[0];\n                                        quantity = +row.cells[1];\n                                        recipeImportsPromise = this_1.getRecipeImports(recipeId);\n                                        recipeDataPromise = this_1.getRecipe(recipeId);\n                                        // Skip iteration if either promise is falsy\n                                        if (!recipeImportsPromise || !recipeDataPromise) {\n                                            return [2 /*return*/, \"continue\"];\n                                        }\n                                        _e.label = 1;\n                                    case 1:\n                                        _e.trys.push([1, 3, , 4]);\n                                        return [4 /*yield*/, Promise.all([recipeImportsPromise, recipeDataPromise])];\n                                    case 2:\n                                        _d = _e.sent(), imports = _d[0], recipeData = _d[1];\n                                        productionRate_1 = quantity / recipeData['export_amount_per_min'];\n                                        // Iterate through each import item\n                                        imports.forEach(function (importItem) {\n                                            var importAmount = importItem['importAmount'] * productionRate_1;\n                                            var existingImportIndex = _this.checkIfImportAlreadyExists(importItem['itemId']);\n                                            if (existingImportIndex !== false) {\n                                                // Update existing import amount\n                                                _this.tableRows[existingImportIndex].cells[1] = Math.round(+_this.tableRows[existingImportIndex].cells[1] + importAmount).toString();\n                                            }\n                                            else if (importAmount > 0) {\n                                                // Add new row if import amount is positive and not already existing\n                                                _this.addRow();\n                                                _this.tableRows[_this.tableRows.length - 1].cells = [importItem['itemId'], Math.round(importAmount)];\n                                            }\n                                        });\n                                        return [3 /*break*/, 4];\n                                    case 3:\n                                        error_1 = _e.sent();\n                                        console.error(\"Error processing recipe ID \".concat(recipeId, \":\"), error_1);\n                                        return [3 /*break*/, 4];\n                                    case 4: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _i = 0, productionRows_1 = productionRows;\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < productionRows_1.length)) return [3 /*break*/, 4];\n                        row = productionRows_1[_i];\n                        return [5 /*yield**/, _loop_1(row)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        i = 0;\n                        _c.label = 5;\n                    case 5:\n                        if (!(i < this.tableRows.length)) return [3 /*break*/, 8];\n                        itemId = this.tableRows[i].cells[0];\n                        return [4 /*yield*/, this.checkIfAlreadyProduced(itemId, this.productionTable)];\n                    case 6:\n                        alreadyProduced = _c.sent();\n                        if (alreadyProduced) {\n                            remainingAmount = +this.tableRows[i].cells[1];\n                            for (_a = 0, alreadyProduced_1 = alreadyProduced; _a < alreadyProduced_1.length; _a++) {\n                                _b = alreadyProduced_1[_a], index = _b.index, double = _b.double;\n                                remainingAmount = this.updateProductionRow(index, remainingAmount, double);\n                                if (remainingAmount <= 0) {\n                                    this.deleteRow(i);\n                                    i--;\n                                    break;\n                                }\n                                this.tableRows[i].cells[1] = remainingAmount.toString();\n                            }\n                        }\n                        _c.label = 7;\n                    case 7:\n                        i++;\n                        return [3 /*break*/, 5];\n                    case 8:\n                        this.addRow();\n                        this.renderTable();\n                        this.productionTable.addRow();\n                        this.productionTable.renderTable();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ImportsTable.prototype.checkIfImportAlreadyExists = function (itemId) {\n        for (var i = 0; i < this.tableRows.length; i++) {\n            if (this.tableRows[i].cells[0] == itemId) {\n                return i;\n            }\n        }\n        return false;\n    };\n    /**\n     * Check if the item is already produced\n     *\n     * @param itemId\n     * @param productionTable\n     * @private\n     */\n    ImportsTable.prototype.checkIfAlreadyProduced = function (itemId, productionTable) {\n        return __awaiter(this, void 0, void 0, function () {\n            var itemName, returnData, i;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getItemName(+itemId)];\n                    case 1:\n                        itemName = _a.sent();\n                        returnData = [{ double: false, index: 0 }];\n                        for (i = 0; i < productionTable.tableRows.length; i++) {\n                            productionTable.tableRows[i].cells[3] = '0';\n                            productionTable.tableRows[i].cells[4] = productionTable.tableRows[i].cells[1];\n                            if (productionTable.tableRows[i].cells[2] == itemName) {\n                                returnData.push({ double: false, index: i });\n                            }\n                            if (productionTable.tableRows[i].doubleExport && productionTable.tableRows[i].extraCells[0] == itemName) {\n                                returnData.push({ double: true, index: i });\n                            }\n                        }\n                        if (returnData.length == 1) {\n                            return [2 /*return*/, false];\n                        }\n                        returnData.shift();\n                        return [2 /*return*/, returnData];\n                }\n            });\n        });\n    };\n    /**\n     * Updates a production row based on the given index, remaining amount, and whether the row is \"double\".\n     * @param index - The index of the production row.\n     * @param remainingAmount - The remaining amount to be processed.\n     * @param isDouble - Whether the row is a \"double\" row.\n     * @returns The remaining amount after processing.\n     */\n    ImportsTable.prototype.updateProductionRow = function (index, remainingAmount, isDouble) {\n        if (isDouble) {\n            return this.updateDoubleRow(index, remainingAmount);\n        }\n        else {\n            return this.updateSingleRow(index, remainingAmount);\n        }\n    };\n    /**\n     * Updates a \"double\" production row.\n     * @param index - The index of the production row.\n     * @param remainingAmount - The remaining amount to be processed.\n     * @returns The remaining amount after processing.\n     */\n    ImportsTable.prototype.updateDoubleRow = function (index, remainingAmount) {\n        var productionRow = this.productionTable.tableRows[index];\n        var usedAmount = Math.min(remainingAmount, +productionRow.extraCells[1]);\n        var excessAmount = remainingAmount - +productionRow.extraCells[2];\n        productionRow.extraCells[1] = usedAmount.toString();\n        productionRow.extraCells[2] = (+productionRow.extraCells[2] - usedAmount).toString();\n        return excessAmount > 0 ? excessAmount : 0;\n    };\n    /**\n     * Updates a single production row.\n     * @param index - The index of the production row.\n     * @param remainingAmount - The remaining amount to be processed.\n     * @returns The remaining amount after processing.\n     */\n    ImportsTable.prototype.updateSingleRow = function (index, remainingAmount) {\n        var productionRow = this.productionTable.tableRows[index];\n        var tableProductionAmount = +productionRow.cells[1];\n        var usedAmount = Math.min(remainingAmount, tableProductionAmount);\n        var excessAmount = remainingAmount - tableProductionAmount;\n        productionRow.cells[3] = usedAmount.toString();\n        productionRow.cells[4] = (tableProductionAmount - usedAmount).toString();\n        return excessAmount > 0 ? excessAmount : 0;\n    };\n    /**\n     * Get the recipe imports from the database\n     * @param recipeId\n     * @private\n     */\n    ImportsTable.prototype.getRecipeImports = function (recipeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        $.ajax({\n                            type: 'GET',\n                            url: 'getRecipeResources',\n                            data: {\n                                id: recipeId\n                            },\n                            success: function (response) {\n                                try {\n                                    // Parse the JSON response\n                                    resolve(JSON.parse(response));\n                                }\n                                catch (error) {\n                                    reject(error);\n                                }\n                            },\n                            error: function (xhr, status, error) {\n                                reject(error);\n                            }\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Get the recipe from the database\n     * @param itemId\n     * @private\n     */\n    ImportsTable.prototype.getItemName = function (itemId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        $.ajax({\n                            type: 'GET',\n                            url: 'getItemName',\n                            data: {\n                                id: itemId\n                            },\n                            success: function (response) {\n                                try {\n                                    // Parse the JSON response\n                                    resolve(response);\n                                }\n                                catch (error) {\n                                    reject(error);\n                                }\n                            },\n                            error: function (xhr, status, error) {\n                                reject(error);\n                            }\n                        });\n                    })];\n            });\n        });\n    };\n    return ImportsTable;\n}(_TableBase__WEBPACK_IMPORTED_MODULE_0__.Table));\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Table/ImportsTable.ts?");

/***/ }),

/***/ "./public/TypeScript/Table/PowerTable.ts":
/*!***********************************************!*\
  !*** ./public/TypeScript/Table/PowerTable.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PowerTable: () => (/* binding */ PowerTable)\n/* harmony export */ });\n/* harmony import */ var _TableBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableBase */ \"./public/TypeScript/Table/TableBase.ts\");\n/* harmony import */ var _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils/TableHeader */ \"./public/TypeScript/Table/Utils/TableHeader.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\nvar PowerTable = /** @class */ (function (_super) {\n    __extends(PowerTable, _super);\n    function PowerTable(tableId, productionTable, disableOnChange) {\n        if (disableOnChange === void 0) { disableOnChange = false; }\n        var _this = _super.call(this, tableId, disableOnChange) || this;\n        _this.productionTable = productionTable;\n        var options;\n        // the last min 1 row\n        var select = $('#power tbody tr');\n        select = $(select[select.length - 2]).find('td select');\n        if (select.length > 0) {\n            // @ts-ignore\n            options = select.find('option').map(function (index, option) {\n                // check if it is disabled\n                var disabled = option.disabled ? true : false;\n                return {\n                    value: option.value,\n                    display: option.text,\n                    disabled: disabled\n                };\n            }).get();\n        }\n        else {\n            options = {};\n        }\n        _this.tableHeaders = [\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Name', 'select', false, options, 'power_building_id[]'),\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Amount', 'number', false, {}, 'power_amount[]', '1', 0),\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Clock Speed', 'number', false, {}, 'power_clock_speed[]', '100', 1, 250),\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Consumption', 'number', true, {}, 'power_Consumption[]'),\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('user', 'hidden', true, {}, 'user[]', '1'),\n        ];\n        _this.ReadRows();\n        // get last row becouse it is not in the tableRows array\n        _this.Footer = $(\"#\".concat(_this.tableId, \" tbody tr:last\"));\n        _this.deleteRow(_this.tableRows.length - 1);\n        return _this;\n    }\n    PowerTable.prototype.renderTable = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                _super.prototype.renderTable.call(this, this.Footer);\n                return [2 /*return*/];\n            });\n        });\n    };\n    PowerTable.prototype.handleChange = function (event) {\n        return __awaiter(this, void 0, void 0, function () {\n            var $target, $row;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Get new changes\n                    return [4 /*yield*/, this.ReadRows()];\n                    case 1:\n                        // Get new changes\n                        _a.sent();\n                        this.deleteRow(this.tableRows.length - 1);\n                        $target = $(event.target);\n                        $row = $($target).closest('tr');\n                        if (!(this.checkIfSecondLastRow($row) && this.checkIfSelect($target))) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.addRow()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.calculatePowerUsage()];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PowerTable.prototype.checkIfSecondLastRow = function (element) {\n        var $row = $(element).closest('tr');\n        return $row.is($(\"#\".concat(this.tableId, \" tbody tr:nth-last-child(2)\")));\n    };\n    PowerTable.prototype.calculatePowerUsage = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.productionTable.deleteRow(this.productionTable.tableRows.length - 1);\n                        this.deleteNonUserRows();\n                        promises = this.productionTable.tableRows.map(function (row) { return __awaiter(_this, void 0, void 0, function () {\n                            var recipe, building, buildingAmount, existingRow, currentValue, additionalAmount, Amount;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, this.getRecipe(+row.cells[0])];\n                                    case 1:\n                                        recipe = _a.sent();\n                                        return [4 /*yield*/, this.getBuilding(recipe['buildings_id'])];\n                                    case 2:\n                                        building = _a.sent();\n                                        buildingAmount = this.calculateBuildingAmount(+row.cells[1], +recipe['export_amount_per_min']);\n                                        existingRow = this.checkIfBuildingAlreadyExists(building['id']);\n                                        // if the building already exists, add the amount to the existing row\n                                        if (existingRow !== false) {\n                                            currentValue = Number(this.tableRows[existingRow].cells[1]) || 0;\n                                            additionalAmount = Number(buildingAmount.amount) || 0;\n                                            Amount = (currentValue + additionalAmount).toString();\n                                            this.tableRows[existingRow].cells[1] = Amount;\n                                            this.tableRows[existingRow].cells[3] = this.calculateConsumption(+Amount, 100, building['power_used']).toString();\n                                            // if there is a remainder, add a new row with the remainder\n                                            if (buildingAmount.remainder > 0) {\n                                                this.addRemainderRow(buildingAmount, building);\n                                            }\n                                            return [2 /*return*/];\n                                        }\n                                        // Add new row with building details\n                                        if (buildingAmount.amount > 0) {\n                                            this.addRowBegin();\n                                            this.tableRows[0].cells = [\n                                                building['id'],\n                                                buildingAmount.amount,\n                                                100,\n                                                this.calculateConsumption(buildingAmount.amount, 100, building['power_used']),\n                                                0\n                                            ];\n                                        }\n                                        if (buildingAmount.remainder > 0) {\n                                            this.addRemainderRow(buildingAmount, building);\n                                        }\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        return [4 /*yield*/, this.calculateUserRows()];\n                    case 1:\n                        _a.sent();\n                        // Wait for all promises to resolve\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 2:\n                        // Wait for all promises to resolve\n                        _a.sent();\n                        return [4 /*yield*/, this.applyTotalConsumption()];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.flipOrderOfNonUserRows()];\n                    case 4:\n                        _a.sent();\n                        this.renderTable();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PowerTable.prototype.calculateBuildingAmount = function (QuantityPerMin, ExportAmountPerMin) {\n        var amount = QuantityPerMin / ExportAmountPerMin;\n        // if the amount is not a whole number, round it up and give back a extra clockspeed to compensate\n        if (amount % 1 != 0) {\n            return { amount: Math.floor(amount), remainder: amount % 1 };\n        }\n        return { amount: amount, remainder: 0 };\n    };\n    // returns the index row of the building if it already exists\n    PowerTable.prototype.checkIfBuildingAlreadyExists = function (buildingId) {\n        for (var i = 0; i < this.tableRows.length; i++) {\n            if (this.tableRows[i].cells[0] == buildingId.toString() && this.tableRows[i].cells[4] == '0' && this.tableRows[i].cells[2] == '100') {\n                return i;\n            }\n        }\n        return false;\n    };\n    PowerTable.prototype.addRemainderRow = function (buildingAmount, building) {\n        var clockSpeed = +(100 * buildingAmount.remainder).toFixed(3);\n        clockSpeed = clockSpeed * 1;\n        this.addRowBegin();\n        this.tableRows[0].cells = [\n            building['id'],\n            1,\n            clockSpeed,\n            this.calculateConsumption(1, clockSpeed, building['power_used']),\n            0\n        ];\n    };\n    PowerTable.prototype.calculateConsumption = function (amount, ClockSpeed, Consumption) {\n        return amount * Consumption * (ClockSpeed / 100);\n    };\n    PowerTable.prototype.calculateTotalConsumption = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var totalConsumption, i;\n            return __generator(this, function (_a) {\n                totalConsumption = 0;\n                for (i = 0; i < this.tableRows.length; i++) {\n                    totalConsumption += +this.tableRows[i].cells[3];\n                }\n                return [2 /*return*/, totalConsumption];\n            });\n        });\n    };\n    PowerTable.prototype.applyTotalConsumption = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var totalConsumption;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.calculateTotalConsumption()];\n                    case 1:\n                        totalConsumption = _a.sent();\n                        this.Footer.find('input').attr('value', totalConsumption.toString());\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PowerTable.prototype.deleteNonUserRows = function () {\n        for (var i = 0; i < this.tableRows.length; i++) {\n            if (this.tableRows[i].cells[4] != '1') {\n                this.deleteRow(i);\n                i--;\n            }\n        }\n    };\n    PowerTable.prototype.flipOrderOfNonUserRows = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var i;\n            return __generator(this, function (_a) {\n                for (i = 0; i < this.tableRows.length; i++) {\n                    if (this.tableRows[i].cells[4] != '1') {\n                        this.addRowBegin();\n                        this.tableRows[0] = this.tableRows[i + 1];\n                        this.deleteRow(i + 1);\n                    }\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    PowerTable.prototype.calculateUserRows = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var i, building;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < this.tableRows.length)) return [3 /*break*/, 4];\n                        if (!(this.tableRows[i].cells[4] == '1')) return [3 /*break*/, 3];\n                        if (!this.tableRows[i].cells[0]) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.getBuilding(this.tableRows[i].cells[0])];\n                    case 2:\n                        building = _a.sent();\n                        this.tableRows[i].cells[3] = this.calculateConsumption(+this.tableRows[i].cells[1], +this.tableRows[i].cells[2], building['power_used']).toString();\n                        _a.label = 3;\n                    case 3:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return PowerTable;\n}(_TableBase__WEBPACK_IMPORTED_MODULE_0__.Table));\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Table/PowerTable.ts?");

/***/ }),

/***/ "./public/TypeScript/Table/ProductionTable.ts":
/*!****************************************************!*\
  !*** ./public/TypeScript/Table/ProductionTable.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProductionTable: () => (/* binding */ ProductionTable)\n/* harmony export */ });\n/* harmony import */ var _TableBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TableBase */ \"./public/TypeScript/Table/TableBase.ts\");\n/* harmony import */ var _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils/TableHeader */ \"./public/TypeScript/Table/Utils/TableHeader.ts\");\n/* harmony import */ var _PowerTable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PowerTable */ \"./public/TypeScript/Table/PowerTable.ts\");\n/* harmony import */ var _ImportsTable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ImportsTable */ \"./public/TypeScript/Table/ImportsTable.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\nvar ProductionTable = /** @class */ (function (_super) {\n    __extends(ProductionTable, _super);\n    function ProductionTable(tableId, disableOnChange) {\n        if (disableOnChange === void 0) { disableOnChange = false; }\n        var _this = _super.call(this, tableId, disableOnChange) || this;\n        var options;\n        var select = $('#recipes tbody tr:last td select');\n        if (select.length > 0) {\n            // @ts-ignore\n            options = select.find('option').map(function (index, option) {\n                // check if it is disabled\n                var disabled = option.disabled ? true : false;\n                return {\n                    value: option.value,\n                    display: option.text,\n                    disabled: disabled\n                };\n            }).get();\n        }\n        else {\n            options = {};\n        }\n        _this.tableHeaders = [\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Recipe', 'select', false, options, 'production_recipe_id[]'),\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Quantity Per/min', 'number', false, {}, 'production_quantity[]', '1', 0),\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Product', 'text', true),\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Usage Per/min', 'number', true, {}, 'production_usage[]', '0', 0),\n            new _Utils_TableHeader__WEBPACK_IMPORTED_MODULE_1__.TableHeader('Export Per/min', 'number', true, {}, 'production_export[]', '0', 0),\n        ];\n        _this.ReadRows();\n        return _this;\n    }\n    ProductionTable.prototype.handleChange = function (event) {\n        return __awaiter(this, void 0, void 0, function () {\n            var $target, $row, importsTable, powerTable;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Get new changes\n                    return [4 /*yield*/, this.ReadRows()];\n                    case 1:\n                        // Get new changes\n                        _a.sent();\n                        $target = $(event.target);\n                        $row = $($target).closest('tr');\n                        if (!(this.checkIfLastRow($row) && this.checkIfSelect($($target)))) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.addRow()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.calculateExport()];\n                    case 4:\n                        _a.sent();\n                        this.renderTable();\n                        importsTable = new _ImportsTable__WEBPACK_IMPORTED_MODULE_3__.ImportsTable('imports', this, true, true);\n                        powerTable = new _PowerTable__WEBPACK_IMPORTED_MODULE_2__.PowerTable('power', this, true);\n                        Promise.all([\n                            importsTable.calculateImport(),\n                            powerTable.calculatePowerUsage()\n                        ]);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ProductionTable.prototype.calculateExport = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var recipesPromises, recipes, i, row, quantityPerMin, usagePerMin, exportPerMin, recipe;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        recipesPromises = this.tableRows.slice(0, -1).map(function (row) { return _this.getRecipe(+row.cells[0]); });\n                        return [4 /*yield*/, Promise.all(recipesPromises)];\n                    case 1:\n                        recipes = _a.sent();\n                        for (i = 0; i < this.tableRows.length - 1; i++) {\n                            row = this.tableRows[i];\n                            quantityPerMin = +row.cells[1];\n                            usagePerMin = +row.cells[3];\n                            exportPerMin = quantityPerMin - usagePerMin;\n                            if (quantityPerMin < usagePerMin) {\n                                row.cells[3] = quantityPerMin.toString();\n                                continue;\n                            }\n                            // Validate input numbers and correct if needed\n                            if (!this.checkIfNumbersAreValid(quantityPerMin, usagePerMin, exportPerMin)) {\n                                this.correctInvalidNumbers(row, quantityPerMin, usagePerMin, exportPerMin);\n                                continue;\n                            }\n                            recipe = recipes[i];\n                            row.cells[2] = (recipe === null || recipe === void 0 ? void 0 : recipe.itemName) || '';\n                            // Handle double export logic\n                            if (recipe.export_amount_per_min2 != null) {\n                                this.handleDoubleExport(row, recipe, quantityPerMin);\n                            }\n                            else if (row.doubleExport) {\n                                row.extraCells = [];\n                                row.doubleExport = false;\n                            }\n                            row.cells[4] = exportPerMin.toString();\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ProductionTable.prototype.correctInvalidNumbers = function (row, quantityPerMin, usagePerMin, exportPerMin) {\n        if (quantityPerMin < 0)\n            row.cells[1] = '0';\n        if (usagePerMin < 0)\n            row.cells[3] = '0';\n        if (exportPerMin < 0)\n            row.cells[4] = '0';\n    };\n    ProductionTable.prototype.handleDoubleExport = function (row, recipe, quantityPerMin) {\n        var firstExportPerMin = +recipe.export_amount_per_min;\n        var secondExportPerMin = +recipe.export_amount_per_min2;\n        var secondExportPerMinMultiplier = secondExportPerMin / firstExportPerMin;\n        if (row.doubleExport) {\n            var originalSecondExportPerMin = quantityPerMin * secondExportPerMinMultiplier;\n            var secondExportPerMinValue = quantityPerMin * secondExportPerMinMultiplier - +row.extraCells[1];\n            row.extraCells[0] = recipe.secondItemName;\n            this.updateDoubleExport(row, quantityPerMin, row.extraCells[1], secondExportPerMinValue);\n            if (secondExportPerMinValue < +row.extraCells[1]) {\n                row.extraCells[1] = originalSecondExportPerMin.toString();\n            }\n        }\n        else {\n            var secondExportPerMinValue = quantityPerMin * secondExportPerMinMultiplier;\n            row.extraCells = [recipe.secondItemName, '0', secondExportPerMinValue.toString()];\n            row.doubleExport = true;\n        }\n    };\n    ProductionTable.prototype.updateDoubleExport = function (row, quantityPerMin, extraUsagePerMin, secondExportPerMin) {\n        if (!this.checkIfNumbersAreValid(quantityPerMin, +extraUsagePerMin, secondExportPerMin)) {\n            if (quantityPerMin < 0)\n                row.cells[1] = '0';\n            if (+extraUsagePerMin < 0)\n                row.extraCells[1] = '0';\n            if (secondExportPerMin < 0)\n                row.extraCells[2] = '0';\n        }\n        else {\n            row.extraCells[2] = secondExportPerMin.toString();\n        }\n    };\n    ProductionTable.prototype.checkIfNumbersAreValid = function (quantityPerMin, usagePerMin, exportPerMin) {\n        if (quantityPerMin < 0 || usagePerMin < 0 || exportPerMin < 0) {\n            return false;\n        }\n        if (quantityPerMin < usagePerMin || usagePerMin > quantityPerMin) {\n            return false;\n        }\n        return true;\n    };\n    ProductionTable.prototype.SetProduct = function () {\n        console.error('SetProduct not implemented');\n    };\n    return ProductionTable;\n}(_TableBase__WEBPACK_IMPORTED_MODULE_0__.Table));\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Table/ProductionTable.ts?");

/***/ }),

/***/ "./public/TypeScript/Table/TableBase.ts":
/*!**********************************************!*\
  !*** ./public/TypeScript/Table/TableBase.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Table: () => (/* binding */ Table)\n/* harmony export */ });\n/* harmony import */ var _Utils_TableRow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils/TableRow */ \"./public/TypeScript/Table/Utils/TableRow.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\nvar Table = /** @class */ (function () {\n    function Table(tableId, disableChangeEventListeners) {\n        if (disableChangeEventListeners === void 0) { disableChangeEventListeners = false; }\n        this.tableId = '';\n        this.tableHeaders = [];\n        this.tableRows = [];\n        this.tableId = tableId;\n        if (!disableChangeEventListeners) {\n            this.attachChangeEventListeners();\n        }\n    }\n    Table.prototype.consoleLog = function () {\n        console.log(this);\n    };\n    Table.prototype.addRow = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tableRow, i;\n            return __generator(this, function (_a) {\n                tableRow = new _Utils_TableRow__WEBPACK_IMPORTED_MODULE_0__.TableRow();\n                for (i = 0; i < this.tableHeaders.length; i++) {\n                    tableRow.cells.push(this.tableHeaders[i].default);\n                }\n                this.tableRows.push(tableRow);\n                return [2 /*return*/];\n            });\n        });\n    };\n    Table.prototype.addRowBegin = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tableRow, i;\n            return __generator(this, function (_a) {\n                tableRow = new _Utils_TableRow__WEBPACK_IMPORTED_MODULE_0__.TableRow();\n                for (i = 0; i < this.tableHeaders.length; i++) {\n                    tableRow.cells.unshift(this.tableHeaders[i].default);\n                }\n                this.tableRows.unshift(tableRow);\n                return [2 /*return*/];\n            });\n        });\n    };\n    Table.prototype.addRowAfter = function (index) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tableRow, i;\n            return __generator(this, function (_a) {\n                tableRow = new _Utils_TableRow__WEBPACK_IMPORTED_MODULE_0__.TableRow();\n                for (i = 0; i < this.tableHeaders.length; i++) {\n                    tableRow.cells.push(this.tableHeaders[i].default);\n                }\n                this.tableRows.splice(index + 1, 0, tableRow);\n                return [2 /*return*/];\n            });\n        });\n    };\n    Table.prototype.swapRows = function (index1, index2) {\n        var temp = this.tableRows[index1];\n        this.tableRows[index1] = this.tableRows[index2];\n        this.tableRows[index2] = temp;\n    };\n    Table.prototype.updateRow = function (row, index) {\n        this.tableRows[index] = row;\n    };\n    Table.prototype.deleteRow = function (index) {\n        this.tableRows.splice(index, 1);\n    };\n    Table.prototype.deleteAllRows = function () {\n        this.tableRows = [];\n    };\n    Table.prototype.ReadRows = function () {\n        return __awaiter(this, arguments, void 0, function (skipLastRows) {\n            var $table, $rows, _loop_1, this_1, out_i_1, i;\n            if (skipLastRows === void 0) { skipLastRows = 0; }\n            return __generator(this, function (_a) {\n                $table = $(\"#\".concat(this.tableId));\n                if ($table == null) {\n                    return [2 /*return*/];\n                }\n                $rows = $table.find('tbody tr');\n                if ($rows.length == 0) {\n                    console.error('No rows found in table');\n                    return [2 /*return*/];\n                }\n                this.tableRows = [];\n                _loop_1 = function (i) {\n                    var doubleExport = false;\n                    // Check if the next row has the class extra-output, which indicates a double export\n                    if (i + 1 < $rows.length && $rows[i + 1].classList.contains('extra-output')) {\n                        doubleExport = true;\n                    }\n                    var row = new _Utils_TableRow__WEBPACK_IMPORTED_MODULE_0__.TableRow(doubleExport);\n                    var $cells = $($rows[i]).find('td');\n                    var $otherCells = void 0;\n                    // Push the cells to the class\n                    $cells.each(function (index, cell) {\n                        var $cell = $(cell);\n                        var inputValue = $cell.find('input').val();\n                        var selectValue = $cell.find('select').val();\n                        // Determine whether to use the input or select value\n                        var value = inputValue !== undefined ? inputValue : selectValue;\n                        row.cells.push(value);\n                    });\n                    // If the row has a double export, read the next row as well\n                    if (doubleExport) {\n                        $otherCells = $($rows[i + 1]).find('td');\n                        // Push the extra cells to the class\n                        $otherCells.each(function (index, cell) {\n                            var $cell = $(cell);\n                            var inputValue = $cell.find('input').val();\n                            var selectValue = $cell.find('select').val();\n                            // Determine whether to use the input or select value\n                            var value = inputValue !== undefined ? inputValue : selectValue;\n                            row.extraCells.push(value);\n                        });\n                        i++; // Skip the next row as it has been processed\n                    }\n                    this_1.tableRows.push(row);\n                    out_i_1 = i;\n                };\n                this_1 = this;\n                // Assuming that TableRow and other required classes/variables are defined\n                for (i = 0; i <= $rows.length - 1; i++) {\n                    _loop_1(i);\n                    i = out_i_1;\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    Table.prototype.renderTable = function (footer) {\n        if (footer === void 0) { footer = false; }\n        // create a tablebody element\n        var table = '';\n        // loop through the rows\n        for (var i = 0; i < this.tableRows.length; i++) {\n            var row = this.tableRows[i];\n            var extraRow = '';\n            table += '<tr>';\n            for (var j = 0; j < row.cells.length; j++) {\n                var header = this.tableHeaders[j];\n                var readOnly = header.ReadOnly ? 'readonly' : '';\n                var min = header.min >= 0 ? 'min=\"' + header.min + '\"' : '';\n                var max = header.max > 0 ? 'max=\"' + header.max + '\"' : '';\n                var step = header.InputType === 'number' ? 'step=\"any\"' : '';\n                var rowspan = '';\n                var height = '';\n                if (row.doubleExport && j < 2) {\n                    rowspan = 'rowspan=\"2\"';\n                    height = 'style=\"height: 78px\"';\n                }\n                if (header.InputType === 'select') {\n                    table += '<td class=\"m-0 p-0\" ' + rowspan + '><select class=\"form-control rounded-0\" ' + readOnly + ' name=\"' + header.InputName + '\" ' + height + ' ' + min + ' ' + max + '>';\n                    for (var key in header.Options) {\n                        var selected = header.Options[key].value == row.cells[j] ? 'selected' : '';\n                        var disabled = header.Options[key].disabled ? 'disabled' : '';\n                        // If it is the last row and the value is 0, select it\n                        if (i == this.tableRows.length - 1 && key == '0') {\n                            selected = 'selected';\n                        }\n                        table += '<option value=\"' + header.Options[key].value + '\" ' + selected + ' ' + disabled + '>' + header.Options[key].display + '</option>';\n                    }\n                    table += '</select></td>';\n                }\n                else {\n                    table += '<td class=\"m-0 p-0\" ' + rowspan + '><input type=\"' + this.tableHeaders[j].InputType + '\" value=\"' + row.cells[j] + '\" class=\"form-control rounded-0\" ' + readOnly + ' name=\"' + header.InputName + '\" ' + height + ' ' + min + ' ' + max + ' ' + step + '></td>';\n                }\n            }\n            table += '</tr>';\n            row = this.tableRows[i];\n            if (row.doubleExport) {\n                extraRow = '<tr class=\"extra-output\">';\n                for (var j = 0; j < row.extraCells.length; j++) {\n                    var header = this.tableHeaders[j + 2];\n                    var readOnly = header.ReadOnly ? 'readonly' : '';\n                    var min = header.min > 0 ? 'min=\"' + header.min + '\"' : '';\n                    var max = header.max > 0 ? 'max=\"' + header.max + '\"' : '';\n                    var step = header.InputType === 'number' ? 'step=\"any\"' : '';\n                    // split header input name on [ then add 2 infront of the second part\n                    var name_1 = header.InputName;\n                    name_1 = name_1.replace('[', '2[');\n                    extraRow += '<td class=\"m-0 p-0\" ><input type=\"' + header.InputType + '\" value=\"' + row.extraCells[j] + '\" class=\"form-control rounded-0\" ' + readOnly + ' name=\"' + name_1 + '\" ' + step + ' ' + min + ' ' + max + '></td>';\n                }\n                extraRow += '</tr>';\n            }\n            table += extraRow;\n        }\n        if (footer) {\n            table += footer.html();\n        }\n        $('#' + this.tableId).find('tbody').html(table);\n        this.attachChangeEventListeners();\n    };\n    Table.prototype.attachChangeEventListeners = function () {\n        var table = document.getElementById(this.tableId);\n        if (!table) {\n            console.error(\"Table with ID \".concat(this.tableId, \" not found.\"));\n            return;\n        }\n        // Attach event listeners to inputs and selects within the table\n        var inputs = table.getElementsByTagName('input');\n        var selects = table.getElementsByTagName('select');\n        for (var i = 0; i < inputs.length; i++) {\n            inputs[i].addEventListener('change', this.handleChange.bind(this));\n        }\n        for (var i = 0; i < selects.length; i++) {\n            selects[i].addEventListener('change', this.handleChange.bind(this));\n        }\n    };\n    Table.prototype.handleChange = function (event) {\n        // Default implementation, can be overridden by subclasses\n        console.log('Table element changed:', event);\n    };\n    Table.prototype.checkIfLastRow = function (element) {\n        return element.is(':last-child');\n    };\n    Table.prototype.checkIfSelect = function (element) {\n        return element.is('select');\n    };\n    Table.prototype.checkIfInputNumber = function (element) {\n        return element.is('input[type=\"number\"]');\n    };\n    Table.prototype.getRecipe = function (recipe_id) {\n        return new Promise(function (resolve, reject) {\n            $.ajax({\n                type: 'GET',\n                url: 'getRecipe',\n                data: {\n                    id: recipe_id\n                },\n                success: function (response) {\n                    try {\n                        // Parse the JSON response\n                        resolve(JSON.parse(response));\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                },\n                error: function (xhr, status, error) {\n                    reject(error);\n                }\n            });\n        });\n    };\n    Table.prototype.getBuilding = function (building_id) {\n        return new Promise(function (resolve, reject) {\n            $.ajax({\n                type: 'GET',\n                url: 'getBuilding',\n                data: {\n                    id: parseInt(building_id)\n                },\n                success: function (response) {\n                    try {\n                        // Parse the JSON response\n                        resolve(JSON.parse(response));\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                },\n                error: function (xhr, status, error) {\n                    reject(error);\n                }\n            });\n        });\n    };\n    return Table;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Table/TableBase.ts?");

/***/ }),

/***/ "./public/TypeScript/Table/Utils/TableHeader.ts":
/*!******************************************************!*\
  !*** ./public/TypeScript/Table/Utils/TableHeader.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableHeader: () => (/* binding */ TableHeader)\n/* harmony export */ });\nvar TableHeader = /** @class */ (function () {\n    function TableHeader(name, inputType, readOnly, options, inputName, defaultVal, min, max) {\n        if (readOnly === void 0) { readOnly = false; }\n        if (options === void 0) { options = {}; }\n        if (inputName === void 0) { inputName = ''; }\n        if (defaultVal === void 0) { defaultVal = ''; }\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 0; }\n        this.class = '';\n        this.Name = '';\n        this.InputType = '';\n        this.ReadOnly = false;\n        this.Options = {};\n        this.InputName = '';\n        this.default = '';\n        this.min = 0;\n        this.max = 0;\n        this.Name = name;\n        this.InputType = inputType;\n        this.ReadOnly = readOnly;\n        this.Options = options;\n        this.InputName = inputName;\n        this.default = defaultVal;\n        this.min = min;\n        this.max = max;\n    }\n    return TableHeader;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Table/Utils/TableHeader.ts?");

/***/ }),

/***/ "./public/TypeScript/Table/Utils/TableRow.ts":
/*!***************************************************!*\
  !*** ./public/TypeScript/Table/Utils/TableRow.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableRow: () => (/* binding */ TableRow)\n/* harmony export */ });\nvar TableRow = /** @class */ (function () {\n    function TableRow(doubleExport) {\n        if (doubleExport === void 0) { doubleExport = false; }\n        this.class = '';\n        this.doubleExport = false;\n        this.cells = [];\n        this.extraCells = [];\n        this.doubleExport = doubleExport;\n    }\n    return TableRow;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Table/Utils/TableRow.ts?");

/***/ }),

/***/ "./public/TypeScript/index.ts":
/*!************************************!*\
  !*** ./public/TypeScript/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Table_ProductionTable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Table/ProductionTable */ \"./public/TypeScript/Table/ProductionTable.ts\");\n\nvar productionTable = new _Table_ProductionTable__WEBPACK_IMPORTED_MODULE_0__.ProductionTable('recipes', true);\nproductionTable.consoleLog();\nproductionTable.renderTable();\n// let powerTable = new PowerTable('power', true);\n//\n// powerTable.consoleLog();\n// powerTable.renderTable();\n//\n// let importsTable = new ImportsTable('imports', true);\n//\n// importsTable.consoleLog();\n// importsTable.renderTable();\n\n\n//# sourceURL=webpack:///./public/TypeScript/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./public/TypeScript/index.ts");
/******/ 	
/******/ })()
;