!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.powerProduction=t():e.powerProduction=t()}(this,(()=>(()=>{"use strict";var e;!function(e){e.Add="add",e.Delete="delete",e.Update="update",e.Calculate="calculate"}(e||(e={}));class t{powerProduction;newInput;constructor(){this.powerProduction=$("#powerProduction"),this.newInput=$("#powerProductionCardNew")}async addNewPowerPlant(t){const n=this.newInput.find("#building option:selected").text(),o=this.newInput.find("#amount").val()||"1",r=this.newInput.find("#clock_speed").val()||"100";if(!this.validateAndHandleInput(n,o,r))return;const a=this.newCard(),d=await this.applyToDatabase(e.Add,t);if(d.hasOwnProperty("error"))return void console.error(d.error);this.powerProduction.find("#noPowerBuildings").length>0&&this.powerProduction.find("#noPowerBuildings").remove();const i=`powerProductionCard${d.powerProductionId}`;a.attr("id",i),a.find(".col-5 h6").text(n),a.find("#amount").val(o.toString()),a.find("#clock_speed").val(r),this.applyEventListenersToCard(a),this.powerProduction.append(a),this.resetAddCard(),this.calculatePowerProduction()}async deletePowerPlant(t){const n=await this.applyToDatabase(e.Delete,t);n.hasOwnProperty("error")?console.error(n.error):($(t).closest(".card").remove(),0===this.powerProduction.find(".card").length&&this.powerProduction.append('<div class="alert alert-warning text-center" id="noPowerBuildings" role="alert">\n                                Oh no! You don\'t have any power production buildings yet. Add some down below.\n                            </div>'),this.calculatePowerProduction())}async updatePowerPlant(t){const n=await this.applyToDatabase(e.Update,t);n.hasOwnProperty("error")?console.error(n.error):this.calculatePowerProduction()}async calculatePowerProduction(){const t=await this.applyToDatabase(e.Calculate,document.createElement("div"));if(t.hasOwnProperty("error"))return void console.error(t.error);const n=t.totalPowerProduction;updatePowerProduction(n)}applyEventListenersToCard(e){const t=e.find(".deletePowerProduction"),n=e.find("input");t.length>0&&t.on("click",(e=>{this.deletePowerPlant(e.currentTarget)})),n.length>0&&n.on("change",(e=>{this.updatePowerPlant(e.currentTarget)}))}applyEventListeners(){const e=this.newInput.find("button"),t=this.powerProduction.find(".deletePowerProduction"),n=this.powerProduction.find("input");e&&e.on("click",(e=>{this.addNewPowerPlant(e.currentTarget)})),t&&t.on("click",(e=>{this.deletePowerPlant(e.currentTarget)})),n&&n.on("change",(e=>{this.updatePowerPlant(e.currentTarget)}))}checkAndHandleNoPowerPlants(){0===this.powerProduction.find(".card").length&&this.powerProduction.append("<h6>No power plants added yet</h6>")}newCard(){const e=document.createElement("div");e.className="card mb-2";const t=document.createElement("div");return t.className="card-body p-2 row d-flex justify-content-between align-items-center",t.innerHTML='\n        <div class="col-5 col-lg-6 ps-3 pe-1">\n            <h6 class="m-0"></h6>\n        </div>\n        <div class="col-2 px-1">\n            <input type="number" class="form-control" id="amount" name="amount"\n                   min="1" max="1000">\n        </div>\n        <div class="col-2 px-1">\n            <input type="number" class="form-control" id="clock_speed"\n                   name="clock_speed" min="1" max="250" step="any">\n        </div>\n        <div class="col-3 col-lg-2 text-end ps-1 pe-3">\n            <button type="button" class="btn btn-danger deletePowerProduction">\n            Delete\n            </button>\n        </div>\n    ',e.appendChild(t),$(e)}resetAddCard(){this.newInput.find("#amount").val("1"),this.newInput.find("#clock_speed").val("100"),this.newInput.find("select").prop("selectedIndex",0)}validateAndHandleInput(e,t,n){const o=e=>this.newInput.find(e).addClass("is-invalid"),r=e=>this.newInput.find(e).removeClass("is-invalid");let a=!1;r("#building"),r("#amount"),r("#clock_speed"),e&&"Select a building"!==e||(o("#building"),a=!0);const d=parseFloat(Array.isArray(t)?t[0]:t.toString());(isNaN(d)||d<1||d>1e3)&&(o("#amount"),a=!0);const i=parseFloat(Array.isArray(n)?n[0]:n.toString());return(isNaN(i)||i<1||i>250)&&(o("#clock_speed"),a=!0),!a}static _getCsrfToken(){const e=$('meta[name="csrf-token"]');if(0===e.length||void 0===e.attr("content"))throw new Error("CSRF token not found");return e.attr("content")}async applyToDatabase(n,o){const r=$(o).closest(".card"),a=(r.attr("id")||"").replace("powerProductionCard",""),d=new URL(window.location.href).searchParams.get("id");switch(n){case e.Add:const n=r.find("#building").val(),o=r.find("#amount").val(),i=r.find("#clock_speed").val();return new Promise((function(e,r){$.ajax({url:"powerProduction/add",type:"POST",dataType:"json",headers:{"X-CSRF-Token":t._getCsrfToken()},data:{gameSaveId:d,buildingId:n,amount:o,clockSpeed:i},success:function(t){e(t)}})}));case e.Delete:return new Promise((function(e,n){$.ajax({url:"powerProduction/delete",type:"POST",dataType:"json",headers:{"X-CSRF-Token":t._getCsrfToken()},data:{gameSaveId:d,powerProductionId:a},success:function(t){e(t)}})}));case e.Update:const c=r.find("#amount").val(),s=r.find("#clock_speed").val();return new Promise((function(e,n){$.ajax({url:"powerProduction/update",type:"POST",dataType:"json",headers:{"X-CSRF-Token":t._getCsrfToken()},data:{gameSaveId:d,powerProductionId:a,amount:c,clockSpeed:s},success:function(t){e(t)}})}));case e.Calculate:return new Promise((function(e,n){$.ajax({url:"powerProduction/calculate",type:"POST",dataType:"json",headers:{"X-CSRF-Token":t._getCsrfToken()},data:{gameSaveId:d},success:function(t){e(t)}})}))}}}return(new t).applyEventListeners(),{}})()));