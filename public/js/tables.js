/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./public/TypeScript/Tables/Classes/Data/BuildingOptions.ts":
/*!******************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/BuildingOptions.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildingOptions: () => (/* binding */ buildingOptions)\n/* harmony export */ });\nvar buildingOptions = \"\\n  <option value=\\\"\\\" disabled>Select a building</option>\\n  <option value=\\\"16\\\">Assembler</option>\\n  <option value=\\\"17\\\">Blender</option>\\n  <option value=\\\"19\\\">Constructor</option>\\n  <option value=\\\"6\\\">Converter</option>\\n  <option value=\\\"13\\\">Foundry</option>\\n  <option value=\\\"21\\\">Main Portal</option>\\n  <option value=\\\"15\\\">Manufacturer</option>\\n  <option value=\\\"10\\\">Miner Mk.1</option>\\n  <option value=\\\"9\\\">Miner Mk.2</option>\\n  <option value=\\\"11\\\">Miner Mk.3</option>\\n  <option value=\\\"8\\\">Oil Extractor</option>\\n  <option value=\\\"14\\\">Packager</option>\\n  <option value=\\\"7\\\">Particle Accelerator</option>\\n  <option value=\\\"5\\\">Quantum Encoder</option>\\n  <option value=\\\"12\\\">Refinery</option>\\n  <option value=\\\"22\\\">Satellite Portal</option>\\n  <option value=\\\"18\\\">Smelter</option>\\n  <option value=\\\"4\\\">Water Extractor</option>\\n\";\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/BuildingOptions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts":
/*!*********************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtraProductionRow: () => (/* binding */ ExtraProductionRow)\n/* harmony export */ });\nvar ExtraProductionRow = /** @class */ (function () {\n    function ExtraProductionRow(Product, Usage, ExportPerMin, quantity) {\n        if (Product === void 0) { Product = \"\"; }\n        if (Usage === void 0) { Usage = 0; }\n        if (ExportPerMin === void 0) { ExportPerMin = 0; }\n        if (quantity === void 0) { quantity = 0; }\n        this.Product = Product;\n        this.Usage = Usage;\n        this.ExportPerMin = ExportPerMin;\n        this.Quantity = quantity;\n    }\n    return ExtraProductionRow;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts":
/*!******************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImportsTableRow: () => (/* binding */ ImportsTableRow)\n/* harmony export */ });\nvar ImportsTableRow = /** @class */ (function () {\n    function ImportsTableRow(itemId, quantity) {\n        if (itemId === void 0) { itemId = 0; }\n        if (quantity === void 0) { quantity = 0; }\n        this.itemId = itemId;\n        this.quantity = quantity;\n    }\n    return ImportsTableRow;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/ItemOptions.ts":
/*!**************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/ItemOptions.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ItemOptions: () => (/* binding */ ItemOptions)\n/* harmony export */ });\nvar ItemOptions = \"\\n<option value=\\\"\\\" disabled>Select an item</option>\\n<option value=\\\"111\\\">Actual Snow</option>\\n<option value=\\\"82\\\">Adaptive Control Unit</option>\\n<option value=\\\"48\\\">AI Expansion Server</option>\\n<option value=\\\"79\\\">AI Limiter</option>\\n<option value=\\\"45\\\">Alclad Aluminum Sheet</option>\\n<option value=\\\"102\\\">Alien DNA Capsule</option>\\n<option value=\\\"100\\\">Alien Protein</option>\\n<option value=\\\"72\\\">Alumina Solution</option>\\n<option value=\\\"71\\\">Aluminum Casing</option>\\n<option value=\\\"7\\\">Aluminum Ingot</option>\\n<option value=\\\"70\\\">Aluminum Scrap</option>\\n<option value=\\\"56\\\">Assembly Director System</option>\\n<option value=\\\"77\\\">Automated Wiring</option>\\n<option value=\\\"98\\\">Ballistic Warp Drive</option>\\n<option value=\\\"8\\\">Battery</option>\\n<option value=\\\"128\\\">Bauxite</option>\\n<option value=\\\"55\\\">Biochemical Sculptor</option>\\n<option value=\\\"137\\\">Biomass</option>\\n<option value=\\\"95\\\">Black Powder</option>\\n<option value=\\\"117\\\">Blue FICSMAS Ornament</option>\\n<option value=\\\"101\\\">Blue Power Slug</option>\\n<option value=\\\"20\\\">Cable</option>\\n<option value=\\\"110\\\">Candy Cane</option>\\n<option value=\\\"57\\\">Caterium Ingot</option>\\n<option value=\\\"129\\\">Caterium Ore</option>\\n<option value=\\\"59\\\">Circuit Board</option>\\n<option value=\\\"123\\\">Coal</option>\\n<option value=\\\"14\\\">Compacted Coal</option>\\n<option value=\\\"73\\\">Computer</option>\\n<option value=\\\"3\\\">Concrete</option>\\n<option value=\\\"37\\\">Cooling System</option>\\n<option value=\\\"113\\\">Copper FICSMAS Ornament</option>\\n<option value=\\\"69\\\">Copper Ingot</option>\\n<option value=\\\"130\\\">Copper Ore</option>\\n<option value=\\\"88\\\">Copper Powder</option>\\n<option value=\\\"26\\\">Copper Sheet</option>\\n<option value=\\\"134\\\">Crude Oil</option>\\n<option value=\\\"32\\\">Crystal Oscillator</option>\\n<option value=\\\"34\\\">Dark Matter Crystal</option>\\n<option value=\\\"41\\\">Dark Matter Residue</option>\\n<option value=\\\"44\\\">Diamonds</option>\\n<option value=\\\"93\\\">Dissolved Silica</option>\\n<option value=\\\"90\\\">Electromagnetic Control Rod</option>\\n<option value=\\\"58\\\">Empty Canister</option>\\n<option value=\\\"31\\\">Empty Fluid Tank</option>\\n<option value=\\\"61\\\">Encased Industrial Beam</option>\\n<option value=\\\"84\\\">Encased Plutonium Cell</option>\\n<option value=\\\"92\\\">Encased Uranium Cell</option>\\n<option value=\\\"43\\\">Excited Photonic Matter</option>\\n<option value=\\\"146\\\">Fabric</option>\\n<option value=\\\"54\\\">Ficsite Ingot</option>\\n<option value=\\\"38\\\">Ficsite Trigon</option>\\n<option value=\\\"112\\\">FICSMAS Bow</option>\\n<option value=\\\"109\\\">FICSMAS Decoration</option>\\n<option value=\\\"118\\\">FICSMAS Gift</option>\\n<option value=\\\"108\\\">FICSMAS Ornament Bundle</option>\\n<option value=\\\"115\\\">FICSMAS Tree Branch</option>\\n<option value=\\\"107\\\">FICSMAS Wonder Star</option>\\n<option value=\\\"96\\\">Ficsonium</option>\\n<option value=\\\"121\\\">Ficsonium Fuel Rod</option>\\n<option value=\\\"24\\\">Fuel</option>\\n<option value=\\\"52\\\">Fused Modular Frame</option>\\n<option value=\\\"99\\\">Gas Filter</option>\\n<option value=\\\"150\\\">Hatcher Remains</option>\\n<option value=\\\"89\\\">Heat Sink</option>\\n<option value=\\\"74\\\">Heavy Modular Frame</option>\\n<option value=\\\"64\\\">Heavy Oil Residue</option>\\n<option value=\\\"76\\\">High-Speed Connector</option>\\n<option value=\\\"147\\\">Hog Remains</option>\\n<option value=\\\"13\\\">Iodine-Infused Filter</option>\\n<option value=\\\"35\\\">Ionized Fuel</option>\\n<option value=\\\"114\\\">Iron FICSMAS Ornament</option>\\n<option value=\\\"21\\\">Iron Ingot</option>\\n<option value=\\\"122\\\">Iron Ore</option>\\n<option value=\\\"5\\\">Iron Plate</option>\\n<option value=\\\"18\\\">Iron Rod</option>\\n<option value=\\\"138\\\">Leaves</option>\\n<option value=\\\"132\\\">Limestone</option>\\n<option value=\\\"141\\\">Liquid Biofuel</option>\\n<option value=\\\"49\\\">Magnetic Field Generator</option>\\n<option value=\\\"103\\\">Mercer Sphere</option>\\n<option value=\\\"81\\\">Modular Engine</option>\\n<option value=\\\"27\\\">Modular Frame</option>\\n<option value=\\\"33\\\">Motor</option>\\n<option value=\\\"139\\\">Mycelia</option>\\n<option value=\\\"47\\\">Neural-Quantum Processor</option>\\n<option value=\\\"29\\\">Nitric Acid</option>\\n<option value=\\\"125\\\">Nitrogen Gas</option>\\n<option value=\\\"86\\\">Non-Fissile Uranium</option>\\n<option value=\\\"91\\\">Nuclear Pasta</option>\\n<option value=\\\"142\\\">Packaged Alumina Solution</option>\\n<option value=\\\"9\\\">Packaged Fuel</option>\\n<option value=\\\"15\\\">Packaged Heavy Oil Residue</option>\\n<option value=\\\"10\\\">Packaged Ionized Fuel</option>\\n<option value=\\\"136\\\">Packaged Liquid Biofuel</option>\\n<option value=\\\"144\\\">Packaged Nitric Acid</option>\\n<option value=\\\"143\\\">Packaged Nitrogen Gas</option>\\n<option value=\\\"17\\\">Packaged Oil</option>\\n<option value=\\\"11\\\">Packaged Rocket Fuel</option>\\n<option value=\\\"145\\\">Packaged Sulfuric Acid</option>\\n<option value=\\\"12\\\">Packaged Turbofuel</option>\\n<option value=\\\"68\\\">Packaged Water</option>\\n<option value=\\\"16\\\">Petroleum Coke</option>\\n<option value=\\\"60\\\">Plastic</option>\\n<option value=\\\"120\\\">Plutonium Fuel Rod</option>\\n<option value=\\\"85\\\">Plutonium Pellet</option>\\n<option value=\\\"2\\\">Plutonium Waste</option>\\n<option value=\\\"63\\\">Polymer Resin</option>\\n<option value=\\\"83\\\">Pressure Conversion Cube</option>\\n<option value=\\\"104\\\">Purple Power Slug</option>\\n<option value=\\\"65\\\">Quartz Crystal</option>\\n<option value=\\\"80\\\">Quickwire</option>\\n<option value=\\\"53\\\">Radio Control Unit</option>\\n<option value=\\\"131\\\">Raw Quartz</option>\\n<option value=\\\"42\\\">Reanimated SAM</option>\\n<option value=\\\"116\\\">Red FICSMAS Ornament</option>\\n<option value=\\\"22\\\">Reinforced Iron Plate</option>\\n<option value=\\\"25\\\">Rocket Fuel</option>\\n<option value=\\\"23\\\">Rotor</option>\\n<option value=\\\"62\\\">Rubber</option>\\n<option value=\\\"127\\\">SAM</option>\\n<option value=\\\"50\\\">SAM Fluctuator</option>\\n<option value=\\\"28\\\">Screw</option>\\n<option value=\\\"4\\\">Silica</option>\\n<option value=\\\"97\\\">Singularity Cell</option>\\n<option value=\\\"75\\\">Smart Plating</option>\\n<option value=\\\"106\\\">Smokeless Powder</option>\\n<option value=\\\"135\\\">Solid Biofuel</option>\\n<option value=\\\"148\\\">Spitter Remains</option>\\n<option value=\\\"78\\\">Stator</option>\\n<option value=\\\"6\\\">Steel Beam</option>\\n<option value=\\\"66\\\">Steel Ingot</option>\\n<option value=\\\"51\\\">Steel Pipe</option>\\n<option value=\\\"149\\\">Stinger Remains</option>\\n<option value=\\\"126\\\">Sulfur</option>\\n<option value=\\\"87\\\">Sulfuric Acid</option>\\n<option value=\\\"36\\\">Supercomputer</option>\\n<option value=\\\"46\\\">Superposition Oscillator</option>\\n<option value=\\\"94\\\">Thermal Propulsion Rocket</option>\\n<option value=\\\"40\\\">Time Crystal</option>\\n<option value=\\\"39\\\">Turbo Motor</option>\\n<option value=\\\"30\\\">Turbofuel</option>\\n<option value=\\\"133\\\">Uranium</option>\\n<option value=\\\"119\\\">Uranium Fuel Rod</option>\\n<option value=\\\"1\\\">Uranium Waste</option>\\n<option value=\\\"67\\\">Versatile Framework</option>\\n<option value=\\\"124\\\">Water</option>\\n<option value=\\\"19\\\">Wire</option>\\n<option value=\\\"140\\\">Wood</option>\\n<option value=\\\"105\\\">Yellow Power Slug</option>\\n\";\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/ItemOptions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts":
/*!****************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PowerTableRow: () => (/* binding */ PowerTableRow)\n/* harmony export */ });\n/* harmony import */ var _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Functions/Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n\nvar PowerTableRow = /** @class */ (function () {\n    function PowerTableRow(buildingId, quantity, clockSpeed, Consumption, userRow, getBuilding) {\n        if (buildingId === void 0) { buildingId = NaN; }\n        if (quantity === void 0) { quantity = 0; }\n        if (clockSpeed === void 0) { clockSpeed = 100; }\n        if (Consumption === void 0) { Consumption = 0; }\n        if (userRow === void 0) { userRow = true; }\n        if (getBuilding === void 0) { getBuilding = false; }\n        var _this = this;\n        this.buildingId = buildingId;\n        this.quantity = quantity;\n        this.clockSpeed = clockSpeed;\n        this.Consumption = Consumption;\n        this.userRow = userRow;\n        this.building = null;\n        if (getBuilding) {\n            _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.getBuilding(buildingId).then(function (b) { return _this.building = b; });\n        }\n    }\n    return PowerTableRow;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Data/ProductionTableRow.ts":
/*!*********************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Data/ProductionTableRow.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProductionTableRow: () => (/* binding */ ProductionTableRow)\n/* harmony export */ });\n/* harmony import */ var _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Functions/Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n/* harmony import */ var _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Functions/ProductionLineFunctions */ \"./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\nvar ProductionTableRow = /** @class */ (function () {\n    function ProductionTableRow(recipeId, quantity, product, Usage, exportPerMin, doubleExport, extraCells) {\n        if (recipeId === void 0) { recipeId = ''; }\n        if (quantity === void 0) { quantity = 0; }\n        if (product === void 0) { product = ''; }\n        if (Usage === void 0) { Usage = 0; }\n        if (exportPerMin === void 0) { exportPerMin = 0; }\n        if (doubleExport === void 0) { doubleExport = false; }\n        if (extraCells === void 0) { extraCells = null; }\n        var _this = this;\n        this.recipeId = +recipeId;\n        this.quantity = quantity;\n        this.product = product;\n        this.Usage = Usage;\n        this.exportPerMin = exportPerMin;\n        this.doubleExport = doubleExport;\n        this.extraCells = extraCells;\n        this.recipe = null;\n        this.getRecipe(recipeId).then(function (r) {\n            return _this.saveDoubleExportQuantity();\n        });\n    }\n    ProductionTableRow.prototype.getRecipe = function (recipeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, _Functions_Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.getRecipe(+recipeId)];\n                    case 1:\n                        _a.recipe = _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ProductionTableRow.prototype.saveDoubleExportQuantity = function () {\n        if (this.doubleExport && this.extraCells !== null) {\n            console.log(this);\n            this.extraCells.Quantity = _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_1__.ProductionLineFunctions.calculateSecondExportPerMin(this);\n            console.log(this.extraCells);\n        }\n    };\n    return ProductionTableRow;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Data/ProductionTableRow.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/Ajax.ts":
/*!************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/Ajax.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ajax: () => (/* binding */ Ajax)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar Ajax = /** @class */ (function () {\n    function Ajax() {\n    }\n    /**\n     * Get a recipe by its ID.\n     *\n     * @param recipe_id - The ID of the recipe to get.\n     */\n    Ajax.getRecipe = function (recipe_id) {\n        return new Promise(function (resolve, reject) {\n            $.ajax({\n                type: 'GET',\n                url: 'getRecipe',\n                data: {\n                    id: recipe_id\n                },\n                dataType: 'json',\n                success: function (response) {\n                    try {\n                        resolve(response);\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                },\n                error: function (xhr, status, error) {\n                    reject(error);\n                }\n            });\n        });\n    };\n    /**\n     * Get a building by its ID.\n     *\n     * @param building_id - The ID of the building to get.\n     */\n    Ajax.getBuilding = function (building_id) {\n        return new Promise(function (resolve, reject) {\n            $.ajax({\n                type: 'GET',\n                url: 'getBuilding',\n                data: {\n                    id: building_id\n                },\n                dataType: 'json',\n                success: function (response) {\n                    try {\n                        resolve(response);\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                },\n                error: function (xhr, status, error) {\n                    reject(error);\n                }\n            });\n        });\n    };\n    /**\n     * Save the production line data.\n     *\n     * @param data - The data to save.\n     * @param id - The ID of the production line.\n     * @returns The response from the server.\n     */\n    Ajax.saveData = function (data, id) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        $.ajax({\n                            type: 'POST',\n                            url: 'saveProductionLine',\n                            data: {\n                                data: JSON.stringify(data),\n                                id: id\n                            },\n                            success: function (response) {\n                                resolve(JSON.parse(response));\n                            },\n                            error: function (xhr, status, error) {\n                                reject(error);\n                            },\n                        });\n                    })];\n            });\n        });\n    };\n    return Ajax;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/Ajax.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts":
/*!**********************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HtmlGeneration: () => (/* binding */ HtmlGeneration)\n/* harmony export */ });\n/* harmony import */ var _Data_ItemOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Data/ItemOptions */ \"./public/TypeScript/Tables/Classes/Data/ItemOptions.ts\");\n\nvar HtmlGeneration = /** @class */ (function () {\n    function HtmlGeneration() {\n    }\n    /**\n     * Generates the HTML for the power table.\n     * @param powerRows - The array of power table rows to generate HTML for.\n     * @param buildingOptions - The HTML string for the building options.\n     * @param totalConsumption - The total consumption of the power table.\n     *\n     * @returns The generated HTML string for the power table.\n     */\n    HtmlGeneration.generatePowerTable = function (powerRows, buildingOptions, totalConsumption) {\n        var rowsHtml = powerRows.map(function (row, index) {\n            return \"\\n      <tr>\\n        <td class=\\\"m-0 p-0 w-50\\\">\\n          <select class=\\\"form-control rounded-0\\\" name=\\\"power_building_id[]\\\" min=\\\"0\\\">\\n            \".concat(buildingOptions.replace(\"<option value=\\\"\".concat(row.buildingId, \"\\\">\"), \"<option value=\\\"\".concat(row.buildingId, \"\\\" selected>\")), \"\\n          </select>\\n        </td>\\n        <td class=\\\"m-0 p-0 w-25\\\">\\n          <input type=\\\"number\\\" value=\\\"\").concat(row.quantity, \"\\\" class=\\\"form-control rounded-0\\\" name=\\\"power_amount[]\\\" min=\\\"0\\\" step=\\\"any\\\" data-index=\\\"\").concat(index, \"\\\" onchange=\\\"updateConsumption()\\\">\\n        </td>\\n        <td class=\\\"m-0 p-0 w-25\\\">\\n          <input type=\\\"number\\\" value=\\\"\").concat(row.clockSpeed, \"\\\" class=\\\"form-control rounded-0\\\" name=\\\"power_clock_speed[]\\\" min=\\\"1\\\" max=\\\"250\\\" step=\\\"any\\\" data-index=\\\"\").concat(index, \"\\\" onchange=\\\"updateConsumption()\\\">\\n        </td>\\n        <td class=\\\"m-0 p-0 w-25\\\">\\n          <input type=\\\"number\\\" value=\\\"\").concat(row.Consumption, \"\\\" class=\\\"form-control rounded-0\\\" disabled name=\\\"power_Consumption[]\\\" min=\\\"0\\\" step=\\\"any\\\">\\n        </td>\\n        <td class=\\\"m-0 p-0 w-25\\\">\\n          <input type=\\\"hidden\\\" value=\\\"\").concat(row.userRow ? 1 : 0, \"\\\" class=\\\"form-control rounded-0\\\" readonly name=\\\"user[]\\\" min=\\\"0\\\">\\n        </td>\\n      </tr>\\n    \");\n        }).join('');\n        // Add an empty row for new entries\n        var emptyRowHtml = \"\\n      <tr>\\n        <td class=\\\"m-0 p-0 w-50\\\">\\n          <select class=\\\"form-control rounded-0\\\" name=\\\"power_building_id[]\\\" min=\\\"0\\\">\\n            \".concat(buildingOptions.replace(/<option /, '<option selected '), \" <!-- Selects the first option -->\\n          </select>\\n        </td>\\n        <td class=\\\"m-0 p-0 w-25\\\">\\n          <input type=\\\"number\\\" value=\\\"0\\\" class=\\\"form-control rounded-0\\\" name=\\\"power_amount[]\\\" min=\\\"0\\\" step=\\\"any\\\" onchange=\\\"updateConsumption()\\\">\\n        </td>\\n        <td class=\\\"m-0 p-0 w-25\\\">\\n          <input type=\\\"number\\\" value=\\\"100\\\" class=\\\"form-control rounded-0\\\" name=\\\"power_clock_speed[]\\\" min=\\\"1\\\" max=\\\"250\\\" step=\\\"any\\\" onchange=\\\"updateConsumption()\\\">\\n        </td>\\n        <td class=\\\"m-0 p-0 w-25\\\">\\n          <input type=\\\"number\\\" value=\\\"0\\\" class=\\\"form-control rounded-0\\\" readonly name=\\\"power_Consumption[]\\\" min=\\\"0\\\" step=\\\"any\\\">\\n        </td>\\n        <td class=\\\"m-0 p-0 w-25\\\">\\n          <input type=\\\"hidden\\\" value=\\\"1\\\" class=\\\"form-control rounded-0\\\" readonly name=\\\"user[]\\\" min=\\\"0\\\">\\n        </td>\\n      </tr>\\n    \");\n        // Total row\n        var totalRowHtml = \"\\n      <tr>\\n        <td colspan=\\\"1\\\" class=\\\"table-dark\\\">\\n          Total:\\n        </td>\\n        <td colspan=\\\"2\\\"></td>\\n        <td class=\\\"w-25 m-0 p-0\\\">\\n          <input type=\\\"number\\\" name=\\\"total_consumption\\\" readonly class=\\\"form-control rounded-0\\\" id=\\\"totalConsumption\\\" value=\\\"\".concat(totalConsumption, \"\\\">\\n        </td>\\n      </tr>\\n    \");\n        return rowsHtml + emptyRowHtml + totalRowHtml;\n    };\n    /**\n     * Generates the HTML for the imports table rows.\n     *\n     * @param importsTableRows - The array of imports table rows to generate HTML for.\n     * @returns The generated HTML string for the imports table rows.\n     */\n    HtmlGeneration.generateImportsTableRows = function (importsTableRows) {\n        var rowsHTML = importsTableRows.map(function (row) {\n            var formattedQuantity = Number(row.quantity) % 1 === 0 ?\n                row.quantity.toFixed(0) :\n                row.quantity.toFixed(1);\n            return \"\\n            <tr>\\n                <td class=\\\"m-0 p-0 w-75\\\">\\n                    <select name=\\\"imports_item_id[]\\\" class=\\\"form-control rounded-0\\\">\\n                        \".concat(_Data_ItemOptions__WEBPACK_IMPORTED_MODULE_0__.ItemOptions.replace(\"value=\\\"\".concat(row.itemId, \"\\\"\"), \"value=\\\"\".concat(row.itemId, \"\\\" selected\")), \"\\n                    </select>\\n                </td>\\n                <td class=\\\"m-0 p-0 w-25\\\">\\n                    <input min=\\\"0\\\" type=\\\"number\\\" name=\\\"imports_ammount[]\\\" class=\\\"form-control rounded-0\\\" value=\\\"\").concat(formattedQuantity, \"\\\" readonly>\\n                </td>\\n            </tr>\\n        \");\n        }).join('');\n        var emptyRowHTML = \"\\n        <tr>\\n            <td class=\\\"m-0 p-0 w-75\\\">\\n                <select name=\\\"imports_item_id[]\\\" class=\\\"form-control rounded-0\\\">\\n                    \".concat(_Data_ItemOptions__WEBPACK_IMPORTED_MODULE_0__.ItemOptions.replace(/<option /, '<option selected '), \" <!-- Selects the first option -->\\n                </select>\\n            </td>\\n            <td class=\\\"m-0 p-0 w-25\\\">\\n                <input min=\\\"0\\\" type=\\\"number\\\" name=\\\"imports_ammount[]\\\" class=\\\"form-control rounded-0\\\">\\n            </td>\\n        </tr>\");\n        return rowsHTML + emptyRowHTML; // Combine the existing rows with the empty row\n    };\n    return HtmlGeneration;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/ImportsTableFunctions.ts":
/*!*****************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/ImportsTableFunctions.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImportsTableFunctions: () => (/* binding */ ImportsTableFunctions)\n/* harmony export */ });\n/* harmony import */ var _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Data/ImportsTableRow */ \"./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts\");\n/* harmony import */ var _HtmlGeneration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HtmlGeneration */ \"./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts\");\n\n\nvar ImportsTableFunctions = /** @class */ (function () {\n    function ImportsTableFunctions() {\n    }\n    /**\n     * Calculates the imports required based on production table rows.\n     *\n     * @param productionTableRows - An array of production table rows.\n     * @returns A tuple containing the imports table rows and updated indexes.\n     */\n    ImportsTableFunctions.calculateImports = function (productionTableRows) {\n        var _a;\n        var importsTableRows = [];\n        // Reset the usage property for all production table rows\n        var updatedIndexes = this.resetUsage(productionTableRows);\n        // Loop through each production row to calculate imports\n        for (var i = 0; i + 1 < productionTableRows.length; i++) {\n            var row = productionTableRows[i];\n            var requiredItems = (_a = row.recipe) === null || _a === void 0 ? void 0 : _a.resources;\n            // Calculate production rate based on export_amount_per_min\n            var productionRate = this.calculateProductionRate(row);\n            if (requiredItems) {\n                this.processRequiredItems(requiredItems, productionRate, row, productionTableRows, importsTableRows, updatedIndexes);\n            }\n        }\n        var html = _HtmlGeneration__WEBPACK_IMPORTED_MODULE_1__.HtmlGeneration.generateImportsTableRows(importsTableRows);\n        $('#imports tbody').html(html);\n        return { importsTableRows: importsTableRows, indexes: updatedIndexes };\n    };\n    /**\n     * Resets the usage property for all production table rows.\n     *\n     * @param productionTableRows - An array of production table rows.\n     */\n    ImportsTableFunctions.resetUsage = function (productionTableRows) {\n        var changedRows = [];\n        for (var _i = 0, productionTableRows_1 = productionTableRows; _i < productionTableRows_1.length; _i++) {\n            var row = productionTableRows_1[_i];\n            var rowUsage = row.Usage;\n            if (row.Usage > 0) {\n                changedRows.push(productionTableRows.indexOf(row));\n                row.Usage = 0;\n                row.exportPerMin = row.quantity;\n            }\n            if (row.extraCells !== null) {\n                if (row.extraCells.Usage > 0) {\n                    changedRows.push(productionTableRows.indexOf(row));\n                    row.extraCells.Usage = 0;\n                    row.extraCells.ExportPerMin = row.extraCells.Quantity;\n                }\n            }\n        }\n        return changedRows;\n    };\n    /**\n     * Calculates the production rate based on the provided production row.\n     *\n     * @param row - The production table row to calculate the production rate for.\n     * @returns The calculated production rate.\n     */\n    ImportsTableFunctions.calculateProductionRate = function (row) {\n        var _a;\n        return ((_a = row.recipe) === null || _a === void 0 ? void 0 : _a.export_amount_per_min) ? row.quantity / row.recipe.export_amount_per_min : 0;\n    };\n    /**\n     * Processes required items for imports based on the production table rows.\n     *\n     * @param requiredItems - An array of resources required for production.\n     * @param productionRate - The production rate of the current row.\n     * @param row - The current production table row being processed.\n     * @param productionTableRows - The complete array of production table rows.\n     * @param importsTableRows - The array of imports table rows to update.\n     * @param updatedIndexes - The array to track updated production row indexes.\n     */\n    ImportsTableFunctions.processRequiredItems = function (requiredItems, productionRate, row, productionTableRows, importsTableRows, updatedIndexes) {\n        var _loop_1 = function (requiredItem) {\n            var amountNeeded = requiredItem.importAmount * productionRate;\n            // Get produced rows that match the required item\n            var producedRows = productionTableRows.filter(function (r) { return r.product === requiredItem.name; });\n            // get double export rows\n            var doubleExportRow = productionTableRows.filter(function (r) { return r.extraCells !== null && r.extraCells.Product === requiredItem.name; });\n            var totalAvailable = 0; // Track total available quantity from produced rows\n            var totalUsed = 0; // Track total usage from produced rows\n            // Check each produced row\n            var _a = this_1.processProducedRows(producedRows, amountNeeded, totalUsed, totalAvailable, productionTableRows, updatedIndexes), used = _a.totalUsed, available = _a.totalAvailable;\n            totalUsed = used;\n            totalAvailable = available;\n            // Check each double export row\n            var _b = this_1.processDoubleExportRows(doubleExportRow, amountNeeded, totalUsed, totalAvailable, productionTableRows, updatedIndexes), used2 = _b.totalUsed, available2 = _b.totalAvailable;\n            totalUsed = used2;\n            totalAvailable = available2;\n            // If there is still a need for imports after using available production\n            var amountToImport = amountNeeded - totalUsed;\n            if (amountToImport > 0) {\n                this_1.addToImportsTable(importsTableRows, requiredItem.itemId, amountToImport);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, requiredItems_1 = requiredItems; _i < requiredItems_1.length; _i++) {\n            var requiredItem = requiredItems_1[_i];\n            _loop_1(requiredItem);\n        }\n    };\n    /**\n     * Processes the produced rows to determine how much can be used for imports.\n     * @param producedRows - The array of produced rows to process.\n     * @param amountNeeded - The total amount needed for imports.\n     * @param totalUsed - The total amount used from produced rows.\n     * @param totalAvailable - The total amount available from produced rows.\n     * @param productionTableRows - The complete array of production table rows.\n     * @param updatedIndexes - The array to track updated production row indexes.\n     * @private\n     */\n    ImportsTableFunctions.processProducedRows = function (producedRows, amountNeeded, totalUsed, totalAvailable, productionTableRows, updatedIndexes) {\n        for (var _i = 0, producedRows_1 = producedRows; _i < producedRows_1.length; _i++) {\n            var producedRow = producedRows_1[_i];\n            var availableAmount = producedRow.quantity - producedRow.Usage;\n            // Calculate how much we can use from this row\n            var canUse = Math.min(availableAmount, amountNeeded - totalUsed);\n            if (canUse <= 0) {\n                continue;\n            }\n            // Update usage for this produced row\n            producedRow.Usage += +canUse.toFixed(2);\n            producedRow.exportPerMin = +(producedRow.quantity - producedRow.Usage).toFixed(2);\n            // Update the total used amount\n            totalUsed += canUse;\n            totalAvailable += availableAmount; // Count how much is available from this row\n            var index = productionTableRows.indexOf(producedRow);\n            if (index !== -1 && !updatedIndexes.includes(index)) {\n                updatedIndexes.push(index);\n            }\n        }\n        return { totalUsed: totalUsed, totalAvailable: totalAvailable };\n    };\n    ImportsTableFunctions.processDoubleExportRows = function (doubleExportRows, amountNeeded, totalUsed, totalAvailable, productionTableRows, updatedIndexes) {\n        for (var _i = 0, doubleExportRows_1 = doubleExportRows; _i < doubleExportRows_1.length; _i++) {\n            var doubleExport = doubleExportRows_1[_i];\n            if (doubleExport.extraCells === null) {\n                continue;\n            }\n            var availableAmount = doubleExport.extraCells.ExportPerMin - doubleExport.extraCells.Usage;\n            // Calculate how much we can use from this row\n            var canUse = Math.min(availableAmount, amountNeeded - totalUsed);\n            if (canUse <= 0) {\n                continue;\n            }\n            // Update usage for this extra row\n            doubleExport.extraCells.Usage += +canUse.toFixed(2);\n            doubleExport.extraCells.ExportPerMin = +(doubleExport.extraCells.ExportPerMin - doubleExport.extraCells.Usage).toFixed(2);\n            // Update the total used amount\n            totalUsed += canUse;\n            totalAvailable += availableAmount; // Count how much is available from this row\n            var index = productionTableRows.indexOf(doubleExport);\n            if (index !== -1 && !updatedIndexes.includes(index)) {\n                updatedIndexes.push(index);\n            }\n        }\n        return { totalUsed: totalUsed, totalAvailable: totalAvailable };\n    };\n    /**\n     * Adds the required amount to the imports table rows.\n     *\n     * @param importsTableRows - The imports table rows to update.\n     * @param itemId - The ID of the item to import.\n     * @param amountToImport - The amount of the item to import.\n     */\n    ImportsTableFunctions.addToImportsTable = function (importsTableRows, itemId, amountToImport) {\n        var existingImportRow = importsTableRows.find(function (r) { return r.itemId === itemId; });\n        if (existingImportRow) {\n            existingImportRow.quantity += amountToImport;\n        }\n        else {\n            importsTableRows.push(new _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__.ImportsTableRow(itemId, amountToImport));\n        }\n    };\n    return ImportsTableFunctions;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/ImportsTableFunctions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts":
/*!***************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PowerTableFunctions: () => (/* binding */ PowerTableFunctions)\n/* harmony export */ });\n/* harmony import */ var _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Data/PowerTableRow */ \"./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts\");\n/* harmony import */ var _Data_BuildingOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Data/BuildingOptions */ \"./public/TypeScript/Tables/Classes/Data/BuildingOptions.ts\");\n/* harmony import */ var _HtmlGeneration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HtmlGeneration */ \"./public/TypeScript/Tables/Classes/Functions/HtmlGeneration.ts\");\n/* harmony import */ var _Ajax__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\nvar PowerTableFunctions = /** @class */ (function () {\n    function PowerTableFunctions() {\n    }\n    PowerTableFunctions.calculateBuildings = function (productionTableRows, oldPowerTableRows) {\n        // get the user rows\n        var userRows = oldPowerTableRows.filter(function (row) { return row.userRow == true; });\n        // remove the old add row\n        userRows.pop();\n        var powerTableRows = [];\n        var _loop_1 = function (i) {\n            var row = productionTableRows[i];\n            var recipe = row.recipe;\n            if (recipe !== null) {\n                var building_1 = recipe.building;\n                var amount = row.quantity;\n                var existingRow = powerTableRows.find(function (row) { return row.buildingId === building_1.id; });\n                var amountOfBuilding = amount / recipe.export_amount_per_min;\n                var exes = 0;\n                var consumption = +PowerTableFunctions.calculateConsumption(amountOfBuilding, 100, building_1.power_used);\n                if (amountOfBuilding % 1 !== 0) {\n                    exes = amountOfBuilding % 1;\n                    amountOfBuilding = Math.floor(amountOfBuilding);\n                }\n                if (existingRow) {\n                    existingRow.quantity += amountOfBuilding;\n                    existingRow.Consumption = +PowerTableFunctions.calculateConsumption(existingRow.quantity, 100, building_1.power_used);\n                }\n                else {\n                    powerTableRows.push(new _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_0__.PowerTableRow(building_1.id, amountOfBuilding, 100, consumption, false));\n                }\n                if (exes > 0) {\n                    var clockSpeed = exes * 100;\n                    var consumption_1 = +PowerTableFunctions.calculateConsumption(1, clockSpeed, building_1.power_used);\n                    powerTableRows.push(new _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_0__.PowerTableRow(building_1.id, 1, +clockSpeed.toFixed(1), consumption_1, false));\n                }\n            }\n        };\n        for (var i = 0; i + 1 < productionTableRows.length; i++) {\n            _loop_1(i);\n        }\n        // Add user rows to the power table\n        powerTableRows = powerTableRows.concat(userRows);\n        var html = _HtmlGeneration__WEBPACK_IMPORTED_MODULE_2__.HtmlGeneration.generatePowerTable(powerTableRows, _Data_BuildingOptions__WEBPACK_IMPORTED_MODULE_1__.buildingOptions, PowerTableFunctions.calculateTotalConsumption(powerTableRows));\n        $('#power tbody').html(html);\n        powerTableRows.push(new _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_0__.PowerTableRow());\n        return powerTableRows;\n    };\n    PowerTableFunctions.calculateConsumption = function (amount, ClockSpeed, Consumption) {\n        // tot de maght van 1,321928\n        var clockSpeed = Math.pow(ClockSpeed / 100, 1.321928);\n        // to 1 decimal\n        return (amount * Consumption * clockSpeed).toFixed(1);\n    };\n    PowerTableFunctions.calculateTotalConsumption = function (table) {\n        var filteredTable = table.filter(function (row) { return row.Consumption !== 0; });\n        var totalConsumption = filteredTable.reduce(function (acc, row) {\n            var consumption = Number(row.Consumption) || 0; // Ensure it's a number\n            return acc + consumption;\n        }, 0);\n        console.log(totalConsumption);\n        return parseFloat(totalConsumption.toFixed(3)); // Limit to 3 decimal places\n    };\n    PowerTableFunctions.calculateSingleConsumption = function (row) {\n        console.log(row);\n        if (row.building === null)\n            return 0;\n        var clockSpeed = Math.pow(row.clockSpeed / 100, 1.321928);\n        return +(row.quantity * row.building.power_used * clockSpeed).toFixed(1);\n    };\n    PowerTableFunctions.updateBuilding = function (row, buildingId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = row;\n                        return [4 /*yield*/, _Ajax__WEBPACK_IMPORTED_MODULE_3__.Ajax.getBuilding(buildingId)];\n                    case 1:\n                        _a.building = _b.sent();\n                        row.buildingId = buildingId;\n                        row.Consumption = +PowerTableFunctions.calculateSingleConsumption(row);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PowerTableFunctions.updateTotalConsumption = function (powerTableRows) {\n        var totalConsumption = PowerTableFunctions.calculateTotalConsumption(powerTableRows);\n        $('#totalConsumption').val(totalConsumption);\n    };\n    return PowerTableFunctions;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts":
/*!*******************************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProductionLineFunctions: () => (/* binding */ ProductionLineFunctions)\n/* harmony export */ });\n/* harmony import */ var _Ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n/* harmony import */ var _Data_ExtraProductionRow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Data/ExtraProductionRow */ \"./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\nvar ProductionLineFunctions = /** @class */ (function () {\n    function ProductionLineFunctions() {\n    }\n    /**\n     * Calculate the export production based on the quantity and usage of the row.\n     * If the row has a double export, it calculates and updates the second export value.\n     *\n     * @param {any} row - The row object containing the production data.\n     */\n    ProductionLineFunctions.calculateProductionExport = function (row) {\n        return __awaiter(this, void 0, void 0, function () {\n            var secondExportPerMin;\n            return __generator(this, function (_a) {\n                // Calculate the primary export based on quantity and usage\n                row.exportPerMin = row.quantity - row.Usage;\n                if (row.doubleExport && row.recipe !== null) {\n                    secondExportPerMin = this.calculateSecondExportPerMin(row);\n                    if (secondExportPerMin !== undefined) {\n                        row.extraCells.Quantity = secondExportPerMin;\n                        row.extraCells.ExportPerMin = secondExportPerMin;\n                    }\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Updates the recipe for the given row and recalculates related data, such as double export.\n     *\n     * @param {ProductionTableRow} row - The row object to update.\n     * @param {string} value - The new recipe ID or value.\n     * @returns {Promise<void>}\n     */\n    ProductionLineFunctions.updateRecipe = function (row, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var recipe, exportPerMin, secondExportPerMin, secondExportPerMinMultiplier, quantityPerMin;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.saveRecipe(value, row)];\n                    case 1:\n                        _a.sent();\n                        recipe = row.recipe;\n                        if (recipe === null)\n                            return [2 /*return*/];\n                        row.recipeId = recipe.id;\n                        row.product = recipe.itemName;\n                        row.doubleExport = recipe.secondItemName !== null;\n                        if (row.doubleExport) {\n                            exportPerMin = +recipe.export_amount_per_min;\n                            secondExportPerMin = +recipe.export_amount_per_min2;\n                            secondExportPerMinMultiplier = secondExportPerMin / exportPerMin;\n                            quantityPerMin = row.quantity;\n                            // Update the extra cells for the second export\n                            row.extraCells = new _Data_ExtraProductionRow__WEBPACK_IMPORTED_MODULE_1__.ExtraProductionRow(\n                            // @ts-ignore\n                            recipe.secondItemName, 0, // Assuming no usage for the second product\n                            quantityPerMin * secondExportPerMinMultiplier);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Saves the recipe data for a given recipe ID and row.\n     *\n     * @param {string} recipeId - The recipe ID to fetch.\n     * @param {ProductionTableRow} row - The row object to store the recipe in.\n     * @returns {Promise<void>}\n     */\n    ProductionLineFunctions.saveRecipe = function (recipeId, row) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = row;\n                        return [4 /*yield*/, _Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.getRecipe(+recipeId)];\n                    case 1:\n                        _a.recipe = _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Handles the display and layout changes when a row has a double export,\n     * creating a second row for the extra export if necessary.\n     *\n     * @param {ProductionTableRow} row - The row object to update.\n     * @param {JQuery<HTMLElement>} rowToUpdate - The corresponding table row element.\n     */\n    ProductionLineFunctions.handleDoubleExport = function (row, rowToUpdate) {\n        if (row.doubleExport && row.extraCells !== null) {\n            if (!rowToUpdate.next('.extra-output').length) {\n                // Modify first two columns to span 2 rows, adjust select/input height\n                rowToUpdate.find('td:first').attr('rowspan', 2);\n                rowToUpdate.find('td:nth-child(2)').attr('rowspan', 2);\n                rowToUpdate.find('td:first select').css('height', '78px');\n                rowToUpdate.find('td:nth-child(2) input').css('height', '78px');\n                // Add extra row for double export values\n                var extraRow = $(\"\\n                    <tr class=\\\"extra-output\\\">\\n                        <td class=\\\"m-0 p-0\\\">\\n                            <input type=\\\"text\\\" name=\\\"product\\\" value=\\\"\".concat(row.extraCells.Product, \"\\\" class=\\\"form-control rounded-0\\\" readonly>\\n                        </td>\\n                        <td class=\\\"m-0 p-0\\\">\\n                            <input type=\\\"number\\\" name=\\\"production_usage2[]\\\" value=\\\"\").concat(row.extraCells.Usage, \"\\\" class=\\\"form-control rounded-0\\\" readonly step=\\\"any\\\">\\n                        </td>\\n                        <td class=\\\"m-0 p-0\\\">\\n                            <input type=\\\"number\\\" name=\\\"production_export2[]\\\" value=\\\"\").concat(row.extraCells.ExportPerMin, \"\\\" class=\\\"form-control rounded-0\\\" readonly step=\\\"any\\\">\\n                        </td>\\n                    </tr>\\n                \"));\n                extraRow.insertAfter(rowToUpdate);\n            }\n            else {\n                // Update values of the existing extra row\n                var extraRow = rowToUpdate.next('.extra-output');\n                var usage = extraRow.find('input[name=\"production_usage2[]\"]');\n                var exportPerMin = extraRow.find('input[name=\"production_export2[]\"]');\n                usage.val(row.extraCells.Usage);\n                exportPerMin.val(row.extraCells.ExportPerMin);\n            }\n        }\n        else if (rowToUpdate.next('.extra-output').length) {\n            // Remove the extra row if double export is no longer active\n            rowToUpdate.next('.extra-output').remove();\n            // Reset the rowspan for the first two columns\n            rowToUpdate.find('td:first').removeAttr('rowspan');\n            rowToUpdate.find('td:nth-child(2)').removeAttr('rowspan');\n            // Reset the input/select height\n            rowToUpdate.find('td:first select').css('height', '');\n            rowToUpdate.find('td:nth-child(2) input').css('height', '');\n        }\n    };\n    /**\n     * Calculates the second export per minute for double export rows.\n     *\n     * @param {ProductionTableRow} row - The row object to calculate for.\n     * @returns {number | undefined} - The calculated second export per minute or undefined if not applicable.\n     */\n    ProductionLineFunctions.calculateSecondExportPerMin = function (row) {\n        if (row.recipe === null)\n            return;\n        var secondExportPerMin = row.recipe.export_amount_per_min2;\n        var exportPerMin = row.recipe.export_amount_per_min;\n        if (secondExportPerMin === null || exportPerMin === null)\n            return;\n        var secondExportPerMinMultiplier = secondExportPerMin / exportPerMin;\n        console.log(row.quantity * secondExportPerMinMultiplier);\n        return row.quantity * secondExportPerMinMultiplier;\n    };\n    return ProductionLineFunctions;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts":
/*!*********************************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SaveFunctions: () => (/* binding */ SaveFunctions)\n/* harmony export */ });\n/* harmony import */ var _Ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ajax */ \"./public/TypeScript/Tables/Classes/Functions/Ajax.ts\");\n\nvar SaveFunctions = /** @class */ (function () {\n    function SaveFunctions() {\n    }\n    SaveFunctions.prepareSaveData = function (productionTableRows, powerTableRows, importsTableRows) {\n        return {\n            productionTableRows: productionTableRows,\n            powerTableRows: powerTableRows,\n            importsTableRows: importsTableRows\n        };\n    };\n    SaveFunctions.saveProductionLine = function (jsonData) {\n        var _this = this;\n        try {\n            var url = new URL(window.location.href);\n            var id = parseInt(url.searchParams.get('id'));\n            _Ajax__WEBPACK_IMPORTED_MODULE_0__.Ajax.saveData(jsonData, id).then(function (response) {\n                if (response['success']) {\n                    _this.showSuccessMessage('Data successfully saved.');\n                    return;\n                }\n                _this.showErrorMessage('An error occurred while saving the data. Please try again.');\n            }).catch(function (error) {\n                _this.showErrorMessage('An error occurred while saving the data. Please try again.');\n            });\n        }\n        catch (error) {\n            this.showErrorMessage('An error occurred while saving the data. Please try again.');\n        }\n    };\n    SaveFunctions.showSuccessMessage = function (message) {\n        this.showMessage('saveSuccessAlert', message);\n        return;\n    };\n    SaveFunctions.showErrorMessage = function (message) {\n        this.showMessage('saveErrorAlert', message);\n        return;\n    };\n    SaveFunctions.showMessage = function (alertId, message) {\n        var alertElement = document.getElementById(alertId);\n        if (alertElement) {\n            alertElement.textContent = message;\n            // Ensure the alert is hidden first\n            alertElement.classList.add('d-none');\n            alertElement.classList.remove('show');\n            // Trigger reflow to allow for the transition\n            void alertElement.offsetWidth;\n            // Fade in the alert\n            alertElement.classList.remove('d-none');\n            alertElement.classList.add('show');\n            // Automatically fade out after 5 seconds\n            setTimeout(function () {\n                alertElement.classList.remove('show');\n                setTimeout(function () {\n                    alertElement.classList.add('d-none');\n                }, 150); // Time to wait for the fade-out to complete\n            }, 5000); // Display duration before fading out\n        }\n    };\n    return SaveFunctions;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/Classes/TableHandler.ts":
/*!**********************************************************!*\
  !*** ./public/TypeScript/Tables/Classes/TableHandler.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableHandler: () => (/* binding */ TableHandler)\n/* harmony export */ });\n/* harmony import */ var _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data/ImportsTableRow */ \"./public/TypeScript/Tables/Classes/Data/ImportsTableRow.ts\");\n/* harmony import */ var _Data_ProductionTableRow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Data/ProductionTableRow */ \"./public/TypeScript/Tables/Classes/Data/ProductionTableRow.ts\");\n/* harmony import */ var _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Data/PowerTableRow */ \"./public/TypeScript/Tables/Classes/Data/PowerTableRow.ts\");\n/* harmony import */ var _Data_ExtraProductionRow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Data/ExtraProductionRow */ \"./public/TypeScript/Tables/Classes/Data/ExtraProductionRow.ts\");\n/* harmony import */ var _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Functions/ProductionLineFunctions */ \"./public/TypeScript/Tables/Classes/Functions/ProductionLineFunctions.ts\");\n/* harmony import */ var _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Functions/PowerTableFunctions */ \"./public/TypeScript/Tables/Classes/Functions/PowerTableFunctions.ts\");\n/* harmony import */ var _Functions_ImportsTableFunctions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Functions/ImportsTableFunctions */ \"./public/TypeScript/Tables/Classes/Functions/ImportsTableFunctions.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\n\n\n\n/**\n * Class responsible for handling the manipulation and event handling of tables.\n */\nvar TableHandler = /** @class */ (function () {\n    function TableHandler() {\n        this.importsTableRows = this.readTable('imports', _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__.ImportsTableRow);\n        this.productionTableRows = this.readTable('recipes', _Data_ProductionTableRow__WEBPACK_IMPORTED_MODULE_1__.ProductionTableRow);\n        this.powerTableRows = this.readTable('power', _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_2__.PowerTableRow);\n        this.addEventListeners();\n    }\n    /**\n     * Generic method to read tables and convert rows into class instances.\n     * @param {string} id - The ID of the table.\n     * @param {new(...args: any[]) => T} rowClass - The class constructor for the table rows.\n     * @returns {T[]} An array of instances of the specified row class.\n     */\n    TableHandler.prototype.readTable = function (id, rowClass) {\n        var _a;\n        var table = $(\"#\".concat(id, \" tbody tr\"));\n        var rows = [];\n        var lengthReduction = 0;\n        if (id === 'power') {\n            lengthReduction = 1;\n        }\n        var _loop_1 = function (i) {\n            var row = table[i];\n            var values = $(row).find('input, select');\n            var rowValues = [];\n            values.each(function (_, value) {\n                var type = $(value).attr('type');\n                if (type === 'number') {\n                    rowValues.push(Number($(value).val()));\n                }\n                else {\n                    rowValues.push($(value).val());\n                }\n            });\n            // if its a user input row get the building\n            if (id === 'power' && rowValues[rowValues.length - 1] == '1' && rowValues[0] !== null) {\n                rowValues.push(true);\n            }\n            // Handle double export in recipes table\n            if (id === 'recipes' && ((_a = table[i + 1]) === null || _a === void 0 ? void 0 : _a.classList.contains('extra-output'))) {\n                var extraRow = table[i + 1];\n                var extraRowValues = $(extraRow).find('input, select').map(function (_, el) { return $(el).val(); }).get();\n                // Create instance of ExtraProductionRow\n                var extraRowInstance = new _Data_ExtraProductionRow__WEBPACK_IMPORTED_MODULE_3__.ExtraProductionRow(extraRowValues[0], // Product\n                Number(extraRowValues[1]), // Usage\n                Number(extraRowValues[2]) // ExportPerMin\n                );\n                // Append extraRowInstance to rowValues\n                rowValues.push(true, extraRowInstance);\n                // Skip the extra row in the next iteration\n                i++;\n            }\n            rows.push(new (rowClass.bind.apply(rowClass, __spreadArray([void 0], rowValues, false)))());\n            out_i_1 = i;\n        };\n        var out_i_1;\n        for (var i = 0; i < table.length - lengthReduction; i++) {\n            _loop_1(i);\n            i = out_i_1;\n        }\n        return rows;\n    };\n    /**\n     * Adds event listeners for change events on all inputs and selects within tables.\n     */\n    TableHandler.prototype.addEventListeners = function () {\n        var _this = this;\n        var tables = ['imports', 'recipes', 'power'];\n        tables.forEach(function (tableId) {\n            var inputsAndSelects = $(\"#\".concat(tableId, \" tbody\")).find('input, select');\n            inputsAndSelects.each(function (_, element) {\n                $(element).on('change', function (event) {\n                    _this.handleInputChange(event, tableId);\n                });\n            });\n        });\n    };\n    TableHandler.prototype.addSpecificEventListener = function (tableId) {\n        var _this = this;\n        var inputsAndSelects = $(\"#\".concat(tableId, \" tbody\")).find('input, select');\n        inputsAndSelects.each(function (_, element) {\n            $(element).on('change', function (event) {\n                _this.handleInputChange(event, tableId);\n            });\n        });\n    };\n    /**\n     * Handles the change event for table inputs/selects.\n     * @param {JQuery.ChangeEvent} event - The change event object.\n     * @param {string} tableId - The ID of the table where the event occurred.\n     */\n    TableHandler.prototype.handleInputChange = function (event, tableId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var target, rowIndex, amountExtra, columnIndex, value, row, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        target = $(event.target);\n                        rowIndex = target.closest('tr').index();\n                        amountExtra = target.closest('tr').prevAll('.extra-output').length;\n                        columnIndex = target.closest('td').index();\n                        value = target.val();\n                        // If the last row is selected, add a new row\n                        if (this.checkIfLastRow(target, tableId) && this.checkIfSelect(target)) {\n                            this.addNewRow(tableId);\n                        }\n                        row = this.getRowByTableIdAndIndex(tableId, rowIndex - amountExtra);\n                        if (!(row && columnIndex >= 0)) return [3 /*break*/, 7];\n                        this.updateRowData(row, columnIndex, value);\n                        _a = tableId;\n                        switch (_a) {\n                            case 'imports': return [3 /*break*/, 1];\n                            case 'recipes': return [3 /*break*/, 2];\n                            case 'power': return [3 /*break*/, 4];\n                        }\n                        return [3 /*break*/, 6];\n                    case 1: \n                    // Custom logic for imports table\n                    return [3 /*break*/, 7];\n                    case 2: return [4 /*yield*/, this.HandleProductionTable(row, rowIndex, value, tableId, target)];\n                    case 3:\n                        _b.sent();\n                        return [3 /*break*/, 7];\n                    case 4: return [4 /*yield*/, this.HandlePowerTable(row, rowIndex, value, tableId, target)];\n                    case 5:\n                        _b.sent();\n                        return [3 /*break*/, 7];\n                    case 6: return [3 /*break*/, 7];\n                    case 7:\n                        console.log(this.productionTableRows);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the row from the corresponding table by tableId and rowIndex.\n     * @param {string} tableId - The ID of the table.\n     * @param {number} rowIndex - The index of the row to retrieve.\n     * @returns {any} The row object.\n     */\n    TableHandler.prototype.getRowByTableIdAndIndex = function (tableId, rowIndex) {\n        switch (tableId) {\n            case 'imports':\n                return this.importsTableRows[rowIndex];\n            case 'recipes':\n                return this.productionTableRows[rowIndex];\n            case 'power':\n                return this.powerTableRows[rowIndex];\n            default:\n                return null;\n        }\n    };\n    /**\n     * Updates the row object with new data based on the column index.\n     * @param {any} row - The row object to update.\n     * @param {number} columnIndex - The index of the column.\n     * @param {any} value - The new value to set in the row.\n     */\n    TableHandler.prototype.updateRowData = function (row, columnIndex, value) {\n        var rowKeys = Object.keys(row);\n        var key = rowKeys[columnIndex];\n        row[key] = value;\n    };\n    /**\n     * Updates the visual representation of the row in the table.\n     * @param {string} tableId - The ID of the table.\n     * @param {number} rowIndex - The index of the row to update.\n     * @param {any} row - The updated row object.\n     */\n    TableHandler.prototype.updateRowInTable = function (tableId, rowIndex, row) {\n        var table = $(\"#\".concat(tableId, \" tbody tr\"));\n        var rowToUpdate = $(table[rowIndex]);\n        rowToUpdate.find('input, select').each(function (index, element) {\n            var key = Object.keys(row)[index];\n            var value;\n            if (row.recipe && row.recipe.hasOwnProperty(key)) {\n                value = row.recipe[key]; // Use value from recipe\n            }\n            else {\n                value = row[key]; // Use value from row\n            }\n            $(element).val(value);\n        });\n        if (tableId === 'recipes') {\n            _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_4__.ProductionLineFunctions.handleDoubleExport(row, rowToUpdate);\n        }\n    };\n    /**\n     * Adds a new row to the table when the last row is modified.\n     * @param {string} tableId - The ID of the table.\n     */\n    TableHandler.prototype.addNewRow = function (tableId) {\n        var _this = this;\n        var lastRow;\n        if (tableId === 'power') {\n            lastRow = $(\"#\".concat(tableId, \" tbody tr:nth-last-child(2)\"));\n        }\n        else {\n            lastRow = $(\"#\".concat(tableId, \" tbody tr:last\"));\n        }\n        var newRow = lastRow.clone();\n        newRow.find('input[type=\"number\"]').val(0);\n        newRow.find('input[type=\"text\"]').val('');\n        newRow.find('input[name=\"power_clock_speed[]\"]').val(100);\n        newRow.find('select').prop('selectedIndex', 0);\n        newRow.insertAfter(lastRow);\n        newRow.find('input, select').each(function (_, element) {\n            $(element).on('change', function (event) {\n                _this.handleInputChange(event, tableId);\n            });\n        });\n        switch (tableId) {\n            case 'imports':\n                this.importsTableRows.push(new _Data_ImportsTableRow__WEBPACK_IMPORTED_MODULE_0__.ImportsTableRow());\n                break;\n            case 'recipes':\n                this.productionTableRows.push(new _Data_ProductionTableRow__WEBPACK_IMPORTED_MODULE_1__.ProductionTableRow());\n                break;\n            case 'power':\n                this.powerTableRows.push(new _Data_PowerTableRow__WEBPACK_IMPORTED_MODULE_2__.PowerTableRow());\n                break;\n            default:\n                break;\n        }\n    };\n    /**\n     * Checks if the selected element is in the last row.\n     * @param {JQuery} target - The target element.\n     * @param {string} tableId - The ID of the table.\n     * @returns {boolean} True if the element is in the last row, false otherwise.\n     */\n    TableHandler.prototype.checkIfLastRow = function (target, tableId) {\n        if (tableId === 'power') {\n            return target.closest('tr').is(':nth-last-child(2)');\n        }\n        return target.closest('tr').is(':last-child');\n    };\n    /**\n     * Checks if the selected element is a <select> element.\n     * @param {JQuery} target - The target element.\n     * @returns {boolean} True if the element is a <select>, false otherwise.\n     */\n    TableHandler.prototype.checkIfSelect = function (target) {\n        return target.is('select');\n    };\n    TableHandler.prototype.UpdateOnIndex = function (indexes) {\n        for (var i = 0; i < indexes.length; i++) {\n            var index = indexes[i];\n            var target = $(\"#recipes tbody tr:eq(\".concat(index, \")\"));\n            var amountExtra = target.closest('tr').prevAll('.extra-output').length;\n            var row = this.productionTableRows[index];\n            this.updateRowInTable('recipes', index + amountExtra, row);\n        }\n    };\n    /**\n     * Handles the change event for the power table.\n     * @param row - The row object to update.\n     * @param rowIndex - The index of the row in the table.\n     * @param value - The new value to set in the row.\n     * @param tableId - The ID of the table.\n     * @param target - The target element that triggered the event.\n     * @constructor\n     * @private\n     */\n    TableHandler.prototype.HandlePowerTable = function (row, rowIndex, value, tableId, target) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.checkIfSelect(target)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__.PowerTableFunctions.updateBuilding(row, value)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        row.Consumption = _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__.PowerTableFunctions.calculateSingleConsumption(row);\n                        _a.label = 3;\n                    case 3:\n                        this.updateRowInTable(tableId, rowIndex, row);\n                        _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__.PowerTableFunctions.updateTotalConsumption(this.powerTableRows);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Handles the change event for the production table.\n     * @param row - The row object to update.\n     * @param rowIndex - The index of the row in the table.\n     * @param value - The new value to set in the row.\n     * @param tableId - The ID of the table.\n     * @param target - The target element that triggered the event.\n     * @constructor\n     * @private\n     */\n    TableHandler.prototype.HandleProductionTable = function (row, rowIndex, value, tableId, target) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_4__.ProductionLineFunctions.calculateProductionExport(row)];\n                    case 1:\n                        _a.sent();\n                        if (!this.checkIfSelect(target)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, _Functions_ProductionLineFunctions__WEBPACK_IMPORTED_MODULE_4__.ProductionLineFunctions.updateRecipe(row, value)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        this.updateRowInTable(tableId, rowIndex, row);\n                        this.powerTableRows = _Functions_PowerTableFunctions__WEBPACK_IMPORTED_MODULE_5__.PowerTableFunctions.calculateBuildings(this.productionTableRows, this.powerTableRows);\n                        this.addSpecificEventListener('power');\n                        data = _Functions_ImportsTableFunctions__WEBPACK_IMPORTED_MODULE_6__.ImportsTableFunctions.calculateImports(this.productionTableRows);\n                        this.importsTableRows = data.importsTableRows;\n                        this.UpdateOnIndex(data.indexes);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return TableHandler;\n}());\n\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/Classes/TableHandler.ts?");

/***/ }),

/***/ "./public/TypeScript/Tables/index.ts":
/*!*******************************************!*\
  !*** ./public/TypeScript/Tables/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Classes_TableHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Classes/TableHandler */ \"./public/TypeScript/Tables/Classes/TableHandler.ts\");\n/* harmony import */ var _Classes_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Classes/Functions/SaveFunctions */ \"./public/TypeScript/Tables/Classes/Functions/SaveFunctions.ts\");\n\n\nvar tableHandler = new _Classes_TableHandler__WEBPACK_IMPORTED_MODULE_0__.TableHandler();\nvar saveButton = $(\"#save_button\");\nsaveButton.on(\"click\", function (event) {\n    if (event.shiftKey) {\n        event.preventDefault();\n        _Classes_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_1__.SaveFunctions.saveProductionLine(_Classes_Functions_SaveFunctions__WEBPACK_IMPORTED_MODULE_1__.SaveFunctions.prepareSaveData(tableHandler.productionTableRows, tableHandler.powerTableRows, tableHandler.importsTableRows));\n        saveButton.tooltip('hide');\n    }\n});\n\n\n//# sourceURL=webpack:///./public/TypeScript/Tables/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./public/TypeScript/Tables/index.ts");
/******/ 	
/******/ })()
;