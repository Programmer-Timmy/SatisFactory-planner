"use strict";(this.webpackChunk=this.webpackChunk||[]).push([[451],{451:()=>{var e;!function(e){e[e.add=0]="add",e[e.requested=1]="requested",e[e.remove=2]="remove"}(e||(e={}));const s=function(s,t,r=e.add){t.sort(((e,s)=>e.role_order-s.role_order));const i=t.map((t=>`\n        <option value="${t.id}" data-desc="${t.description}" \n          ${t.selected&&r==e.add||s.role?.id===t.id?"selected":""}>\n          ${t.name} - ${t.description}\n        </option>\n    `)).join("");let d="",l="",n=!1;switch(r){case e.requested:d="btn btn-warning btn-sm px-3 cancel_request",l="Cancel",n=!1;break;case e.remove:d="btn btn-danger btn-sm px-3 remove_user",l="Remove",n=!1;break;default:d="btn btn-success btn-sm px-3 add_user",l="Add",n=!1}return`\n    <div class="card shadow-sm rounded-3 mb-2" data-sp-user-id="${s.id}">\n        <div class="card-body d-flex justify-content-between align-items-center">\n            \x3c!-- Username --\x3e\n            <div style="width: 300px;" class="text-truncate">\n                <h6 class="mb-0 fw-semibold text-primary text-truncate">\n                    ${s.username}\n                </h6>\n            </div>\n\n            \x3c!-- Role select with description --\x3e\n            <div class="mx-3 w-100" style="flex-grow: 1;">\n                <select name="role" class="form-select form-select-sm text-truncate">\n                    ${i}\n                </select>\n            </div>\n\n            \x3c!-- Single dynamic button --\x3e\n            <button type="button" data-sp-type="" class="${d}" ${n?"disabled":""}>\n                ${l}\n            </button>\n        </div>\n    </div>\n    `};window.UserSelect=class{element;form;searchElement;userList;selectedUsersElement;selectedUsersList;allowedUsersElement;allowedUsersList;requestedUsers=[];allowedUsers=[];roles=[];users=[];gameId;constructor(e,s,t,r,i=[],d=[]){if(this.element=e,this.form=t,this.searchElement=this.element.find("input[type='search']"),this.userList=this.element.find(".users"),this.selectedUsersElement=this.element.find(".requested-users-container"),this.selectedUsersList=this.element.find(".requested-users-list"),this.allowedUsersElement=this.element.find(".allowed-users-container"),this.allowedUsersList=this.element.find(".allowed-users-list"),this.roles=s,i){const e=Object.values(i);this.allowedUsers=e.map((e=>({id:e.id,username:e.username,role:s.find((s=>s.id===e.role_id))})))}if(d){const e=Object.values(d);this.requestedUsers=e.map((e=>({id:e.id,username:e.username,role:s.find((s=>s.id===e.role_id))})))}this.roles=s,this.gameId=r,this.fetchUsers(),this.showSelectedAllowedUsers(),this.applyEventListeners()}applyEventListeners(){this.searchElement.on("input",(()=>{const e=this.searchElement.val();this.searchUsers(e)})),this.userList.on("click",".add_user",(e=>{this.handlerAddUserClick(e)})),this.element.on("change","select[name='role']",(e=>{this.handleChangeRole(e)})),this.selectedUsersList.on("click",".cancel_request",(e=>{this.handlerCancelRequestClick(e)})),this.allowedUsersList?.on("click",".remove_user",(e=>{this.handleRemoveAllowedUserClick(e)})),this.form.on("submit",(e=>{this.onFormSubmit(e)}))}fetchUsers(){const e=$('meta[name="csrf-token"]').attr("content");e?$.ajax({url:"/searchUser",type:"POST",data:{gameId:this.gameId,search:""},headers:{"X-CSRF-Token":e},dataType:"json",success:e=>{e.success&&e.data&&(this.users=e.data,this.roles.forEach((e=>e.selected=3===e.role_order)),this.searchUsers(""))},error:(e,s,t)=>{console.error("Error fetching users:",t)}}):console.error("CSRF token not found")}searchUsers(e){const s=this.users.filter((s=>s.username.toLowerCase().includes(e.toLowerCase())&&!this.requestedUsers.some((e=>e.id===s.id))&&!this.allowedUsers.some((e=>e.id===s.id))));this.renderUsers(s.slice(0,5)),s.length>5&&this.userList.append(`<p class="text-muted">And ${s.length-5} more. Search for more users.</p>`)}renderUsers(e){this.userList.empty(),0!==e.length?e.forEach((e=>{const t=s(e,this.roles);this.userList.append(t)})):this.userList.append('<h6 class="text-center">No users found</h6>')}handlerAddUserClick(e){const s=$(e.currentTarget).closest(".card"),t=s.data("sp-user-id"),r=+s.find('select[name="role"]').val(),i=this.users.find((e=>e.id===t));i&&(this.requestedUsers.some((e=>e.id===i.id))||(i.role=this.roles.find((e=>e.id===r)),this.requestedUsers.push(i),this.searchUsers(this.searchElement.val()),this.showSelectedAllowedUsers(),this.saveState()))}showSelectedAllowedUsers(){this.selectedUsersList.empty(),0===this.requestedUsers.length?this.selectedUsersElement.find(".requested").addClass("hidden"):this.requestedUsers.forEach((t=>{this.selectedUsersElement.find(".requested").removeClass("hidden");const r=s(t,this.roles,e.requested);this.selectedUsersList.append(r)})),this.allowedUsersList?.empty(),this.allowedUsers&&this.allowedUsers.length>0?(this.allowedUsersElement?.find(".allowed").removeClass("hidden"),this.allowedUsers.forEach((t=>{const r=s(t,this.roles,e.remove);this.allowedUsersList?.append(r)}))):this.allowedUsersElement?.find(".allowed").addClass("hidden")}handlerCancelRequestClick(e){const s=$(e.currentTarget).closest(".card").data("sp-user-id"),t=this.requestedUsers.findIndex((e=>e.id===s));-1!==t?(this.requestedUsers.splice(t,1),this.users.find((e=>e.id===s)).role=void 0,this.showSelectedAllowedUsers(),this.searchUsers(this.searchElement.val()),this.saveState()):console.error("User not found in requested list")}onFormSubmit(e){const s=$(e.currentTarget),t=s.find('input[name="requested_users"]'),r=s.find('input[name="allowed_users"]');t.length&&t.val(JSON.stringify(this.requestedUsers.map((e=>({id:e.id,roleId:e.role?e.role.id:null}))))),r.length&&r.val(JSON.stringify(this.allowedUsers.map((e=>({id:e.id,roleId:e.role?e.role.id:null})))))}handleChangeRole(e){const s=$(e.currentTarget),t=s.closest(".card").data("sp-user-id"),r=+s.val(),i=this.requestedUsers.find((e=>e.id===t))||this.allowedUsers.find((e=>e.id===t));if(!i)return;const d=this.roles.find((e=>e.id===r));d?(i.role=d,this.saveState()):console.error("Role not found")}saveState(){this.gameId&&$.ajax({url:"/userPermissions",type:"POST",data:{gameId:this.gameId,requestedUsers:JSON.stringify(this.requestedUsers.map((e=>({id:e.id,roleId:e.role?e.role.id:null})))),allowedUsers:JSON.stringify(this.allowedUsers.map((e=>({id:e.id,roleId:e.role?e.role.id:null}))))},headers:{"X-CSRF-Token":$('meta[name="csrf-token"]').attr("content")||""},dataType:"json",success:e=>{if(e.success){const s=e.data?.allowedUsers||[];this.allowedUsers=s.map((e=>({id:e.id,username:e.username,role:this.roles.find((s=>s.id===e.role_id))})));const t=e.data?.requestedUsers||[];this.requestedUsers=t.map((e=>({id:e.id,username:e.username,role:this.roles.find((s=>s.id===e.role_id))}))),this.showSelectedAllowedUsers(),this.searchUsers(this.searchElement.val())}else console.error("Error saving state:",e.error)},error:(e,s,t)=>{console.error("Error saving state:",t)}})}handleRemoveAllowedUserClick(e){const s=$(e.currentTarget).closest(".card").data("sp-user-id"),t=this.allowedUsers.findIndex((e=>e.id===s));-1!==t?(this.allowedUsers.splice(t,1),this.users.find((e=>e.id===s)).role=void 0,this.showSelectedAllowedUsers(),this.searchUsers(this.searchElement.val()),this.saveState()):console.error("User not found in allowed list")}}}}]);